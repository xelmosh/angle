// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x65,0x95,0x4d,0x68,0x9d,0x55,
    0x10,0x86,0xcf,0x77,0xef,0xcd,0xbd,0x49,0x2f,0xb6,0x31,0xa6,0x8d,0xf9,0xa9,0x69,
    0x1a,0x03,0x92,0x4a,0xec,0xa2,0x4a,0x40,0x14,0xa5,0x0b,0x5d,0x94,0xd6,0x1f,0x48,
    0x85,0x6c,0x22,0x64,0x93,0x85,0x4a,0x50,0x37,0x59,0x54,0xe1,0x22,0xdd,0x64,0xd1,
    0x4d,0x36,0xb5,0xd6,0x54,0xb1,0xfe,0xd4,0xb6,0x5a,0x77,0xe2,0x4f,0xd1,0x62,0x35,
    0x54,0xa2,0x06,0x25,0x6a,0x31,0x60,0x55,0x02,0x5a,0x02,0x5a,0xa3,0x6d,0x09,0x38,
    0xef,0x77,0x9f,0x69,0x87,0x6b,0x60,0x7a,0xbe,0x79,0xdf,0x99,0x79,0xcf,0x9c,0x33,
    0xe7,0xb6,0x58,0xe8,0xaf,0xa4,0x94,0xa5,0x75,0xa9,0x39,0xf5,0x67,0x29,0xff,0xbb,
    0x31,0x15,0x92,0x3e,0xab,0xa9,0x9c,0xaf,0x0f,0xec,0x7a,0x74,0xd7,0xd0,0xd3,0xcf,
    0x8c,0x0f,0xed,0xb8,0x73,0xbb,0xf8,0xf5,0xa9,0x98,0xc7,0x89,0xdb,0x60,0x5e,0xc9,
    0x56,0xd9,0x13,0x8f,0x4f,0x3c,0x29,0xbc,0xdd,0x6c,0xaf,0xd9,0x98,0xd9,0x84,0xd9,
    0xa4,0xd9,0x94,0x59,0xcd,0x6c,0xda,0x6c,0xc6,0xac,0xd5,0x6a,0x28,0xa7,0xa2,0xfa,
    0xf6,0xd5,0x9e,0xeb,0xa9,0x5e,0x4a,0x0f,0xa6,0xa6,0xd4,0x53,0xdf,0x4a,0xea,0x67,
    0x75,0x2c,0x03,0x6b,0x0e,0x58,0x01,0xac,0x35,0x60,0x45,0xb0,0x9b,0x03,0x56,0x02,
    0xeb,0x09,0x58,0x13,0xd8,0x96,0x80,0x95,0xc1,0x6e,0x0d,0x58,0x05,0xec,0xb6,0x80,
    0x35,0x83,0xdd,0x1e,0xb0,0x16,0xb0,0xed,0x01,0x5b,0x07,0xb6,0x23,0xef,0xb5,0x78,
    0x6d,0xcf,0xea,0x5b,0xe7,0x74,0x0b,0x3d,0xca,0x1f,0xc3,0xcf,0xf0,0x27,0xf0,0x3d,
    0x7e,0x12,0xbf,0x88,0x3f,0x85,0x5f,0xc2,0xaf,0xe1,0x37,0xe1,0x4f,0xe3,0x97,0xf1,
    0x67,0xf0,0xfd,0xdc,0x0f,0xd9,0xba,0x35,0xe8,0xcb,0xef,0x0b,0xfe,0x6c,0x03,0x3f,
    0x0b,0xaf,0xfd,0xdc,0x64,0xff,0x16,0x72,0xbf,0x98,0xef,0x47,0xdf,0x9b,0xec,0xab,
    0xcc,0x79,0x76,0x58,0x7c,0x05,0xed,0x02,0x7e,0x15,0xbf,0x94,0xc7,0x94,0xac,0x46,
    0x62,0xd6,0x52,0xba,0x1b,0xbf,0x1d,0x6c,0xa3,0xf9,0x5d,0xd4,0x72,0xbf,0x1b,0x3f,
    0xe5,0x7d,0xdc,0x70,0xed,0x6e,0xdc,0xba,0x82,0x95,0x59,0xbb,0x83,0x49,0x73,0x33,
    0xf7,0xd4,0x83,0xe6,0x66,0xce,0x44,0xd8,0x36,0x34,0x7b,0xd1,0x54,0xfc,0x16,0xb8,
    0x4a,0xe0,0x07,0xd8,0x83,0xfb,0x83,0xcc,0x83,0xe2,0xb7,0x11,0xdf,0x9d,0xf7,0x52,
    0x48,0x43,0xc4,0xc9,0xbf,0xa3,0x21,0x6f,0xb8,0x41,0x77,0x27,0xf3,0xe2,0xfe,0x6e,
    0x74,0x55,0x77,0x0f,0xb1,0x5d,0xf8,0x23,0xcc,0x81,0x9f,0xdd,0x08,0xef,0xae,0x18,
    0xf2,0x47,0x39,0x7b,0xe7,0xc7,0x1a,0xf8,0x71,0xee,0xc2,0xf9,0x09,0x78,0xf7,0x27,
    0x1b,0xe2,0x9f,0xe5,0x9d,0x39,0x3f,0xd5,0xc0,0xef,0xe3,0x7e,0x9c,0xaf,0x35,0xf0,
    0xfb,0xcd,0xee,0x0b,0xfc,0x74,0x03,0x7f,0xc0,0xec,0xf9,0xc0,0xcf,0xc0,0x77,0x5a,
    0xe7,0x07,0xb9,0x53,0x7e,0xa6,0xfe,0xb7,0xea,0x4c,0x5e,0xe4,0xfb,0x20,0x35,0xe4,
    0x1f,0x02,0xeb,0xb2,0x93,0x38,0x4c,0xdc,0xcb,0x60,0x87,0x89,0x93,0x3f,0x0b,0xd6,
    0x6d,0x8a,0xaf,0x50,0x43,0x33,0x7b,0x0c,0xdd,0xb8,0xcf,0x93,0xf8,0x77,0xd9,0x4b,
    0x2b,0x70,0x86,0x09,0xec,0x5f,0x43,0xf4,0xfe,0xee,0x61,0xde,0xdf,0x67,0xa6,0x1f,
    0x36,0x54,0x75,0x3e,0x00,0x4b,0x01,0xfb,0x10,0x4c,0xbd,0x3c,0x64,0x98,0xee,0xfc,
    0x23,0x62,0xc5,0xdd,0x6f,0x98,0xce,0xf5,0x63,0x66,0xb5,0x97,0xfa,0x8a,0x3b,0x0d,
    0xfe,0x02,0x79,0x9f,0x90,0x7b,0x3a,0xe4,0x7d,0x4a,0xde,0x40,0xc8,0x3b,0x03,0x5e,
    0x23,0xef,0x33,0x72,0xcf,0x90,0xa7,0x39,0x3e,0x4b,0xde,0x20,0x79,0x9a,0xe1,0xcf,
    0xc1,0x8f,0x59,0x8c,0x66,0xfb,0x0b,0x30,0xcd,0xf6,0x3f,0x76,0x02,0xf3,0xf4,0x76,
    0xc5,0xe2,0xc5,0xcd,0x99,0xcd,0x73,0x2e,0x73,0xa1,0xe7,0x73,0x68,0xea,0xef,0x39,
    0x8b,0x15,0xf6,0x25,0xf8,0x23,0xe6,0x69,0x4f,0x3d,0x59,0x1d,0xf3,0xb8,0xcb,0x56,
    0xc3,0x6b,0x69,0xfd,0xdb,0xa2,0xf2,0xf7,0x91,0xd5,0x63,0x9a,0xc8,0x99,0x0b,0x3d,
    0x7c,0x45,0x0f,0xc3,0xa1,0x87,0xaf,0xc1,0xbd,0x87,0x6f,0xc0,0xbc,0x87,0xc5,0xd0,
    0x83,0xb8,0x05,0xb3,0x45,0x74,0x17,0x42,0x0f,0xdf,0xa2,0x9d,0x85,0x1e,0xbe,0x03,
    0xf7,0x1e,0x7a,0xb3,0x3a,0xe6,0x71,0xea,0xc1,0x6b,0x2d,0x86,0x1e,0xfa,0xb2,0x7a,
    0xcc,0x3c,0x39,0x0b,0xa1,0x87,0xef,0xe9,0x61,0x67,0xe8,0xe1,0x07,0x70,0xef,0xe1,
    0x47,0x30,0xef,0x61,0x29,0xf4,0x20,0xee,0xbc,0xd9,0x12,0xba,0xfa,0xde,0x83,0xee,
    0x4f,0x68,0xf7,0x65,0xd7,0xdf,0x92,0xf6,0xe8,0xb1,0x4b,0x61,0x8f,0x5b,0x89,0x5b,
    0x24,0xef,0x3c,0xfb,0xd1,0x5b,0x79,0x89,0xb7,0x26,0x5f,0xef,0xea,0x08,0x6f,0x6a,
    0xc4,0xf6,0xa7,0xf7,0xf4,0x2a,0x31,0x47,0xc2,0x5c,0xbe,0x46,0x5f,0xa3,0x61,0x2e,
    0x8f,0x82,0xfb,0x3c,0xbf,0x8e,0xee,0x51,0xf2,0xf4,0x3b,0xf8,0x06,0x79,0xe3,0xe4,
    0xe9,0x4d,0xbe,0x09,0xfe,0x14,0xf7,0xf0,0x16,0x98,0xdf,0xd5,0xdb,0xd4,0x8a,0xef,
    0xee,0x38,0x58,0xfd,0xdd,0x95,0xf3,0xb7,0x7e,0x82,0xd8,0xe3,0xd4,0x70,0xcd,0x77,
    0xd0,0x3c,0x19,0x34,0xdf,0x05,0x77,0xcd,0x53,0x60,0x8f,0xd9,0xce,0xf5,0xf6,0xdf,
    0xa3,0xef,0x13,0xfc,0x0e,0x9f,0x0a,0xf5,0x7e,0xa6,0xde,0xee,0x50,0xef,0x02,0xf8,
    0x59,0x8b,0x91,0xff,0x0b,0x58,0x6f,0xb8,0xe7,0x5f,0xc1,0x07,0xb8,0xe7,0xe5,0x70,
    0xcf,0xe2,0x7e,0x33,0x5b,0xe6,0xee,0xf4,0x7d,0xaf,0xc5,0xec,0x65,0x2f,0xba,0x57,
    0xe7,0x96,0x83,0xce,0xef,0xe8,0x8c,0x06,0x9d,0x3f,0xc0,0x5d,0x67,0x25,0xe8,0x88,
    0xbb,0x68,0xb6,0x42,0xad,0x8b,0xe8,0x8c,0x05,0x1d,0xe7,0x56,0x82,0xce,0x9f,0xe8,
    0x8c,0x07,0x9d,0xbf,0xc0,0x5d,0x67,0x35,0xe8,0x88,0xbb,0x64,0xb6,0x4a,0xad,0x4b,
    0xe8,0x4c,0x04,0x1d,0xe7,0x56,0x83,0xce,0x65,0x74,0x06,0x83,0xce,0x15,0x70,0xd7,
    0x59,0x0b,0x3a,0xe2,0xae,0x9a,0xad,0x51,0xeb,0x2a,0x3a,0x93,0x41,0xc7,0xb9,0xb5,
    0xa0,0xa3,0xc1,0xb9,0xc0,0xff,0x8b,0xae,0x93,0x65,0x75,0xdc,0x75,0x4a,0xd9,0x75,
    0x1d,0x71,0x05,0x33,0x61,0xaa,0xa5,0x6f,0xe9,0x4c,0x05,0x1d,0xe7,0xb4,0xba,0x4e,
    0x05,0x9d,0x7d,0x41,0xa7,0x39,0xab,0xe3,0xae,0x53,0x0d,0x3a,0xe2,0x5a,0xcc,0xaa,
    0xd4,0x6a,0x41,0xa7,0x16,0x74,0x9c,0xab,0x06,0x9d,0xf5,0xe8,0xec,0x0f,0x3a,0x1b,
    0xb2,0x3a,0xee,0x3a,0x6d,0x41,0x47,0x5c,0xab,0x59,0x1b,0xb5,0x5a,0xd1,0x99,0x0e,
    0x3a,0xce,0xb5,0x05,0x9d,0x8d,0xe8,0x1c,0x08,0x3a,0x9b,0xb2,0x3a,0xee,0x3a,0x9d,
    0x41,0x47,0x5c,0x87,0x59,0x27,0xb5,0x3a,0xd0,0x99,0x09,0x3a,0xce,0x69,0x5d,0xb3,
    0x0b,0x18,0x36,0xfb,0x0f,0xed,0xcb,0xaf,0x20,0xe0,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform texture2DArray color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(vec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//             vec4 colorValue = textureLod(sampler2DArray(color, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer), params . srcMip);
//
//     broadcastColor(colorValue);
//
// }
