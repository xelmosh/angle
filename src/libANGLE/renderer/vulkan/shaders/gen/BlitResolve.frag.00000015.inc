// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000015.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000015[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x94,0xdb,0x4b,0x54,0x51,
    0x14,0xc6,0xb7,0x73,0x74,0x46,0xed,0xa2,0x61,0x33,0x96,0x45,0x54,0x56,0x74,0x23,
    0x04,0x2d,0x82,0x48,0xe8,0x21,0x0a,0xd2,0xca,0xc6,0xc2,0xae,0x93,0x39,0x53,0x9a,
    0xa3,0x23,0xea,0x43,0x0f,0x41,0x74,0x83,0xe8,0x46,0x45,0x9a,0x14,0x56,0x52,0x58,
    0x59,0x3e,0x04,0xdd,0xfe,0xb1,0xe8,0x02,0x41,0x6b,0xed,0xf3,0xdb,0xb1,0x98,0x87,
    0x0e,0x6c,0xf6,0x59,0xdf,0xfa,0xd6,0xe5,0xdb,0xb7,0x28,0xd1,0x9c,0x72,0xae,0xc2,
    0xd5,0xba,0x6a,0xf7,0xcd,0xc5,0xdf,0x12,0x97,0x10,0x24,0x9e,0x27,0x1a,0x9c,0xf8,
    0x6a,0x5c,0xf6,0xf0,0xb1,0xdc,0xde,0x9e,0xee,0xdc,0x58,0x7f,0x6f,0xbe,0x30,0x9a,
    0x1b,0x1b,0x2f,0x0c,0xf7,0x0d,0x14,0x73,0x85,0x4b,0x23,0xa5,0xd1,0x71,0xe1,0x2e,
    0x70,0x49,0x1f,0xb3,0xaf,0x23,0xdb,0xb1,0x6d,0x6c,0x3c,0xbf,0xad,0x6d,0x7b,0x8b,
    0xe6,0x5a,0xec,0x22,0x9f,0x53,0x7d,0x75,0x52,0xa3,0x52,0x66,0x1d,0x43,0xbd,0x03,
    0xc3,0xce,0x63,0xce,0x75,0xc8,0x28,0xca,0xa8,0x17,0xae,0xfa,0x52,0xe6,0x7f,0xa1,
    0xe6,0x94,0xbf,0x3a,0x5f,0x23,0xe6,0xef,0x77,0x55,0xae,0x91,0x5e,0x9b,0x99,0x03,
    0x56,0x01,0x56,0x6d,0xb0,0x04,0x58,0xbd,0xc1,0x22,0xb0,0x65,0x06,0xab,0x04,0x5b,
    0x69,0xb0,0x2a,0xb0,0xd5,0x06,0x4b,0x82,0xad,0x33,0x58,0x0a,0x6c,0xa3,0xc1,0xaa,
    0xc1,0xb6,0x1a,0xac,0x06,0xac,0xc5,0x60,0xb5,0x60,0x6d,0x5e,0x6b,0xf4,0xaf,0x67,
    0xd5,0xdd,0x81,0xee,0x0c,0xf6,0x21,0x99,0xd7,0xa2,0x39,0xd8,0x6b,0x8c,0x9d,0x2d,
    0xf3,0x67,0xf1,0x87,0x7c,0x45,0xf2,0x4d,0x36,0xc4,0x76,0xa9,0x8c,0x5f,0x82,0xaf,
    0xeb,0xd8,0x20,0x51,0x09,0x6f,0x47,0x7e,0xbd,0x12,0xbe,0x8f,0xc8,0xeb,0xd7,0xf5,
    0x68,0x14,0x7e,0x8a,0xf5,0x48,0x60,0x2f,0xc2,0xae,0xf4,0x9c,0x4a,0xd9,0xff,0x38,
    0x97,0xe2,0xbb,0xb0,0xeb,0xc0,0xd2,0x62,0xa7,0xc9,0x15,0xec,0x0c,0xb6,0x7e,0xab,
    0x24,0x2a,0xac,0x6d,0x18,0x69,0x33,0x92,0xcc,0x19,0x33,0xb4,0xe6,0x32,0xd6,0xb9,
    0x91,0x9a,0x6a,0x2f,0x07,0xdb,0x42,0xcd,0x26,0x6a,0x2a,0x7f,0x05,0xbe,0x94,0xf1,
    0x87,0x1e,0x82,0xbd,0x9e,0xfd,0x54,0xfe,0x06,0xf8,0x5a,0x6f,0xa9,0x28,0xdf,0x04,
    0x4f,0xed,0xcd,0x65,0x71,0xad,0x65,0x75,0xdb,0xd9,0x6f,0xcd,0x73,0x80,0x73,0x98,
    0xa4,0xcf,0x03,0xdc,0x85,0xc8,0xf7,0x5b,0xe3,0x3a,0xf1,0x55,0x90,0xb3,0x7c,0xd6,
    0x1c,0x07,0xf9,0xef,0x24,0x87,0xda,0x87,0xc0,0x9a,0xa4,0xb7,0x2e,0x78,0x47,0xc0,
    0xba,0xe0,0xa9,0x9d,0x05,0x5b,0x21,0x15,0x8f,0x92,0x23,0xf4,0xd9,0xc3,0x9e,0x06,
    0xfb,0x94,0xd9,0xd3,0xd3,0x68,0x4a,0xb3,0xe7,0xbd,0xf4,0x19,0x19,0x7e,0x01,0x5b,
    0xf9,0x83,0xfc,0xa7,0xa9,0x3d,0xc8,0x7d,0x0f,0x3a,0x87,0x58,0xcb,0xff,0xe9,0x1c,
    0xe6,0x7f,0x88,0x1c,0x6a,0x97,0x4c,0xff,0xa3,0xf8,0xb4,0x9f,0xab,0xe4,0xd3,0x7e,
    0x77,0xc8,0x1d,0x4b,0xf0,0xef,0xa8,0xf9,0x53,0x10,0xbd,0xd7,0xbb,0x39,0xaf,0xb7,
    0x38,0x93,0x5d,0x82,0xaa,0x8e,0xdb,0x60,0xce,0x60,0x77,0xc0,0xb4,0xa7,0xc3,0x82,
    0xe9,0x59,0xb9,0x0b,0x57,0x7d,0x7b,0x04,0xd3,0x73,0x74,0x8f,0xb3,0xd6,0x44,0x7e,
    0xe5,0xdd,0x07,0xbf,0x49,0xdc,0x03,0x62,0xef,0x9b,0xb8,0x87,0xc4,0xad,0x36,0x71,
    0x8f,0xc0,0xaf,0x13,0xf7,0x98,0xd8,0x47,0xc4,0xe9,0x39,0x9c,0x20,0x6e,0x3d,0x71,
    0xaa,0x7b,0x12,0xfc,0xbd,0x70,0xf4,0x6c,0x3e,0x01,0xd3,0xb3,0xf9,0x43,0x56,0x60,
    0x1a,0x6d,0xbf,0x85,0xaf,0xbe,0x29,0x19,0xd3,0xac,0xcb,0x94,0xd1,0xfc,0x94,0x9a,
    0xfa,0x5d,0x11,0xae,0x62,0xcf,0xc0,0x8f,0x88,0xa5,0x3d,0x7d,0x04,0x0b,0xbc,0x5f,
    0x92,0x23,0xe4,0xd2,0xf9,0xbb,0xb0,0x94,0xf7,0x19,0x4e,0x15,0x31,0x53,0x46,0xc3,
    0x73,0x34,0xb4,0x1a,0x0d,0x2f,0xc0,0x83,0x86,0x97,0x60,0x41,0xc3,0xac,0xd1,0xa0,
    0xbe,0x19,0x19,0xb3,0xd4,0x9d,0x31,0x1a,0x5e,0x51,0xbb,0xc2,0x68,0x78,0x0d,0x1e,
    0x34,0x7c,0x02,0x0b,0x3c,0xd5,0x10,0x72,0xcd,0x1a,0x0d,0x5f,0xe0,0x4c,0x13,0x33,
    0x63,0x34,0xbc,0x41,0x43,0xbb,0xd1,0xf0,0x16,0x3c,0x68,0x78,0x07,0x16,0x34,0xcc,
    0x1b,0x0d,0xea,0x9b,0x93,0x31,0x4f,0xdd,0x39,0x7f,0x8f,0xe3,0xba,0x1f,0xa8,0xfd,
    0xc5,0xdc,0x09,0xed,0x31,0x70,0xe7,0x4d,0x8f,0x5f,0xe1,0xcd,0x12,0x37,0x47,0x3f,
    0x9d,0xfe,0xdc,0xc6,0x6f,0x83,0xda,0xfa,0x0e,0x74,0xf3,0x06,0x1c,0x93,0xfe,0x8e,
    0xfa,0x39,0xe6,0x74,0x9b,0x73,0x79,0x1c,0x5d,0x3d,0xe6,0x5c,0x9e,0x00,0x0f,0xe7,
    0xf9,0x24,0x75,0x4f,0x10,0xa7,0xef,0xc3,0x19,0xe2,0x4e,0x11,0xa7,0x77,0x3f,0x07,
    0x5e,0x62,0x1f,0xce,0x82,0x85,0xbd,0x3a,0x47,0x2e,0x7b,0xef,0xfa,0xc0,0xe2,0x7b,
    0x97,0xf4,0x6f,0x4d,0x1e,0x6e,0x1f,0x39,0x42,0xcd,0xf3,0xd4,0x2c,0x98,0x9a,0x17,
    0xc0,0x43,0xcd,0x7e,0xb0,0x1e,0xe9,0x5c,0xef,0xfe,0x00,0xba,0xf3,0xbc,0x77,0xfd,
    0xa6,0xf6,0x45,0xfc,0xce,0xef,0x6b,0xe4,0xdf,0xe6,0x8b,0xe4,0xd6,0xb7,0x66,0x84,
    0x37,0x48,0xd7,0x4f,0xdf,0x9f,0x31,0xb0,0x6e,0xf2,0xeb,0x3b,0x74,0x0d,0xbc,0x3c,
    0x7f,0xc6,0xdf,0xeb,0xd8,0xaf,0xdf,0x65,0xfa,0xbd,0x01,0xae,0xf5,0x8a,0xd8,0x7f,
    0x44,0xfd,0x4e,0x19,0x7f,0x01,0x13,0xdc,0xc2,0xdb,0xac,0x09,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(set = 0, binding = 0)uniform texture2DArray depth;
//
// layout(set = 0, binding = 1)uniform utexture2DArray stencil;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragDepth = textureLod(sampler2DArray(depth, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer), params . srcMip). x;
//
//     gl_FragStencilRefARB = int(textureLod(usampler2DArray(stencil, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer), params . srcMip). x);
//
// }
