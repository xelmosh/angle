// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x5f,0x68,0x97,0x65,
    0x14,0xc7,0xdf,0xf7,0xf7,0x77,0x6d,0x6b,0x69,0xdb,0xdc,0xa2,0xcd,0xcd,0x6c,0xd1,
    0x1f,0x11,0x41,0x8b,0x20,0x12,0xbb,0x2a,0xc3,0x11,0xcd,0x0b,0x6f,0x06,0x19,0xb4,
    0x8b,0x2e,0x26,0x49,0xb1,0x0b,0x2f,0x9a,0xe4,0xcd,0x2e,0x24,0xd8,0x4d,0xa8,0x17,
    0x96,0x66,0x20,0x15,0x69,0x9a,0x77,0x56,0xd2,0x1f,0x2b,0x66,0x8d,0x62,0xd5,0x68,
    0xd0,0x1f,0x19,0x94,0x0c,0x4a,0x06,0xce,0x16,0x29,0x9d,0xef,0xf3,0x7e,0xce,0x3a,
    0xfc,0x06,0x67,0xef,0x7b,0xbe,0xdf,0xf3,0x9c,0xef,0x39,0xe7,0x79,0x9e,0xf7,0x57,
    0x2e,0xad,0xaf,0x67,0x59,0x9e,0x35,0x67,0x4d,0xd9,0xba,0x3c,0x4b,0x7f,0xab,0xb3,
    0x52,0xa6,0xd7,0x96,0xac,0x96,0x9e,0x8f,0xef,0xd8,0xb9,0x63,0xe3,0x8b,0x2f,0x3d,
    0xb7,0x71,0xcb,0x83,0x9b,0xc4,0xb7,0x65,0xe5,0x14,0x27,0xee,0x36,0xf3,0x2a,0xf6,
    0x94,0x8d,0x3e,0xfb,0xfc,0x1e,0xe1,0x5d,0x66,0x3b,0xcd,0x86,0xcd,0x46,0x84,0x9b,
    0x8d,0x99,0x8d,0x9b,0x4d,0x98,0x4d,0x9a,0xad,0xb2,0x1c,0x5a,0x53,0x57,0x7e,0x7b,
    0xeb,0x4a,0x7a,0xca,0x97,0x65,0x4f,0x64,0xd5,0xac,0xa7,0x28,0x25,0x5b,0xcf,0xd3,
    0xb1,0x1c,0xac,0x29,0x60,0x25,0xb0,0x55,0x01,0x2b,0x83,0x75,0x07,0xac,0x02,0xd6,
    0x13,0xb0,0x2a,0x58,0x7f,0xc0,0x6a,0x60,0x77,0x07,0xac,0x0e,0x76,0x6f,0xc0,0x9a,
    0xc0,0x36,0x04,0xec,0x16,0xb0,0x4d,0x01,0x6b,0x06,0xdb,0x92,0x7a,0x2d,0xaf,0xd4,
    0xac,0xbe,0x35,0xa7,0xb5,0xf4,0x28,0x7f,0x18,0x3f,0xc7,0x1f,0xc1,0xf7,0xf8,0x51,
    0xfc,0x32,0xfe,0x18,0x7e,0x05,0x7f,0x1c,0xbf,0x8a,0x3f,0x81,0x5f,0xc3,0x9f,0xc4,
    0xf7,0xb9,0x9f,0xb0,0xe7,0x5d,0x41,0x5f,0xfe,0x3a,0xfc,0x76,0x53,0x2d,0x25,0xbf,
    0x9c,0xf4,0xf4,0xde,0x69,0x31,0x35,0xe6,0x95,0xa7,0xbd,0xae,0xa4,0x5c,0xb5,0xc0,
    0xb7,0xc0,0x67,0xf0,0xad,0xec,0xad,0x6a,0x5c,0x63,0x99,0x3a,0xe0,0xc5,0x75,0xda,
    0xb3,0x03,0xae,0xdf,0xfe,0xaf,0x21,0xaf,0xf0,0x47,0xf0,0xbb,0x82,0x56,0x37,0xf1,
    0xa5,0xd4,0xc7,0xad,0x2b,0x7b,0xd3,0x8d,0xd5,0x82,0x75,0xf0,0x6c,0x09,0x26,0x8d,
    0x5e,0xf6,0xa9,0x07,0x8d,0x5e,0x66,0x22,0xec,0x01,0xfa,0xeb,0xa3,0x7e,0xc5,0xf7,
    0xc3,0xd5,0x03,0x3f,0xc0,0xfe,0x8b,0xbf,0x07,0xbe,0x25,0x69,0x96,0xb2,0xfb,0x88,
    0x93,0x7f,0x3f,0x79,0x7c,0xdd,0xe6,0x06,0x9d,0xad,0x9c,0x0f,0xf7,0xb7,0xa3,0xa3,
    0xbc,0x4f,0x12,0x5b,0x0b,0xfc,0x20,0xb3,0x10,0x3f,0xc4,0x39,0x68,0xa5,0x8f,0x21,
    0xee,0x5d,0x39,0xc4,0xef,0x62,0x56,0xce,0x0f,0x37,0xf0,0xbb,0x99,0xbd,0xf3,0x23,
    0xf0,0xee,0x8f,0x36,0xc4,0xef,0xe5,0x9e,0x39,0x3f,0xd6,0xc0,0xef,0x63,0x6f,0x9d,
    0x1f,0x6f,0xe0,0x0f,0x98,0x6d,0x0b,0xfc,0x44,0x03,0x7f,0xd0,0x6c,0x7f,0xe0,0x27,
    0xe1,0x37,0xd8,0x54,0xd4,0xe7,0x6b,0xcc,0x34,0x9a,0xaf,0x3d,0xca,0xb9,0xbf,0xc3,
    0xa6,0x76,0x9c,0xfd,0xe0,0x93,0xb6,0xf2,0xbd,0xca,0xc3,0xbe,0xbe,0xc9,0xfb,0x71,
    0xf4,0xe4,0x9f,0x68,0xd8,0xaf,0x53,0xcc,0x5f,0xf1,0xa7,0xd9,0x0f,0x9d,0xab,0x87,
    0x4c,0xa9,0xc4,0xec,0x32,0x6a,0xfc,0xdb,0x10,0xe9,0x3f,0xca,0xb9,0x3e,0xcf,0xd9,
    0x7d,0xca,0x6a,0xd7,0xd9,0xfc,0x10,0xec,0x7c,0xa8,0x67,0x0f,0xf7,0xe7,0x23,0xf8,
    0xc7,0x2c,0x83,0xe6,0xf7,0x31,0x67,0xb2,0x8f,0x7c,0x8a,0xb9,0x00,0xfe,0x8a,0xc5,
    0xc8,0xff,0x84,0x75,0x17,0x58,0xa7,0x73,0xf8,0x29,0xeb,0x06,0x58,0xa7,0x19,0x7c,
    0x06,0xfe,0x8e,0xc5,0xe8,0x6c,0x7e,0x0e,0xa6,0xd9,0x5d,0xb7,0xca,0xa7,0xa8,0xe7,
    0x1f,0x8b,0x17,0x77,0xd1,0x6c,0x8a,0x7e,0xf4,0xfe,0xb4,0xad,0xd3,0x0c,0xbe,0x44,
    0x53,0x7f,0x2f,0x33,0x9f,0xaf,0xc0,0x87,0xcc,0x4b,0xf7,0x30,0x2f,0x30,0x8f,0x5b,
    0xb6,0x1c,0x9e,0x4b,0xcf,0x6b,0x16,0xa5,0xb8,0x9e,0xbc,0x88,0xa9,0xb2,0xe6,0x62,
    0xe8,0xe1,0x12,0x3d,0x6c,0x0e,0x3d,0x7c,0x0d,0xee,0x3d,0x7c,0x03,0xe6,0x3d,0xcc,
    0x84,0x1e,0xc4,0x4d,0x9b,0xcd,0xa0,0x3b,0x1d,0x7a,0xf8,0x16,0xed,0x3c,0xf4,0xf0,
    0x1d,0xb8,0xf7,0x70,0x67,0x5e,0x60,0x1e,0xa7,0x1e,0x3c,0xd7,0x4c,0xe8,0xa1,0x37,
    0x2f,0x62,0xa6,0x58,0x33,0x1d,0x7a,0xf8,0x9e,0x1e,0xb6,0x86,0x1e,0x7e,0x00,0xf7,
    0x1e,0x7e,0x04,0xf3,0x1e,0xe6,0x42,0x0f,0xe2,0x66,0xcd,0xe6,0xd0,0x9d,0xe5,0x1c,
    0x49,0xf7,0x27,0xb4,0x7b,0xf3,0xff,0xcf,0xb3,0x6a,0xf4,0xd8,0xb9,0x50,0xe3,0x5a,
    0xe2,0x66,0x58,0x37,0x4b,0xec,0x21,0x62,0x0f,0x11,0xab,0xbb,0xd5,0x9f,0x17,0xf7,
    0x4b,0xeb,0xdf,0x36,0x3b,0x0c,0x97,0xbe,0x87,0x79,0x71,0x16,0xc5,0xbd,0x0b,0xa7,
    0x5e,0xf5,0x8d,0x7a,0x9d,0x5e,0x8f,0xd2,0xab,0xe2,0xdf,0x00,0x7f,0x9f,0x5e,0x8f,
    0x91,0x43,0xf8,0x92,0xc5,0x1c,0x21,0x87,0xf7,0x7b,0x0c,0xff,0x08,0x75,0x1d,0x26,
    0x97,0xee,0xe6,0x5b,0xdc,0xcb,0x67,0xa8,0xf3,0x24,0x98,0x7a,0xdb,0x46,0xde,0xfd,
    0xa6,0xd3,0x4a,0xdd,0xea,0xe3,0x64,0x56,0x60,0x35,0xea,0x55,0xcc,0x60,0x43,0xef,
    0xd2,0x7a,0x81,0xbb,0xfa,0x1e,0xeb,0xd4,0xd3,0xe9,0x54,0x77,0xd1,0xd3,0x29,0xea,
    0xd0,0x9d,0x3f,0x03,0xfe,0xaa,0xc5,0x68,0xcd,0x59,0xd6,0x9d,0x49,0xdf,0xe0,0x5a,
    0xc2,0x3e,0x08,0xdf,0x99,0xb3,0xe9,0xfb,0x59,0xfc,0xfe,0x9d,0x83,0xf3,0x99,0xfd,
    0x4c,0xfe,0xed,0x61,0x66,0xbf,0x80,0x7f,0x41,0xdd,0xbf,0x82,0x0d,0x86,0x33,0xf3,
    0x1b,0x78,0x1f,0x67,0x66,0x3e,0xcc,0x50,0xdc,0x65,0xb3,0x79,0xfa,0xbb,0x9c,0xce,
    0x5f,0x39,0xfd,0x26,0x9c,0xa3,0x77,0xe7,0xe6,0x83,0xce,0xef,0xe8,0xec,0x0a,0x3a,
    0x7f,0x80,0xbb,0xce,0x42,0xd0,0x11,0x77,0xc5,0x6c,0x81,0x5c,0x57,0xd0,0x19,0x0e,
    0x3a,0xce,0x2d,0x04,0x9d,0x3f,0xd1,0xd9,0x1d,0x74,0xfe,0x02,0x77,0x9d,0xc5,0xa0,
    0x23,0xee,0xaa,0xd9,0x22,0xb9,0xae,0xa2,0x33,0x12,0x74,0x9c,0x5b,0x0c,0x3a,0xd7,
    0xd0,0x19,0x08,0x3a,0x4b,0xe0,0xae,0xb3,0x1c,0x74,0x96,0x12,0x96,0x25,0x4c,0xb9,
    0xae,0xa3,0x33,0x1a,0x74,0x9c,0x5b,0x0e,0x3a,0xff,0xa2,0xb3,0x37,0xe8,0xdc,0x00,
    0x77,0x1d,0xbf,0xa0,0xd2,0x11,0x77,0x93,0x0f,0xbf,0x72,0xdd,0x44,0x67,0x2c,0xe8,
    0x38,0xa7,0xa7,0xeb,0x94,0xf3,0x42,0x67,0x5f,0xd0,0xa9,0xe4,0x05,0xee,0x3a,0xf5,
    0xa0,0x23,0xae,0x6a,0x56,0x27,0x97,0xde,0xa5,0x33,0x1e,0x74,0x9c,0xab,0x07,0x9d,
    0x66,0x74,0x0e,0x04,0x9d,0x96,0xbc,0xc0,0x5d,0xa7,0x2d,0xe8,0x88,0x6b,0x35,0x6b,
    0x23,0x57,0x2b,0x3a,0x13,0x41,0xc7,0xb9,0xb6,0xa0,0xb3,0x1a,0x9d,0x83,0x41,0xe7,
    0xf6,0xbc,0xc0,0x5d,0xa7,0x33,0xe8,0x88,0x6b,0x37,0xeb,0x24,0x57,0x3b,0x3a,0x93,
    0x41,0xc7,0x39,0x3d,0x6f,0xd8,0xf0,0x1e,0x36,0xfb,0x0f,0x8c,0xca,0xb9,0x26,0xdc,
    0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DMS color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(uvec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//             uvec4 colorValue = uvec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue = uvec4(round(colorValue * params . invSamples));
//
//     broadcastColor(colorValue);
//
// }
