// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000012.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000012[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x92,0xdb,0x6e,0x12,0x51,
    0x14,0x86,0x17,0x33,0x85,0x81,0x1a,0x5a,0x08,0x02,0xd6,0x18,0x8b,0xe2,0x85,0x89,
    0xb6,0xe9,0x45,0x35,0x24,0x46,0xa3,0x17,0x60,0x6b,0xd0,0xaa,0xf4,0xe0,0xa9,0x19,
    0x4b,0x81,0x94,0xd0,0x82,0x02,0x31,0x6a,0xd5,0x0b,0xdf,0x41,0x5f,0xc2,0xe7,0x33,
    0x1e,0x12,0x13,0xd7,0x3f,0xf3,0xef,0xba,0x22,0xc9,0x66,0xcf,0xfe,0xd6,0xf1,0x5f,
    0x7b,0xfb,0x5e,0x35,0x10,0x49,0xc8,0xac,0xa4,0xe5,0xa3,0xc4,0xbf,0xbc,0x78,0x4a,
    0xe2,0xfd,0x4b,0x41,0xd4,0x96,0x91,0xd6,0xc3,0xed,0xb0,0xfe,0x64,0x33,0x9c,0x1c,
    0xec,0x75,0xba,0xe3,0x70,0x32,0xed,0x0e,0xf7,0xfb,0x87,0x61,0xf7,0xed,0xab,0xd1,
    0x78,0xaa,0xbe,0xa7,0x24,0x15,0xc5,0xdc,0x6d,0xb6,0x9a,0xcb,0x93,0x69,0x67,0x79,
    0xf5,0xda,0x0a,0x72,0xcd,0x89,0x1f,0xe5,0x84,0x6d,0x5e,0x02,0x99,0xd1,0x1d,0xeb,
    0x68,0xaf,0x3f,0x04,0xcf,0xe9,0x6a,0x44,0xbb,0x1f,0xf1,0x00,0x39,0xf4,0x2b,0x17,
    0xe5,0x44,0x8c,0xc8,0x9a,0x24,0xa5,0xc4,0xde,0xaa,0xdc,0x1d,0x4b,0x90,0xa5,0x0d,
    0xf3,0xc8,0x72,0x86,0xf9,0x64,0x67,0x0c,0x9b,0x21,0x3b,0x67,0x58,0x92,0xac,0x62,
    0x58,0x8a,0xec,0x92,0x61,0x01,0xd9,0x65,0xc3,0xd2,0x64,0x57,0x0d,0xcb,0x90,0xad,
    0x18,0x36,0x4b,0xb6,0x1a,0x69,0xf5,0x4f,0x7a,0x86,0xee,0x06,0x75,0x7f,0x2d,0xc4,
    0xe7,0x75,0xfd,0xbe,0x48,0xcd,0xee,0x7c,0x81,0xba,0x0b,0x1a,0xe5,0x45,0x67,0x3f,
    0xd2,0x87,0xef,0xa2,0xfa,0xa4,0xd8,0x3f,0x7c,0xca,0x7a,0x0e,0xa8,0x01,0xf6,0x92,
    0x7a,0x66,0x69,0x87,0x6d,0x4e,0xf7,0x2c,0x67,0x51,0xd1,0xff,0x79,0xc6,0x81,0xdf,
    0xe0,0x39,0x67,0x72,0xe5,0xe9,0xef,0x6a,0x15,0x99,0x0b,0xbf,0xf3,0x6a,0x71,0xb3,
    0xc9,0x73,0xa5,0xcc,0xca,0x72,0x2f,0x9a,0x85,0x9a,0x65,0xce,0xa9,0xc4,0x9a,0x65,
    0xde,0x13,0xd8,0x15,0xea,0x59,0x60,0x0d,0xf8,0x9f,0xa5,0x2d,0x30,0xf6,0x45,0xce,
    0x1f,0xf6,0x0a,0xed,0xc8,0x7f,0x5a,0x3b,0xad,0xd2,0xaf,0xc8,0x3b,0x14,0x13,0xb7,
    0xf4,0x5f,0x9d,0x1a,0xef,0x07,0x79,0xea,0x7c,0x37,0x29,0xf6,0x55,0xe7,0x5b,0xf5,
    0xa3,0x7e,0x32,0x7a,0x1f,0x71,0x8d,0x84,0xfc,0xfb,0x25,0xcc,0x19,0x39,0xd6,0x4e,
    0xee,0x2e,0xce,0x81,0xf3,0x3a,0x19,0xe6,0xd9,0x64,0x0e,0xcc,0xff,0xba,0xbe,0x0f,
    0x8f,0xdf,0xc2,0x3a,0x3f,0x95,0xe0,0x4d,0xde,0xe4,0x5d,0xb5,0x78,0x1f,0x1b,0xaa,
    0x1e,0xf3,0xdd,0x24,0x6b,0x99,0xfa,0x43,0xde,0xf9,0x16,0xed,0x77,0x34,0x03,0x66,
    0xb6,0xcd,0xb9,0x2e,0x30,0x1f,0x7c,0x76,0xc8,0x3f,0xab,0x0f,0xce,0x4f,0x19,0xb7,
    0xc3,0x38,0xcc,0xf2,0x19,0xe3,0x16,0x19,0x87,0x7e,0x9f,0x93,0x7f,0x53,0x1f,0xcc,
    0xf7,0x05,0x19,0xe6,0xfb,0x43,0x3b,0x6f,0xb3,0x9f,0xdf,0xea,0x0f,0xdb,0xae,0xae,
    0x36,0xf5,0xe0,0xfb,0x91,0xc6,0x61,0xae,0x21,0x6b,0xe2,0xf7,0x89,0x77,0xf0,0x92,
    0xfc,0xb1,0x9e,0xd0,0xd3,0x1b,0x32,0xe7,0xf7,0x4b,0x73,0xb8,0x5c,0xd8,0xbf,0xab,
    0x17,0xfc,0xde,0xd3,0x27,0xc9,0x98,0x5d,0xa3,0x61,0x9f,0x1a,0x96,0x8c,0x86,0x0e,
    0xb9,0xd3,0xd0,0x25,0x73,0x1a,0x06,0x46,0x03,0x6c,0x3d,0x5d,0x03,0xd6,0xed,0x19,
    0x0d,0x07,0xac,0x9d,0x30,0x1a,0xfa,0xe4,0x4e,0xc3,0x3b,0x32,0xe7,0x07,0x0d,0x2e,
    0xd7,0xc0,0x68,0x38,0xa6,0x4f,0x9b,0x31,0x3d,0xa3,0xe1,0x90,0x1a,0x6a,0x46,0xc3,
    0x11,0xb9,0xd3,0x30,0x24,0x73,0x1a,0xc6,0x46,0x03,0x6c,0x23,0x5d,0x63,0xd6,0x1d,
    0xf1,0x1d,0xa1,0xee,0x6b,0xd6,0x3e,0x36,0xef,0x17,0x3d,0x3a,0xdf,0xb1,0xe9,0xf1,
    0x03,0xfd,0x06,0x8c,0x1b,0xb1,0x1f,0xbc,0xf1,0x7b,0x7c,0xdf,0xa1,0x7a,0xe2,0x6d,
    0xdf,0x27,0x43,0xcc,0x6d,0xbe,0x3d,0xcc,0x0d,0xbd,0x3f,0xa0,0x5d,0x22,0x7b,0x3c,
    0xb7,0x0d,0xf2,0x5b,0xda,0x7b,0x83,0xe7,0x3f,0xda,0x51,0x4d,0xd7,0x5f,0x58,0x8f,
    0x8f,0xad,0xac,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(set = 0, binding = 1)uniform utexture2DMS stencil;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragStencilRefARB = int(texelFetch(stencil, srcImageCoords, 0). x);
//
// }
