// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000D.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000D[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xfb,0x4b,0x54,0x41,
    0x14,0xc7,0x67,0xef,0xdd,0x97,0xf6,0x58,0xa3,0x76,0x35,0x8d,0xb0,0xcc,0xe8,0x85,
    0x08,0x5a,0x04,0x91,0xd0,0x4f,0x05,0xae,0x99,0xae,0x86,0x99,0x3d,0xcc,0xb5,0x34,
    0xc8,0x1e,0x4a,0x49,0x0f,0x2b,0xcc,0xa4,0xd8,0x4a,0xda,0x1f,0x82,0xb2,0xfe,0x81,
    0xfe,0xbe,0xe8,0x01,0x41,0xe7,0xcc,0xfd,0x4c,0x1c,0xf6,0xc2,0xec,0xdc,0xf3,0x99,
    0xf3,0xfa,0xde,0x99,0xd9,0x38,0xea,0xca,0x39,0x97,0x72,0xcd,0x2e,0xef,0xbe,0xb9,
    0xe4,0xd9,0xe1,0x22,0x21,0xce,0x6d,0x71,0x59,0x3f,0x9f,0x2d,0x57,0xca,0x3d,0x8b,
    0x4b,0xd5,0x9e,0xfe,0xe3,0xbd,0xba,0xbe,0xdd,0xc5,0xde,0x4f,0xd7,0x0a,0x2e,0xe7,
    0xd2,0x32,0xeb,0xb8,0x33,0x3d,0xbf,0xe0,0x3c,0x73,0xae,0x2c,0xa3,0x45,0xfc,0x94,
    0xe7,0xcc,0xfb,0x56,0xcd,0x27,0x6f,0x05,0x9f,0x3f,0xf1,0x3d,0xe7,0x32,0xae,0x95,
    0xda,0x5d,0xcc,0x81,0xa5,0x60,0x79,0xc3,0x22,0x58,0x8b,0x61,0x31,0xac,0xcd,0xb0,
    0x34,0x6c,0x8f,0x61,0x19,0x58,0xa7,0x61,0x59,0xd8,0x01,0xc3,0x72,0xb0,0x43,0x86,
    0xe5,0x61,0xc7,0x0c,0x6b,0x82,0xf5,0x1a,0xd6,0x0c,0xeb,0xf7,0x5a,0xe3,0xff,0x3d,
    0xab,0xee,0x32,0xba,0x4b,0xd8,0xc3,0x32,0xef,0x47,0x73,0xb0,0xf7,0x19,0xbb,0xd2,
    0xb0,0x5e,0x61,0x5d,0xf3,0xed,0x94,0xdf,0xc8,0xdb,0xb1,0xd7,0x1f,0xf9,0xbc,0xb1,
    0xd7,0xa3,0xfa,0x5a,0xc5,0x3f,0x87,0xbe,0x08,0x7b,0x1b,0x76,0xda,0xfb,0xa4,0x65,
    0x2f,0x93,0x6f,0xac,0xfc,0x14,0x76,0x01,0x56,0x14,0xbb,0x48,0xae,0x60,0x97,0xb0,
    0xf5,0xd9,0x2b,0x51,0xe1,0x5b,0x85,0x51,0x34,0x23,0xcb,0x5c,0x32,0x43,0x6b,0xb6,
    0xf1,0xdd,0x5a,0xa9,0xa9,0xf6,0x6e,0xd8,0x51,0x6a,0xb6,0x53,0x53,0xfd,0x3b,0x58,
    0xcb,0x99,0xf5,0xd0,0x43,0xb0,0xbb,0xd9,0x1f,0xf5,0x3f,0x88,0xbf,0xd6,0xdb,0x25,
    0xca,0x0f,0xe3,0xa7,0xf6,0x91,0x86,0xb8,0xbe,0x86,0xba,0x03,0xec,0x9f,0xe6,0x19,
    0xe4,0x5c,0x65,0xe9,0x73,0x90,0x73,0x1d,0xfb,0x7e,0x9b,0xdc,0x10,0x6b,0x29,0x72,
    0x36,0xce,0x9a,0xe3,0x3c,0xef,0x43,0xe4,0x50,0x7b,0x18,0xd6,0x2e,0xbd,0x8d,0xe0,
    0x37,0x0a,0x1b,0xc1,0x4f,0xed,0x0a,0xac,0x43,0x2a,0x8e,0x93,0x23,0xf4,0x39,0xc1,
    0x9e,0x06,0x7b,0xca,0xec,0xe9,0x15,0x34,0x15,0xd9,0xf3,0x69,0xfa,0x8c,0x8d,0xff,
    0x2c,0xf6,0x09,0x39,0xb3,0x11,0xb1,0x0e,0xf6,0x4b,0x88,0xde,0x93,0xd3,0x9c,0x97,
    0x05,0xce,0xc4,0x88,0x50,0xcd,0x73,0x0f,0xe6,0x0c,0xbb,0x0f,0x53,0xed,0x17,0x84,
    0xe9,0x5e,0x3d,0xc0,0x57,0xd7,0xce,0x08,0xd3,0x7d,0x5c,0x64,0xaf,0xdb,0xc9,0xaf,
    0x7e,0x4b,0xf0,0x35,0xe2,0x1e,0x12,0xbb,0x64,0xe2,0x1e,0x11,0xd7,0x69,0xe2,0x96,
    0xe1,0xab,0xc4,0x3d,0x26,0x76,0x99,0x38,0x3d,0x07,0x4f,0x88,0xeb,0x26,0x4e,0xcf,
    0xc0,0x53,0xf8,0x77,0xf1,0xd1,0xb3,0xf1,0x0c,0xa6,0x67,0xe3,0xa7,0x7c,0x81,0x55,
    0xb4,0xfd,0x11,0x7f,0x5d,0x5b,0xf1,0x35,0x92,0xef,0xb2,0x62,0x34,0xbf,0xa0,0xa6,
    0x3e,0xcf,0xc5,0x57,0xd9,0x4b,0xf8,0xa8,0x58,0xda,0xd3,0x27,0x58,0xf0,0xfb,0x2d,
    0x39,0x42,0x2e,0x9d,0x7f,0x88,0x97,0xfa,0x7d,0xc1,0x27,0x43,0xcc,0x8a,0xd1,0xf0,
    0x0a,0x0d,0x7d,0x46,0xc3,0x1a,0x3c,0x68,0x78,0x0d,0x0b,0x1a,0x6a,0x46,0x83,0xae,
    0xad,0xcb,0xa8,0x51,0x77,0xdd,0x68,0x78,0x43,0xed,0x94,0xd1,0xf0,0x16,0x1e,0x34,
    0x7c,0x86,0x05,0x3f,0xd5,0x10,0x72,0xd5,0x8c,0x86,0x4d,0x7c,0x56,0x89,0x59,0x37,
    0x1a,0xde,0xa1,0x61,0xc0,0x68,0x78,0x0f,0x0f,0x1a,0x3e,0xc0,0x82,0x86,0xba,0xd1,
    0xa0,0x6b,0x1b,0x32,0xea,0xd4,0xdd,0xf0,0xf7,0x28,0xa9,0xfb,0x91,0xda,0x9b,0xe6,
    0xee,0x69,0x8f,0xc1,0xb7,0x6e,0x7a,0xfc,0x8a,0x5f,0x8d,0xb8,0x0d,0xfa,0x19,0xf2,
    0xe7,0x36,0xb9,0x9b,0x6a,0xeb,0x3d,0x1c,0xe3,0x0e,0x5e,0x94,0xfe,0xc6,0xfd,0x9c,
    0xf8,0x8c,0x99,0x73,0x79,0x09,0x5d,0x13,0xe6,0x5c,0x4e,0xc2,0xc3,0x79,0xbe,0x4c,
    0xdd,0x49,0xe2,0xf4,0x7e,0x5e,0x25,0x6e,0x8a,0x38,0xbd,0x93,0xd7,0xe0,0x77,0xd9,
    0x87,0xeb,0xb0,0xb0,0x57,0x37,0xc8,0x65,0xef,0xdd,0x0c,0x2c,0xb9,0x77,0x59,0x7f,
    0xd7,0xab,0xf8,0xce,0x90,0x23,0xd4,0xbc,0x49,0xcd,0x59,0x53,0xf3,0x16,0x3c,0xd4,
    0x9c,0x83,0x4d,0x48,0xe7,0x7a,0xf7,0xe7,0xd1,0x5d,0xe5,0xff,0x66,0xce,0xd4,0xbe,
    0xcd,0xba,0xf3,0xfb,0x1a,0xfb,0xff,0x46,0x65,0x7f,0xa5,0x9b,0x93,0x32,0xfe,0x01,
    0xd1,0xf0,0xb6,0x4b,0x5c,0x08,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform texture2DArray depth;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragDepth = textureLod(sampler2DArray(depth, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer), params . srcMip). x;
//
// }
