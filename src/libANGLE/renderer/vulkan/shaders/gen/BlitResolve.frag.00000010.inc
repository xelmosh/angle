// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000010.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000010[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x93,0x6b,0x4b,0x54,0x51,
    0x14,0x86,0xf7,0x5c,0x9c,0x19,0x8d,0xd2,0xb0,0x19,0x4d,0x23,0x2c,0x33,0xba,0x21,
    0x82,0x16,0x41,0x34,0xd0,0x87,0x28,0x70,0xcc,0xcb,0xa8,0x4c,0x6a,0x8d,0x93,0x0a,
    0x5a,0x3a,0xda,0x38,0xd5,0x50,0x99,0x89,0x35,0x95,0xe4,0x87,0x20,0xad,0xff,0xd0,
    0xef,0x8b,0x2e,0x10,0xb4,0xd6,0x39,0xcf,0x8e,0x95,0x07,0xf6,0x39,0x67,0x3d,0x7b,
    0xdd,0xde,0x7d,0x89,0x45,0xbb,0x93,0xce,0x45,0x5c,0x93,0x4b,0xb9,0xaf,0x2e,0x7c,
    0x8e,0xba,0xa8,0x90,0xf0,0xbb,0xd7,0xea,0x64,0xae,0xd1,0xe5,0x47,0x26,0x8b,0x37,
    0x0b,0xe3,0xc5,0xf5,0xc5,0xd2,0xfc,0x42,0xa5,0xb8,0x5e,0x5d,0x28,0xcf,0x2d,0x2d,
    0x17,0x17,0x6a,0x6b,0xab,0x95,0xaa,0xf8,0x1e,0x72,0x89,0x20,0xe6,0x56,0x2e,0x9f,
    0xeb,0x5d,0xaf,0xce,0xf7,0x0e,0x5c,0xee,0xd3,0x5c,0x47,0x5c,0x2c,0xc8,0xa9,0x73,
    0xcd,0x2e,0xe9,0xe2,0xf2,0xd5,0xb1,0x52,0x5a,0x2a,0xbb,0x80,0x39,0x97,0x93,0xd1,
    0x22,0x7e,0xca,0x93,0x9a,0x43,0xfe,0x9a,0x83,0x9c,0xe1,0xfc,0x6d,0xd7,0xe0,0xda,
    0xe8,0xad,0x9b,0xaf,0x67,0x11,0x58,0xca,0xb0,0x28,0xac,0xc5,0xb0,0x18,0xac,0xdd,
    0xb0,0x38,0xec,0x84,0x61,0x0d,0xb0,0x2e,0xc3,0x12,0xb0,0x33,0x86,0x25,0x61,0xe7,
    0x0c,0x4b,0xc1,0x2e,0x19,0xd6,0x08,0xeb,0x33,0xac,0x09,0x36,0x10,0x68,0x8d,0xfd,
    0xeb,0x59,0x75,0xe7,0xd0,0xbd,0xdf,0x1a,0xda,0xc3,0xf2,0x7f,0x1a,0xcd,0xde,0x3e,
    0x85,0x6e,0xb5,0xf3,0x07,0xe6,0xf3,0xcc,0x6b,0xbe,0x56,0x79,0x47,0x03,0x3b,0x16,
    0xe8,0xd7,0xff,0x8c,0xfc,0x25,0xd0,0xd7,0x26,0xfe,0x49,0xf4,0x45,0xb1,0x0f,0x63,
    0xc7,0x03,0x9f,0xb8,0xec,0x5f,0x58,0x4b,0xf9,0x35,0xec,0x66,0x58,0x5a,0xec,0x34,
    0xb9,0xbc,0x9d,0xc1,0xd6,0xe7,0xa4,0x44,0xf9,0xb5,0xf2,0x23,0x6d,0x46,0x82,0x6f,
    0xc6,0x0c,0xad,0xd9,0xce,0xba,0xb5,0x51,0x53,0xed,0xe3,0xb0,0x8b,0xd4,0xec,0xa0,
    0xa6,0xfa,0x77,0x32,0x97,0x34,0xf3,0xbe,0x07,0x6f,0xf7,0xb0,0x3f,0xea,0x7f,0x16,
    0x7f,0xad,0x77,0x4c,0x94,0x9f,0xc7,0x4f,0xed,0x0b,0x07,0xe2,0xfa,0x0f,0xd4,0xcd,
    0xb2,0x7f,0x9a,0x67,0x90,0x73,0x95,0xa6,0xcf,0x41,0xce,0x72,0x2c,0xe8,0xb7,0xd1,
    0x0d,0x51,0x23,0xe2,0xfe,0x7f,0xbc,0xad,0x39,0xee,0xf0,0x3f,0x44,0x0e,0xb5,0x87,
    0x61,0x1d,0xd2,0xdb,0x28,0x7e,0x63,0xb0,0x51,0xfc,0xd4,0xce,0xc3,0x3a,0xa5,0xe2,
    0x04,0x39,0x7c,0x9f,0x05,0xf6,0xd4,0xdb,0x33,0xf4,0xa5,0xb9,0xee,0xa1,0x29,0xcd,
    0x9e,0x97,0xe8,0x53,0xf7,0xfc,0x8a,0x9c,0xd1,0x28,0xff,0x8e,0x98,0x9f,0x42,0xf4,
    0x5e,0x5c,0xe7,0x7c,0x2c,0x72,0x06,0x46,0x85,0xea,0x1e,0x3e,0x84,0x39,0xc3,0x1e,
    0xc1,0x54,0xeb,0x88,0x30,0xdd,0x9b,0x65,0x7c,0x75,0xee,0x86,0x30,0xdd,0xb7,0x15,
    0xf6,0xb6,0x83,0xfc,0xea,0x57,0x86,0xbf,0x25,0x6e,0x8d,0xd8,0xb2,0x89,0x7b,0x4c,
    0x5c,0x97,0x89,0xab,0xc0,0xb7,0x89,0xab,0x12,0x5b,0x21,0x4e,0xf7,0xfd,0x09,0x71,
    0x3d,0xc4,0xa9,0xee,0xa7,0xf0,0x6f,0xe2,0xa3,0x67,0xe1,0x19,0x4c,0xcf,0xc2,0x0f,
    0x59,0x81,0x0d,0xb4,0xfd,0x16,0x7f,0x9d,0xab,0xc9,0xd8,0x60,0x5d,0x6a,0x46,0xf3,
    0x73,0x6a,0xea,0xb3,0x29,0xbe,0xca,0x5e,0xc0,0xc7,0xc4,0xd2,0x9e,0x3e,0xc1,0xbc,
    0xdf,0x2f,0xc9,0xe1,0x73,0xe9,0xf7,0xbb,0x78,0xa9,0xdf,0x1e,0x3e,0x0d,0xc4,0xd4,
    0x8c,0x86,0x57,0x68,0xe8,0x37,0x1a,0x36,0xe1,0x5e,0xc3,0x6b,0x98,0xd7,0x50,0x37,
    0x1a,0x74,0x6e,0x4b,0x46,0x9d,0xba,0x5b,0x46,0xc3,0x36,0xb5,0x23,0x46,0xc3,0x1b,
    0xb8,0xd7,0xf0,0x19,0xe6,0xfd,0x54,0x83,0xcf,0x55,0x37,0x1a,0xf6,0xf1,0xd9,0x20,
    0x66,0xcb,0x68,0x78,0x87,0x86,0xac,0xd1,0xf0,0x1e,0xee,0x35,0x7c,0x80,0x79,0x0d,
    0xbb,0x46,0x83,0xce,0xed,0xc8,0xd8,0xa5,0xee,0x4e,0x70,0x6f,0xc2,0xba,0x1f,0xa9,
    0xbd,0x6f,0xee,0x9a,0xf6,0xe8,0x7d,0x77,0x4d,0x8f,0x5f,0xf0,0xab,0x13,0xb7,0x43,
    0x3f,0x43,0xc1,0xb9,0x0d,0xef,0xa2,0xda,0x7a,0xef,0xc6,0xb9,0x73,0x93,0xd2,0xdf,
    0x44,0xf0,0x0d,0x7d,0xc6,0xcd,0xb9,0xbc,0x8b,0xae,0x82,0x39,0x97,0x53,0x70,0x7f,
    0x9e,0xa7,0xa9,0x3b,0x45,0x9c,0xde,0xc7,0xfb,0xc4,0xcd,0x10,0xa7,0x77,0xb3,0x08,
    0x5f,0x65,0x1f,0x66,0x61,0x05,0xc9,0xa2,0x77,0xf6,0x01,0x3d,0x4c,0x73,0xd7,0x67,
    0xd9,0x47,0x5d,0xcb,0x39,0xe6,0xf5,0x79,0x49,0xbe,0x79,0x78,0x56,0xd6,0x32,0x87,
    0xfd,0x47,0x56,0xe8,0xaa,0x8c,0xbf,0xd0,0xcc,0x9b,0x6d,0x08,0x08,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(set = 0, binding = 1)uniform utexture2D stencil;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragStencilRefARB = int(textureLod(usampler2D(stencil, blitSampler), srcImageCoords * params . invSrcExtent, params . srcMip). x);
//
// }
