// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x5f,0x68,0x97,0x65,
    0x14,0xc7,0x9f,0xf7,0xf7,0x77,0x6d,0x6b,0x69,0x6b,0x9b,0xb1,0xcd,0xcd,0x6c,0xd1,
    0x1f,0x11,0x41,0x8b,0x20,0x12,0xbb,0x2a,0xc3,0x11,0xcd,0x0b,0x6f,0x06,0x19,0xb4,
    0x8b,0x2e,0x66,0x48,0xb1,0x0b,0x2f,0x9a,0xe4,0xcd,0x2e,0x24,0xd8,0x4d,0xa8,0x17,
    0x96,0x66,0x20,0x15,0x69,0x99,0x77,0x56,0xd2,0x1f,0x2b,0x56,0x8d,0x62,0xda,0x68,
    0xd0,0x1f,0x19,0x94,0x0c,0x4a,0x06,0xce,0x16,0x29,0x9d,0xef,0xfb,0x7e,0xce,0x3a,
    0xfc,0x7e,0x70,0xf6,0xbe,0xe7,0xfb,0x3d,0xcf,0xf9,0x9e,0xf3,0x3c,0xe7,0x79,0x57,
    0x2e,0xad,0xaf,0xa7,0x94,0xa5,0xe6,0xd4,0x94,0xd6,0x65,0x29,0xff,0xad,0x4e,0xa5,
    0xa4,0xd7,0x96,0x54,0xcb,0x9f,0x8f,0xef,0xd8,0xb9,0x63,0xe3,0x8b,0x2f,0x3d,0xb7,
    0x71,0xcb,0x83,0x9b,0xc4,0xb7,0xa5,0x72,0x1e,0x27,0xee,0x36,0xf3,0x2a,0xf6,0x94,
    0x8d,0x3e,0xfb,0xfc,0x1e,0xe1,0x9d,0x66,0x3b,0xcd,0x86,0xcd,0x46,0x84,0x9b,0x8d,
    0x99,0x8d,0x9b,0x4d,0x98,0x4d,0x9a,0xad,0xb2,0x1c,0x5a,0x53,0x57,0x7e,0x7b,0xeb,
    0xcc,0xf5,0x94,0x2f,0xa5,0x27,0x52,0x35,0xf5,0x14,0xa5,0xa4,0xf5,0x3c,0x1d,0xcb,
    0xc0,0x9a,0x02,0x56,0x02,0x5b,0x15,0xb0,0x32,0xd8,0x9a,0x80,0x55,0xc0,0x7a,0x02,
    0x56,0x05,0xeb,0x0f,0x58,0x0d,0xec,0xee,0x80,0xd5,0xc1,0xee,0x0d,0x58,0x13,0xd8,
    0x86,0x80,0xdd,0x02,0xb6,0x29,0x60,0xcd,0x60,0x5b,0xf2,0x5e,0xcb,0x2b,0x35,0xab,
    0x6f,0xed,0xd3,0x5a,0x7a,0x94,0x3f,0x8c,0x9f,0xe1,0x8f,0xe0,0x7b,0xfc,0x28,0x7e,
    0x19,0x7f,0x0c,0xbf,0x82,0x3f,0x8e,0x5f,0xc5,0x9f,0xc0,0xaf,0xe1,0x4f,0xe2,0xfb,
    0xbe,0x9f,0xb0,0xe7,0x5d,0x41,0x5f,0xfe,0x3a,0xfc,0x76,0x53,0x2d,0xe5,0x7e,0x39,
    0xd7,0xd3,0x7b,0x87,0xc5,0xd4,0xd8,0x2f,0xd5,0xd8,0x65,0x7e,0x9d,0xfc,0x25,0xfc,
    0x16,0xfc,0x4a,0x3e,0x0b,0x65,0xcb,0x53,0xc4,0x8b,0xbb,0x23,0xcf,0x5b,0x70,0xfd,
    0xf6,0xb7,0x83,0x3c,0xc2,0x1f,0xc1,0xef,0x0c,0xb9,0xbb,0x88,0x77,0xed,0x6e,0x72,
    0xa5,0xbc,0x8f,0x5b,0x57,0xce,0xa6,0x0b,0xab,0x05,0x6b,0xe7,0xd9,0x1d,0x4c,0x9a,
    0xbd,0x9c,0x53,0x0f,0x9a,0xbd,0xec,0x89,0xb0,0x07,0xe8,0xaf,0x0f,0x0d,0xc5,0xf7,
    0xc3,0xd5,0x03,0x3f,0xc0,0xf9,0x8b,0xbf,0x07,0xbe,0x3b,0xef,0xa3,0x94,0xee,0x23,
    0x4e,0xfe,0xfd,0xe4,0xf1,0x75,0x9b,0x1b,0x74,0xb6,0x32,0x1f,0xee,0x6f,0x47,0x47,
    0x79,0x9f,0x24,0xb6,0x16,0xf8,0x41,0xf6,0x46,0xfc,0x10,0x73,0xd0,0x42,0x1f,0x43,
    0xdc,0xbb,0x72,0x88,0xdf,0xc5,0xde,0x39,0x3f,0xdc,0xc0,0xef,0xe6,0x2c,0x9c,0x1f,
    0x81,0x77,0x7f,0xb4,0x21,0x7e,0x2f,0xf7,0xcc,0xf9,0xb1,0x06,0x7e,0x1f,0xe7,0xe3,
    0xfc,0x78,0x03,0x7f,0xc0,0x6c,0x5b,0xe0,0x27,0x1a,0xf8,0x83,0x66,0xfb,0x03,0x3f,
    0x09,0xbf,0xc1,0x76,0x45,0x7d,0xbe,0xc6,0xd9,0x44,0xf3,0xb5,0x47,0x99,0xfb,0x3b,
    0x6d,0xd7,0x8e,0xb3,0x6f,0x7c,0xd2,0x56,0xbe,0x57,0x59,0x38,0xd7,0x37,0x79,0x3f,
    0x8e,0x9e,0xfc,0x13,0x0d,0xe7,0x75,0x8a,0x3c,0x8a,0x3f,0xcd,0x79,0x68,0xae,0x1e,
    0x32,0xa5,0x12,0x7b,0x97,0xa8,0xf1,0x6f,0x43,0xa4,0xff,0x28,0x73,0x7e,0x8e,0x59,
    0x7e,0xca,0x6a,0xd7,0x6c,0x7e,0x04,0x76,0x2e,0xd4,0xb3,0x87,0xfb,0xf3,0x31,0xfc,
    0x63,0x96,0x41,0xfb,0xf7,0x09,0x33,0xd9,0x47,0x3e,0xc5,0x9c,0x07,0x7f,0xc5,0x62,
    0xe4,0x7f,0xca,0xba,0xf3,0xac,0xd3,0x1c,0x7e,0xc6,0xba,0x01,0xd6,0x69,0x06,0x3f,
    0x07,0x7f,0xc7,0x62,0x34,0x9b,0x5f,0x80,0x69,0x36,0xaf,0x5b,0xe5,0x53,0xd4,0xf3,
    0x8f,0xc5,0x8b,0xbb,0x60,0x36,0x45,0x3f,0x7a,0x7f,0xda,0xd6,0x69,0x0f,0xbe,0x42,
    0x53,0xbf,0x97,0xd9,0x9f,0xaf,0xc1,0x87,0xcc,0x53,0x4d,0x6b,0xb2,0x02,0xf3,0xb8,
    0x65,0xcb,0xe1,0xb9,0xf4,0xbc,0x66,0x51,0x8a,0xeb,0xc9,0x8a,0x98,0x2a,0x6b,0x2e,
    0x84,0x1e,0xbe,0xa1,0x87,0xcd,0xa1,0x87,0x6f,0xc1,0xbd,0x87,0xef,0xc0,0xbc,0x87,
    0x99,0xd0,0x83,0xb8,0x69,0xb3,0x19,0x74,0xa7,0x43,0x0f,0xdf,0xa3,0x9d,0x85,0x1e,
    0x7e,0x00,0xf7,0x1e,0xba,0xb3,0x02,0xf3,0x38,0xf5,0xe0,0xb9,0x66,0x42,0x0f,0xbd,
    0x59,0x11,0x33,0xc5,0x9a,0xe9,0xd0,0xc3,0x45,0x7a,0xd8,0x1a,0x7a,0xb8,0x04,0xee,
    0x3d,0xfc,0x08,0xe6,0x3d,0xcc,0x85,0x1e,0xc4,0xcd,0x9a,0xcd,0xa1,0x3b,0xcb,0x1c,
    0x49,0xf7,0x27,0xb4,0x7b,0xb3,0xff,0xe7,0x59,0x35,0x7a,0xec,0x5c,0xa8,0x71,0x2d,
    0x71,0x33,0xac,0x9b,0x25,0xf6,0x10,0xb1,0x87,0x88,0xd5,0xdd,0xea,0xcf,0x8a,0xfb,
    0xa5,0xf5,0x6f,0x9b,0x1d,0x86,0xcb,0xbf,0x87,0x59,0x31,0x8b,0xe2,0xde,0x85,0x53,
    0xaf,0xfa,0x46,0xbd,0x4e,0xaf,0x47,0xe9,0x55,0xf1,0x6f,0x80,0xbf,0x4f,0xaf,0xc7,
    0xc8,0x21,0x7c,0xc9,0x62,0x8e,0x90,0xc3,0xfb,0x3d,0x86,0x7f,0x84,0xba,0x0e,0x93,
    0x4b,0x77,0xf3,0x2d,0xee,0xe5,0x33,0xd4,0x79,0x12,0x4c,0xbd,0x6d,0x23,0xef,0x7e,
    0xd3,0x69,0xa1,0x6e,0xf5,0x71,0x32,0x15,0x58,0x8d,0x7a,0x15,0x33,0xd8,0xd0,0xbb,
    0xb4,0x5e,0xe0,0xae,0xbe,0xc7,0x3a,0xf5,0x74,0x3a,0xaf,0xbb,0xe8,0xe9,0x14,0x75,
    0xe8,0xce,0x7f,0x00,0xfe,0xaa,0xc5,0x68,0xcd,0x19,0xd6,0x09,0x6f,0x35,0x25,0x61,
    0x1f,0x86,0xef,0xcc,0x19,0xee,0xb7,0xea,0x3a,0x0b,0xe7,0x7b,0xf6,0x33,0xf9,0xb7,
    0x87,0x3d,0xfb,0x05,0xfc,0x4b,0xea,0xfe,0x15,0x6c,0x30,0xcc,0xcc,0x6f,0xe0,0x7d,
    0xcc,0xcc,0x7c,0xd8,0x43,0x71,0x97,0xcd,0xe6,0xe9,0xef,0x72,0x3e,0x7f,0xe5,0xfc,
    0x7f,0xc2,0x59,0x7a,0x77,0x6e,0x3e,0xe8,0xfc,0x8e,0xce,0xae,0xa0,0xf3,0x07,0xb8,
    0xeb,0x2c,0x04,0x1d,0x71,0x57,0xcc,0x16,0xc8,0x75,0x05,0x9d,0xe1,0xa0,0xe3,0xdc,
    0x42,0xd0,0xf9,0x13,0x9d,0xdd,0x41,0xe7,0x2f,0x70,0xd7,0x59,0x0c,0x3a,0xe2,0xae,
    0x9a,0x2d,0x92,0xeb,0x2a,0x3a,0x23,0x41,0xc7,0xb9,0xc5,0xa0,0x73,0x0d,0x9d,0x81,
    0xa0,0xb3,0x04,0xee,0x3a,0xcb,0x41,0x67,0x29,0xc7,0x52,0x8e,0x29,0xd7,0x75,0x74,
    0x46,0x83,0x8e,0x73,0xcb,0x41,0xe7,0x5f,0x74,0xf6,0x06,0x9d,0x1b,0xe0,0xae,0xe3,
    0x17,0x54,0x3a,0xe2,0x6e,0xf2,0xe1,0x57,0xae,0x9b,0xe8,0x8c,0x05,0x1d,0xe7,0xf4,
    0x74,0x9d,0x72,0x56,0xe8,0xec,0x0b,0x3a,0x95,0xac,0xc0,0x5d,0xa7,0x1e,0x74,0xc4,
    0x55,0xcd,0xea,0xe4,0xd2,0xbb,0x74,0xc6,0x83,0x8e,0x73,0xf5,0xa0,0xd3,0x8c,0xce,
    0x81,0xa0,0xd3,0x92,0x15,0xb8,0xeb,0xb4,0x05,0x1d,0x71,0xad,0x66,0x6d,0xe4,0x6a,
    0x45,0x67,0x22,0xe8,0x38,0xd7,0x16,0x74,0x56,0xa3,0x73,0x30,0xe8,0xdc,0x9e,0x15,
    0xb8,0xeb,0x74,0x04,0x1d,0x71,0xed,0x66,0x1d,0xe4,0x6a,0x47,0x67,0x32,0xe8,0x38,
    0xa7,0xe7,0x0d,0xdb,0xbc,0x87,0xcd,0xfe,0x03,0xd4,0xba,0x0e,0x01,0xdc,0x0c,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DMS color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(ivec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//             ivec4 colorValue = ivec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue = ivec4(round(colorValue * params . invSamples));
//
//     broadcastColor(colorValue);
//
// }
