// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000008.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000008[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x5f,0x68,0xd6,0x65,
    0x14,0xc7,0x9f,0xe7,0xfd,0xbd,0xef,0xde,0xb9,0xf7,0x2d,0x37,0xa6,0xf3,0xcf,0xde,
    0xd9,0xcc,0x18,0xc1,0xc4,0xbc,0xb0,0x50,0xc2,0x30,0x10,0xea,0x42,0xd0,0x0a,0x72,
    0x17,0xbb,0x79,0x41,0x2f,0x1a,0x54,0xb0,0xc2,0x9b,0x5d,0x28,0xb8,0xc0,0x9b,0x5d,
    0x78,0xb3,0x1b,0x35,0x9b,0x45,0x6a,0xda,0x5d,0xf4,0x47,0x4a,0xfa,0x33,0x92,0x55,
    0xa3,0x98,0x36,0x1a,0xd8,0x1f,0x06,0x25,0x03,0x93,0x41,0xca,0xca,0x74,0x78,0xce,
    0xf3,0xfb,0x9c,0xed,0xf0,0x0e,0xce,0x7e,0xef,0xf9,0x7e,0xcf,0x39,0xdf,0xe7,0x9c,
    0xdf,0x79,0x7e,0x59,0x61,0x53,0x39,0x84,0x18,0x5a,0x42,0x73,0xe8,0x8a,0x21,0xfd,
    0xb5,0x85,0x42,0xd0,0x9f,0x95,0xd0,0x94,0x9e,0xcf,0xed,0x79,0x69,0xcf,0x96,0x37,
    0xde,0x3c,0xb0,0x65,0xdb,0x93,0x5b,0x95,0x7f,0x38,0x64,0x29,0x4e,0xb9,0x95,0xe2,
    0x15,0xe5,0xa9,0xf6,0x6a,0xfd,0x95,0xd7,0x14,0xef,0x10,0xeb,0x13,0xab,0x8b,0x0d,
    0x88,0x0d,0x8a,0x0d,0x89,0x0d,0x8b,0x8d,0x88,0x8d,0x8a,0xb5,0x4a,0x0d,0xcd,0x29,
    0x6b,0x7d,0xf9,0xd5,0x91,0xf4,0xb4,0x5e,0x08,0xcf,0x87,0x52,0xe8,0xca,0x8f,0x12,
    0x36,0xf1,0x34,0x2c,0x82,0x35,0x3b,0xac,0x00,0xd6,0xea,0xb0,0x0c,0x6c,0xad,0xc3,
    0x8a,0x60,0x35,0x87,0x95,0xc0,0xba,0x1d,0xd6,0x04,0xf6,0x98,0xc3,0xca,0x60,0x8f,
    0x3b,0xac,0x19,0x6c,0xb3,0xc3,0x56,0x80,0x6d,0x75,0x58,0x0b,0xd8,0xb6,0xd4,0x6b,
    0xb6,0x74,0x66,0xed,0x5b,0xe7,0xb4,0x81,0x1e,0xd5,0xaf,0xe3,0x47,0xfc,0x01,0x7c,
    0x8b,0x1f,0xc4,0xcf,0xf0,0x87,0xf0,0x8b,0xf8,0xc3,0xf8,0x25,0xfc,0x11,0xfc,0x26,
    0xfc,0x51,0x7c,0x9b,0xfb,0x29,0x79,0x3e,0xea,0xf4,0xd5,0xdf,0xe8,0xfc,0xb1,0x06,
    0x7e,0x0c,0x5e,0xcf,0xd3,0x2e,0xff,0x0b,0xc9,0xcf,0xd2,0x79,0x0a,0xe9,0xdd,0x67,
    0x49,0x4b,0xe7,0xb9,0x46,0xe2,0xcb,0x68,0x2b,0xb7,0x5a,0xfc,0x0a,0x5c,0x80,0xaf,
    0xf2,0xde,0x8b,0xf8,0xab,0x88,0x2f,0xa6,0xb8,0xa2,0xe4,0xe4,0xb3,0x50,0xfc,0x69,
    0xfc,0x0e,0x30,0xad,0x57,0xa3,0x5e,0x4c,0x7d,0x3d,0xb4,0xf4,0xae,0xcc,0x6a,0xce,
    0x9a,0x78,0x56,0x9c,0xa9,0xc6,0x06,0xde,0x5b,0x17,0x1a,0xea,0x3f,0x02,0xd6,0xdb,
    0xa0,0xa1,0xf1,0x1b,0xe1,0xca,0x8e,0xef,0xa1,0x27,0xf3,0x7b,0xd9,0x0f,0x8d,0xdf,
    0x4c,0x7c,0x25,0xf5,0x51,0x08,0x4f,0x10,0x57,0x61,0x4f,0x7c,0xde,0x8e,0x06,0xdd,
    0xdd,0xec,0x8f,0xf9,0x7b,0xd1,0xd5,0xba,0xfb,0x88,0xad,0xe1,0xef,0x67,0x2f,0xaa,
    0xf4,0xb1,0x9f,0x7b,0x98,0xb9,0xfc,0x7e,0xde,0x85,0xf1,0xf5,0x06,0xfe,0x20,0xb3,
    0x37,0x7e,0x00,0xde,0xfc,0xc1,0x86,0xf8,0x43,0xdc,0x3b,0xe3,0x87,0x1a,0xf8,0xc3,
    0xcc,0xce,0xf8,0xe1,0x06,0xfe,0x98,0xd8,0x2e,0xc7,0x8f,0x34,0xf0,0xc7,0xc5,0x8e,
    0x38,0x7e,0x14,0x7e,0x9d,0x74,0x7e,0x82,0x99,0xf2,0xd9,0x5a,0xfa,0x33,0x5f,0x67,
    0x72,0x92,0xdf,0x27,0xa8,0xa1,0xfe,0x29,0xb0,0xf5,0x32,0x89,0xd3,0xc4,0xbd,0x03,
    0x76,0x9a,0x38,0xf5,0xc7,0xc0,0x3a,0x45,0xf1,0x5d,0x6a,0xd8,0xb9,0xce,0x73,0x8e,
    0xa7,0xe4,0xa6,0x15,0x98,0x59,0x00,0xfb,0x57,0x10,0xbd,0x7f,0x3b,0xd9,0xe7,0x8f,
    0xd8,0xd9,0x17,0x04,0xd5,0x1d,0xfc,0x18,0x2c,0x38,0xec,0x13,0x30,0x3d,0xfb,0x3e,
    0xc1,0xf4,0x1d,0x7f,0x4a,0xac,0x72,0xcf,0x0a,0xa6,0x7b,0xf7,0x19,0xbb,0xd9,0x4d,
    0x7d,0x8d,0xbb,0x04,0xfe,0x16,0x79,0x9f,0x93,0x7b,0xc9,0xe5,0x7d,0x41,0x5e,0x8f,
    0xcb,0xbb,0x0c,0x7e,0x94,0xbc,0x2f,0xc9,0xbd,0x4c,0x9e,0xee,0xed,0x57,0xe4,0xf5,
    0x92,0xa7,0xf3,0xfe,0x1a,0xfc,0x82,0xc4,0xe8,0x2e,0x7f,0x03,0xa6,0xbb,0xbc,0x20,
    0x13,0x98,0xa0,0xb7,0xbb,0x12,0xaf,0xdc,0xb8,0xd8,0x04,0x73,0x19,0x77,0x3d,0x7f,
    0x8b,0x66,0x48,0x7b,0x52,0x4c,0xd8,0x15,0xf0,0x17,0xc5,0xd3,0x33,0x75,0xc4,0x1c,
    0xb3,0xb8,0xff,0xa4,0x86,0xd5,0xd2,0xe7,0x1d,0x89,0xd2,0xb8,0xf5,0x31,0x8f,0x29,
    0x91,0x33,0xee,0x7a,0xf8,0x8e,0x1e,0x76,0xb8,0x1e,0xbe,0x07,0xb7,0x1e,0x7e,0x00,
    0xb3,0x1e,0xa6,0x5c,0x0f,0xca,0x4d,0x8a,0x4d,0xa1,0x3b,0xe9,0x7a,0xf8,0x11,0xed,
    0xe8,0x7a,0xf8,0x09,0xdc,0x7a,0x58,0x17,0x73,0xcc,0xe2,0xb4,0x07,0xab,0x35,0xe5,
    0x7a,0xe8,0x8c,0x79,0xcc,0x04,0x39,0x93,0xae,0x87,0xab,0xf4,0xb0,0xdb,0xf5,0x70,
    0x0d,0xdc,0x7a,0xf8,0x19,0xcc,0x7a,0x98,0x71,0x3d,0x28,0x37,0x2d,0x36,0x83,0xee,
    0x74,0xfa,0x96,0xe4,0xba,0xbf,0xa0,0xdd,0x19,0x97,0xef,0x8e,0x9e,0xd1,0x62,0x67,
    0xdc,0x19,0x6b,0xc4,0x4d,0x91,0x37,0xcd,0x79,0xf4,0x6e,0xbc,0xcd,0xdd,0x52,0x5f,
    0xef,0xd1,0x19,0xee,0xd0,0xcb,0x72,0x3e,0xbd,0x3f,0xef,0x11,0x73,0xc6,0xed,0xe5,
    0xfb,0xf4,0xd5,0xef,0xf6,0xf2,0x2c,0xb8,0xed,0xf3,0x39,0x74,0xcf,0x92,0xa7,0xdf,
    0xbd,0x0f,0xc8,0x3b,0x4f,0x5e,0x2d,0xcd,0x21,0xc7,0x5f,0xe7,0x3d,0x5c,0x04,0xeb,
    0x93,0x2a,0xfa,0x4d,0xfc,0x90,0x33,0x9c,0xe3,0x1b,0x78,0xd1,0xd5,0xbb,0x4e,0xbd,
    0xbd,0xae,0xde,0xaf,0xe0,0x57,0x24,0x46,0xfd,0xdf,0xc0,0xba,0xdd,0xcc,0x7f,0x07,
    0xef,0x61,0xe6,0xb3,0x6e,0xe6,0xca,0xfd,0x21,0x36,0xcb,0x1c,0xf5,0xf7,0x33,0x12,
    0xd3,0xc7,0x59,0x74,0xc6,0xc6,0xcd,0x3a,0x9d,0x3f,0xd1,0xe9,0x77,0x3a,0x7f,0x81,
    0x9b,0xce,0x9c,0xd3,0x51,0xee,0x86,0xd8,0x1c,0xb5,0x6e,0xa0,0x53,0x77,0x3a,0xc6,
    0xcd,0x39,0x9d,0x9b,0xe8,0x1c,0x74,0x3a,0x7f,0x83,0x9b,0xce,0xbc,0xd3,0x51,0xee,
    0x96,0xd8,0x3c,0xb5,0x6e,0xa1,0x33,0xe0,0x74,0x8c,0x9b,0x77,0x3a,0xff,0xa0,0xd3,
    0xeb,0x74,0x6e,0x83,0x9b,0xce,0x82,0xd3,0xb9,0x9d,0xf6,0x2d,0x24,0x4c,0x6b,0xdd,
    0x41,0x67,0xd0,0xe9,0x18,0xb7,0xe0,0x74,0xee,0xa2,0x73,0xc8,0xe9,0xfc,0x0f,0x6e,
    0x3a,0x8b,0x4e,0x47,0xb9,0x7b,0x62,0x8b,0xd4,0xba,0x87,0xce,0x90,0xd3,0x31,0x6e,
    0xd1,0xe9,0xc4,0x98,0xeb,0x1c,0x76,0x3a,0x85,0x98,0xe3,0xa6,0x53,0x8a,0xcb,0x3a,
    0xca,0x65,0x62,0x8a,0x69,0x2d,0xfd,0xad,0x3a,0xc3,0x4e,0xc7,0xb8,0x52,0x5c,0xd6,
    0x69,0x46,0xe7,0x98,0xd3,0x59,0x11,0x73,0xdc,0x74,0xaa,0x4e,0x47,0xb9,0x16,0xb1,
    0x2a,0xb5,0x5a,0xd0,0x19,0x71,0x3a,0xc6,0x55,0x9d,0xce,0x4a,0x74,0x8e,0x3b,0x9d,
    0xd6,0x98,0xe3,0xa6,0xd3,0xee,0x74,0x94,0x6b,0x13,0x6b,0xa7,0x56,0x1b,0x3a,0xa3,
    0x4e,0xc7,0x38,0x7d,0xde,0x97,0xaf,0xca,0x76,0xb1,0x07,0x9c,0x82,0x63,0xd8,0x6c,
    0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform utexture2D color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(uvec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//             uvec4 colorValue = textureLod(usampler2D(color, blitSampler), srcImageCoords * params . invSrcExtent, params . srcMip);
//
//     broadcastColor(colorValue);
//
// }
