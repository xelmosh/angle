// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x4f,0x68,0x5c,0x55,
    0x14,0xc6,0xef,0x9b,0x99,0xcc,0x24,0x1d,0x6c,0x63,0x4d,0xb5,0x9d,0x49,0x4d,0xb5,
    0x06,0x24,0x95,0xd8,0x45,0x95,0x80,0x28,0x4a,0x17,0xba,0x28,0xad,0x7f,0x20,0x15,
    0xb2,0x89,0x90,0xcd,0x2c,0x54,0x82,0x76,0x93,0x85,0x0a,0x83,0x74,0x93,0x45,0x37,
    0xd9,0xd4,0x5a,0x53,0xc5,0xb6,0x1a,0x77,0xe2,0x9f,0xa2,0xc5,0x3f,0x41,0x8d,0x1a,
    0x94,0xa8,0xc5,0x80,0x55,0x09,0x68,0x09,0x68,0x09,0x68,0x8d,0xb6,0x25,0xe0,0xf9,
    0xde,0xfc,0x4e,0x7a,0x98,0x81,0x93,0xfb,0xce,0xf7,0x9d,0x73,0xbe,0x7b,0xce,0xbb,
    0xf7,0xa5,0x58,0xd8,0x59,0x49,0x29,0x4b,0x1b,0x52,0x67,0xea,0xcd,0x52,0xfe,0xbb,
    0x3e,0x15,0x92,0x1e,0xab,0xa9,0x9c,0xaf,0x0f,0xee,0x7b,0x6c,0xdf,0xe0,0x33,0xcf,
    0x8e,0x0d,0xee,0xb9,0x6b,0xb7,0xf8,0x8d,0xa9,0x98,0xc7,0x89,0xdb,0x64,0x5e,0xc9,
    0x56,0xd9,0x93,0x4f,0x34,0x9e,0x12,0xde,0x63,0x76,0xd0,0x6c,0xd4,0xac,0x61,0x36,
    0x6e,0x36,0x61,0xd6,0x34,0x9b,0x34,0x9b,0x32,0xeb,0xb6,0x1a,0xca,0xa9,0xa8,0xbe,
    0x3d,0xf5,0xe4,0x7a,0xaa,0x97,0xd2,0x43,0xa9,0x23,0xf5,0xb6,0xb6,0x92,0x76,0xb2,
    0x3a,0x96,0x81,0x75,0x06,0xac,0x00,0xd6,0x1d,0xb0,0x22,0xd8,0xd6,0x80,0x95,0xc0,
    0x7a,0x03,0xd6,0x01,0xb6,0x23,0x60,0x65,0xb0,0xdb,0x02,0x56,0x01,0xbb,0x3d,0x60,
    0x9d,0x60,0x77,0x04,0xac,0x0b,0x6c,0x77,0xc0,0x36,0x80,0xed,0xc9,0x7b,0x2d,0xae,
    0xef,0x59,0x7d,0x6b,0x4e,0x37,0xd3,0xa3,0xfc,0x51,0xfc,0x0c,0xbf,0x81,0xef,0xf1,
    0xe3,0xf8,0x45,0xfc,0x09,0xfc,0x12,0x7e,0x13,0xbf,0x03,0x7f,0x12,0xbf,0x8c,0x3f,
    0x85,0xef,0x73,0x3f,0x66,0xeb,0xad,0x41,0x5f,0xfe,0x2d,0xc1,0x9f,0x6e,0xe3,0xa7,
    0xe1,0xb5,0x9f,0x1b,0xec,0x6f,0x21,0xf7,0x8b,0xf9,0x7e,0xf4,0x7c,0xa3,0x3d,0x95,
    0x99,0xe7,0x4d,0x16,0x5f,0x41,0xbb,0x80,0x5f,0xc5,0x2f,0xe5,0x31,0x25,0xab,0x91,
    0x38,0x6b,0x29,0xdd,0x83,0xdf,0x03,0xb6,0xc5,0xfc,0x1a,0xb5,0xdc,0xaf,0xe3,0xa7,
    0xbc,0x8f,0xeb,0xd6,0xdf,0x8d,0x5b,0x2d,0x58,0x99,0xb5,0x1e,0x4c,0x9a,0xdb,0x79,
    0x4f,0xbd,0x68,0x6e,0x67,0x26,0xc2,0x76,0xa1,0xd9,0x87,0xa6,0xe2,0x77,0xc0,0x55,
    0x02,0xdf,0xcf,0x1e,0xdc,0x1f,0xe0,0x3c,0x28,0x7e,0x17,0xf1,0xf5,0xbc,0x97,0x42,
    0x1a,0x24,0x4e,0xfe,0x9d,0x6d,0x79,0x43,0x6d,0xba,0x7b,0x39,0x2f,0xee,0xef,0x47,
    0x57,0x75,0x0f,0x10,0x5b,0xc3,0x1f,0xe6,0x1c,0xf8,0xec,0x86,0xb9,0x77,0xc5,0x90,
    0x3f,0xc2,0xec,0x9d,0x1f,0x6d,0xe3,0xc7,0x78,0x17,0xce,0x37,0xe0,0xdd,0x1f,0x6f,
    0x8b,0x3f,0xc4,0x3d,0x73,0x7e,0xa2,0x8d,0x7f,0x8e,0xf7,0xe3,0x7c,0xb3,0x8d,0x3f,
    0x6c,0x76,0x7f,0xe0,0x27,0xdb,0xf8,0x23,0x66,0x2f,0x04,0x7e,0x0a,0x7e,0x9b,0x75,
    0x7e,0x94,0x77,0xca,0x67,0x6a,0xfd,0xe7,0xbe,0x66,0xf2,0x12,0xcf,0x47,0xa9,0x21,
    0xff,0x18,0x58,0xcd,0x26,0x71,0x9c,0xb8,0x57,0xc0,0x8e,0x13,0x27,0x7f,0x1a,0xac,
    0x6e,0x8a,0xaf,0x52,0xc3,0xf7,0x75,0x9a,0x7d,0xdc,0x6d,0x37,0xab,0xc0,0xcc,0x12,
    0xd8,0x7f,0x86,0xe8,0xbe,0xdd,0xcb,0xf9,0x7e,0x9b,0x33,0xfc,0x88,0xa1,0xda,0xef,
    0x3b,0x60,0x29,0x60,0xef,0x82,0x69,0xef,0x0f,0x1b,0xa6,0x77,0xfc,0x1e,0xb1,0xe2,
    0x1e,0x30,0x4c,0x73,0x7c,0x9f,0xb3,0xd9,0x47,0x7d,0xc5,0x9d,0x01,0x7f,0x91,0xbc,
    0x0f,0xc8,0x3d,0x13,0xf2,0x3e,0x24,0xaf,0x3f,0xe4,0x9d,0x05,0x6f,0x92,0xf7,0x11,
    0xb9,0x67,0xc9,0xd3,0xb9,0xfd,0x98,0xbc,0x01,0xf2,0x74,0x66,0x3f,0x01,0x9f,0xb1,
    0x18,0x9d,0xe5,0x4f,0xc1,0x74,0x96,0xff,0xb5,0x09,0xcc,0xd1,0xdb,0x15,0x8b,0x17,
    0x37,0x6b,0x36,0xc7,0x5c,0x66,0x43,0xcf,0x9f,0xa1,0xa9,0xdf,0xf3,0x16,0x2b,0xec,
    0x73,0xf0,0x47,0xcd,0xd3,0x9e,0xb6,0x64,0x2d,0xcc,0xe3,0x2e,0x5b,0x0d,0xaf,0xa5,
    0xf5,0x1f,0x8b,0x52,0xdc,0xb6,0xac,0x15,0xd3,0x41,0xce,0x6c,0xe8,0xe1,0x4b,0x7a,
    0x18,0x0a,0x3d,0x7c,0x05,0xee,0x3d,0x7c,0x0d,0xe6,0x3d,0x2c,0x84,0x1e,0xc4,0xcd,
    0x9b,0x2d,0xa0,0x3b,0x1f,0x7a,0xf8,0x06,0xed,0x2c,0xf4,0xf0,0x2d,0xb8,0xf7,0xb0,
    0x35,0x6b,0x61,0x1e,0xa7,0x1e,0xbc,0xd6,0x42,0xe8,0xa1,0x96,0xb5,0x62,0xe6,0xc8,
    0x99,0x0f,0x3d,0x7c,0x47,0x0f,0x7b,0x43,0x0f,0xdf,0x83,0x7b,0x0f,0x3f,0x80,0x79,
    0x0f,0x8b,0xa1,0x07,0x71,0xe7,0xcc,0x16,0xd1,0xd5,0xf3,0x01,0x74,0x7f,0x44,0xbb,
    0x96,0x5d,0xbb,0x3b,0xda,0xa3,0xc7,0x2e,0x86,0x3d,0xd6,0x89,0x5b,0x20,0xef,0x1c,
    0xfb,0xd1,0xdd,0x78,0x99,0xbb,0x25,0x5f,0xf7,0xe8,0x04,0x77,0x68,0xd8,0xf6,0xa7,
    0xfb,0xf3,0x1a,0x31,0x27,0xc2,0xb9,0x7c,0x9d,0xbe,0x46,0xc2,0xb9,0x3c,0x09,0xee,
    0xe7,0xf9,0x14,0xba,0x27,0xc9,0xd3,0x77,0xef,0x0d,0xf2,0x4e,0x93,0xa7,0x3b,0xf9,
    0x26,0xf8,0xd3,0xbc,0x87,0x19,0xb0,0xc7,0xad,0x8a,0xee,0xe1,0x5b,0xec,0xe1,0x14,
    0xdf,0xc0,0x99,0x50,0xef,0x27,0xea,0xed,0x0f,0xf5,0xce,0x83,0x7f,0x61,0x31,0xf2,
    0x7f,0x06,0xeb,0x0b,0x33,0xff,0x05,0xbc,0x9f,0x99,0x2f,0x85,0x99,0x8b,0xfb,0xd5,
    0x6c,0x89,0x39,0xea,0xf9,0x3e,0x8b,0x39,0xc8,0x5e,0x34,0x63,0xe7,0x96,0x82,0xce,
    0x6f,0xe8,0x8c,0x04,0x9d,0xdf,0xc1,0x5d,0x67,0x39,0xe8,0x88,0xbb,0x60,0xb6,0x4c,
    0xad,0x0b,0xe8,0x8c,0x06,0x1d,0xe7,0x96,0x83,0xce,0x1f,0xe8,0x8c,0x05,0x9d,0x3f,
    0xc1,0x5d,0x67,0x25,0xe8,0x88,0xbb,0x68,0xb6,0x42,0xad,0x8b,0xe8,0x34,0x82,0x8e,
    0x73,0x2b,0x41,0xe7,0x2f,0x74,0x06,0x82,0xce,0xdf,0xe0,0xae,0xb3,0x1a,0x74,0xc4,
    0x5d,0x32,0x5b,0xa5,0xd6,0x25,0x74,0xc6,0x83,0x8e,0x73,0xab,0x41,0xe7,0x32,0x3a,
    0x87,0x82,0xce,0x15,0x70,0xd7,0x59,0x0b,0x3a,0xe2,0xae,0x9a,0xad,0x51,0xeb,0x2a,
    0x3a,0x13,0x41,0xc7,0xb9,0xb5,0xa0,0xa3,0x4b,0x72,0x9e,0xff,0x6d,0xae,0x93,0x65,
    0x2d,0xdc,0x75,0x4a,0xd9,0x35,0x1d,0x71,0x05,0x33,0x61,0xaa,0xa5,0x67,0xe9,0x34,
    0x83,0x8e,0x73,0x5a,0x5d,0xa7,0x82,0xce,0xe1,0xa0,0xd3,0x99,0xb5,0x70,0xd7,0xa9,
    0x06,0x1d,0x71,0x5d,0x66,0x55,0x6a,0x75,0xa1,0x33,0x19,0x74,0x9c,0xab,0x06,0x9d,
    0x8d,0xe8,0x1c,0x09,0x3a,0x9b,0xb2,0x16,0xee,0x3a,0x9b,0x83,0x8e,0xb8,0x6e,0xb3,
    0xcd,0xd4,0xea,0x46,0x67,0x2a,0xe8,0x38,0xa7,0x75,0xcd,0x06,0x33,0x64,0xf6,0x3f,
    0x95,0x73,0xe7,0x94,0x5c,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform texture2D color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(vec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//             vec4 colorValue = textureLod(sampler2D(color, blitSampler), srcImageCoords * params . invSrcExtent, params . srcMip);
//
//     broadcastColor(colorValue);
//
// }
