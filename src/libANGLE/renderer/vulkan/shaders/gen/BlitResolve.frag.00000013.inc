// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000013.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000013[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x53,0x6b,0x6f,0x12,0x41,
    0x14,0x1d,0xd8,0xb2,0x0b,0x35,0xb4,0x10,0x04,0xac,0x31,0x16,0xc5,0x0f,0x26,0xda,
    0xa6,0x1f,0xaa,0x21,0x31,0x1a,0xfd,0x00,0xb6,0x06,0x95,0xd2,0x87,0x26,0x55,0x37,
    0x58,0x88,0x2d,0x16,0xac,0x5d,0x14,0x25,0xc6,0x44,0xab,0x3f,0x41,0xff,0x84,0xbf,
    0xcf,0xf8,0x48,0x4c,0xbc,0x67,0xf6,0x4c,0x73,0x53,0x92,0x61,0x66,0xce,0x3d,0xf7,
    0x71,0xee,0x9d,0xf5,0x92,0xd5,0xc0,0x98,0x84,0x99,0x36,0x69,0xf3,0xd5,0xc4,0xbf,
    0xbc,0x49,0x0a,0x12,0xef,0xdf,0x0a,0x46,0x6c,0x19,0xb3,0xde,0xda,0x0a,0xeb,0x8f,
    0x37,0xc2,0x68,0xb7,0xd3,0xed,0x1d,0x86,0xd1,0xa8,0x37,0xdc,0xd9,0xdb,0x0f,0x7b,
    0xef,0x0e,0x5e,0x1d,0x8e,0x84,0x7b,0xca,0xf8,0xd6,0xe7,0x6e,0x73,0xbd,0xb9,0x18,
    0x8d,0xba,0x8b,0xcb,0xd7,0x96,0x10,0x6b,0xc6,0x78,0x36,0x26,0x6c,0xb3,0x26,0x30,
    0x53,0xb2,0x63,0x0d,0x3a,0x7b,0x43,0xe0,0x39,0x59,0x0d,0xbb,0x7b,0x16,0x0f,0x10,
    0x43,0x4e,0x39,0x1b,0x13,0x3e,0xc6,0xac,0x98,0x94,0x29,0xb1,0xb6,0x2a,0x77,0x87,
    0x25,0x88,0xa5,0x15,0x96,0x24,0x96,0x53,0x98,0x47,0xec,0x8c,0xc2,0xa6,0x88,0x9d,
    0x53,0x58,0x8a,0x58,0x45,0x61,0x3e,0xb1,0x4b,0x0a,0x0b,0x88,0x5d,0x56,0x58,0x9a,
    0xd8,0x55,0x85,0x65,0x88,0x2d,0x29,0x6c,0x9a,0xd8,0xb2,0xd5,0xea,0x1d,0xd7,0x0c,
    0xdd,0x0d,0xea,0xfe,0x5e,0x88,0xef,0xab,0x72,0xbe,0x48,0xcd,0xee,0x7e,0x81,0xba,
    0x0b,0xe2,0x95,0xb4,0x77,0xcf,0xea,0xc3,0xb9,0x28,0x1c,0x9f,0xf5,0x83,0x53,0x96,
    0x7b,0x40,0x0d,0xb0,0x97,0x84,0x99,0xa5,0x1d,0xb6,0x19,0xd9,0xb3,0xec,0x45,0x45,
    0xfe,0x67,0xe9,0x07,0xfc,0x06,0xef,0x39,0x15,0x2b,0x4f,0xbe,0xcb,0x55,0x64,0x2c,
    0xfc,0xce,0x8b,0xc5,0xf5,0x26,0xcf,0xe5,0xab,0x95,0xe5,0x5e,0x54,0x0b,0x39,0xcb,
    0xec,0x53,0x89,0x39,0xcb,0x9c,0x13,0xb0,0x2b,0xd4,0x33,0xc7,0x1c,0xe0,0x9f,0xa5,
    0x2d,0x50,0xf6,0x79,0xf6,0x1f,0xf6,0x0a,0xed,0x88,0x7f,0x5a,0x2a,0xad,0x92,0x57,
    0xe4,0x0c,0x8d,0xf2,0x5b,0x38,0x91,0xa7,0xc6,0xf9,0x20,0x4e,0x9d,0xef,0xc6,0x67,
    0x5d,0x75,0xbe,0x55,0xcf,0xd6,0x93,0x91,0x79,0xc4,0x39,0x12,0x8c,0x99,0x50,0xcb,
    0xd5,0xba,0x72,0x3c,0xbb,0x38,0x06,0xee,0xab,0x27,0x6a,0x68,0xaa,0xfe,0xdf,0x67,
    0x3d,0x3e,0xfb,0xdd,0xe2,0xd9,0xe3,0x7d,0x83,0x39,0xc1,0xbf,0x2e,0xef,0x29,0xc9,
    0xb3,0x21,0xe7,0xb7,0x20,0x78,0xc3,0x37,0x39,0xdb,0x6d,0xce,0xef,0xa1,0x74,0x0b,
    0xf3,0x78,0x42,0x6c,0x5b,0xd5,0x3c,0xe4,0x1b,0x79,0x4a,0xfb,0x1d,0x89,0x80,0x1e,
    0x3f,0xe3,0x1c,0xe6,0x18,0x0f,0x9c,0x90,0xf8,0x67,0xe1,0xe0,0xde,0xa1,0x5f,0x48,
    0x3f,0xf4,0xfe,0x39,0xfd,0xe6,0xe9,0x87,0x7a,0x77,0x88,0xff,0x10,0x0e,0xe6,0xd1,
    0x25,0x86,0x79,0xfc,0x92,0xca,0xfb,0xac,0xe7,0xaf,0xf0,0x61,0xeb,0xc9,0xea,0x53,
    0x0f,0xce,0x6b,0xe2,0x87,0x3e,0xbc,0x60,0x4e,0xfc,0x3e,0xb2,0x7f,0xbb,0xc4,0xdb,
    0x72,0x0b,0x2c,0x1e,0x63,0x8e,0xf7,0x47,0x62,0xb8,0x58,0xd8,0x7f,0x0a,0x2b,0xb0,
    0x1a,0x62,0x4e,0x8a,0x3e,0x3d,0xa5,0xe1,0x25,0x35,0x2c,0x28,0x0d,0xfb,0xc4,0x9d,
    0x86,0x01,0x31,0xa7,0x21,0x52,0x1a,0x06,0xb6,0xaf,0xc6,0x62,0xc8,0x3b,0x54,0x1a,
    0x0e,0x98,0x3b,0xa1,0x34,0xbc,0x26,0xee,0x34,0x7c,0x22,0xe6,0x78,0xd0,0xe0,0x62,
    0x45,0x4a,0xc3,0x11,0x39,0x7d,0xfa,0x0c,0x95,0x86,0x11,0x35,0xd4,0x94,0x86,0x37,
    0xc4,0x9d,0x86,0xb7,0xc4,0x9c,0x86,0x89,0xd2,0x00,0xdb,0x58,0xd6,0x84,0x79,0xc7,
    0x7c,0x47,0xc8,0xfb,0x9e,0xb9,0x8f,0xd4,0x7b,0x47,0x8d,0x8e,0x3b,0x51,0x35,0x7e,
    0x21,0x2f,0xa2,0xdf,0x98,0xf5,0xe0,0x9b,0xb8,0xc7,0xef,0x01,0x35,0xe3,0xed,0x3f,
    0x60,0xcd,0x4d,0x72,0x7c,0x9b,0x33,0xc6,0x5d,0xff,0xd6,0x18,0xd3,0x28,0xac,0x4d,
    0x0c,0xb5,0xb4,0x04,0xc1,0x77,0xb3,0x4e,0x6e,0x9b,0x31,0x42,0xa9,0x06,0xdf,0xcf,
    0x26,0xf3,0xc2,0x7e,0x9b,0xef,0x1b,0x71,0xd0,0x9f,0x2d,0xda,0xf1,0xfb,0xc0,0xfc,
    0x8f,0x88,0xdf,0x92,0xfe,0x34,0x78,0xff,0x27,0x99,0x6a,0xb2,0xfe,0x03,0xe0,0x23,
    0x39,0x7d,0x40,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(set = 0, binding = 1)uniform utexture2DMSArray stencil;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragStencilRefARB = int(texelFetch(stencil, ivec3(srcImageCoords, params . srcLayer), 0). x);
//
// }
