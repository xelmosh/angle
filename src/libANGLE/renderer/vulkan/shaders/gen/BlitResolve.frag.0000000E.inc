// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000E.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000E[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x93,0x5b,0x6b,0x53,0x41,
    0x14,0x46,0x27,0xe7,0x34,0x39,0x69,0x35,0x6d,0x82,0x26,0xb1,0x22,0x36,0x1a,0x1f,
    0x04,0x6d,0xe9,0x43,0x95,0x80,0x28,0xfa,0xd0,0xd8,0x4a,0x44,0xda,0x5a,0xbc,0x04,
    0x35,0xd5,0xa0,0x44,0x4d,0x0d,0x58,0xd0,0x2a,0xf8,0xe0,0xdf,0xf1,0xf7,0x89,0x17,
    0x10,0xdc,0xdf,0xc9,0x9a,0xba,0xf1,0xc0,0x74,0x32,0x6b,0x5f,0xbf,0x3d,0xd3,0x34,
    0x69,0x67,0x21,0x14,0xc2,0x5c,0x28,0x87,0xcf,0x61,0xfa,0xd5,0x42,0x62,0x24,0x84,
    0x63,0xa1,0x94,0xef,0xb7,0x7b,0x3b,0xbd,0x95,0xf7,0x07,0xc3,0x95,0xb5,0x2b,0xab,
    0xb2,0xcf,0x87,0x34,0xf7,0x93,0x6d,0x21,0x64,0x61,0xc6,0x76,0xad,0xf1,0xde,0x68,
    0x5f,0xbc,0x6a,0xab,0x9b,0xef,0x69,0xce,0x33,0xf7,0xfb,0xb8,0xf2,0xd9,0xaf,0x6a,
    0x9e,0x5f,0xf1,0x21,0x6c,0x84,0x62,0x68,0x50,0xbb,0xcd,0x1e,0x59,0x01,0x56,0x76,
    0x2c,0x81,0x55,0x1d,0x4b,0x61,0xa7,0x1c,0x9b,0x81,0x9d,0x71,0xac,0x08,0x6b,0x39,
    0x56,0x82,0x5d,0x70,0x2c,0x83,0x5d,0x74,0xac,0x0c,0xbb,0xec,0xd8,0x2c,0x6c,0xd5,
    0xb1,0x39,0xd8,0x5a,0xae,0x35,0x3d,0xea,0x59,0xba,0xbb,0xe8,0x6e,0x70,0xde,0xb4,
    0xfd,0x3c,0x9a,0xe3,0xf9,0x1c,0xe7,0x13,0x16,0x95,0xe4,0xe7,0x34,0xd7,0xa7,0xdf,
    0x75,0xf3,0x29,0xd1,0xbf,0x66,0xd3,0xb4,0x73,0x86,0x86,0x24,0xcf,0x9b,0x86,0x0a,
    0x76,0xd9,0xe6,0x6d,0xaf,0x30,0x8b,0x96,0xfd,0x5d,0x20,0x4e,0xfc,0x1a,0xe7,0xaa,
    0xcb,0x55,0xc3,0x3f,0xd6,0xaa,0x93,0x4b,0xdf,0x59,0xb3,0xc4,0xd9,0xd4,0x58,0x25,
    0xb7,0x2a,0xec,0x75,0xb7,0x54,0xb3,0xc9,0x9c,0x1a,0xd4,0x6c,0x72,0x4f,0x62,0x97,
    0xd0,0xb3,0x48,0x0d,0xf9,0x9f,0xc6,0x96,0x39,0xfb,0x12,0xf3,0x97,0xbd,0x85,0x5d,
    0xf9,0x4f,0x5a,0xa7,0x6d,0xfc,0xea,0xdc,0x61,0x70,0x71,0xcb,0xff,0xd5,0xe9,0x70,
    0x3f,0xca,0xb3,0xce,0xbb,0xa9,0xd0,0xd7,0x3a,0xef,0x36,0xcd,0xfb,0x99,0xb5,0xfb,
    0x98,0xda,0x0a,0xe1,0xdf,0x57,0x70,0x67,0xe5,0xd8,0x38,0xba,0xbb,0x69,0x0e,0x9d,
    0x37,0x61,0x57,0xed,0x3d,0x24,0xcc,0x3e,0x90,0xf7,0xa7,0x11,0xbd,0xc1,0xeb,0xdc,
    0xcd,0x16,0xf3,0xbf,0x67,0x6a,0x35,0xcf,0x6d,0xd8,0x96,0xab,0xb7,0xcf,0x1d,0xef,
    0x60,0xbf,0x65,0x19,0x34,0xa3,0xfb,0xcc,0x71,0x91,0x7c,0xf2,0xd9,0x85,0x7f,0x35,
    0x1f,0x9d,0x1f,0x10,0xb7,0x4b,0x9c,0x66,0xf7,0x90,0xb8,0x25,0xe2,0x34,0xb7,0x47,
    0xf0,0x6f,0xe6,0xa3,0x79,0x3e,0x86,0x69,0x9e,0x3f,0xac,0xf3,0x01,0xfd,0xfc,0x36,
    0x7f,0xd9,0xfa,0xb6,0x06,0xe8,0xe9,0xe7,0xfd,0x16,0xf3,0xf9,0x3e,0xa1,0xa6,0xbe,
    0x2f,0xcc,0xfc,0x29,0x7c,0xdb,0x4e,0xea,0xe9,0x00,0x16,0xfd,0x7e,0x59,0x8e,0x98,
    0x4b,0xfb,0x77,0xf3,0x92,0xdf,0x47,0x7c,0x8a,0xc4,0xf4,0x9d,0x86,0x3d,0x34,0x2c,
    0x3b,0x0d,0xcf,0xe1,0x51,0xc3,0x0b,0x58,0xd4,0x30,0x72,0x1a,0x64,0x1b,0xda,0x1a,
    0x51,0x77,0xe8,0x34,0xbc,0xa4,0x76,0xc1,0x69,0x78,0x05,0x8f,0x1a,0x3e,0xc0,0xa2,
    0x9f,0x34,0xc4,0x5c,0x23,0xa7,0xe1,0x10,0x9f,0x01,0x31,0x43,0xa7,0xe1,0x35,0x1a,
    0x3a,0x4e,0xc3,0x1b,0x78,0xd4,0xf0,0x16,0x16,0x35,0x4c,0x9c,0x06,0xd9,0xc6,0xb6,
    0x26,0xd4,0x1d,0xf3,0x8e,0x54,0xf7,0x1d,0xb5,0x0f,0xdd,0x7b,0x55,0x8f,0xd1,0x77,
    0xe2,0x7a,0xfc,0x84,0xdf,0x88,0xb8,0x31,0xfd,0xe8,0x4d,0xdf,0xe1,0x3d,0x3f,0x33,
    0x4f,0xbd,0xd7,0x1e,0x4c,0x31,0x37,0x79,0x7b,0x9a,0x9b,0xfe,0x4f,0xee,0x62,0xd7,
    0x77,0xc3,0x7a,0xed,0xc2,0xfe,0x58,0x07,0x1d,0x5b,0x7f,0x01,0x02,0x9b,0x31,0x90,
    0x6c,0x06,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DMS depth;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragDepth = texelFetch(depth, srcImageCoords, 0). x;
//
// }
