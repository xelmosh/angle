// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x5f,0x68,0xd6,0x65,
    0x14,0xc7,0x9f,0xe7,0xfd,0xbd,0xef,0xde,0xb9,0xf7,0x2d,0x37,0xa6,0xf3,0xcf,0xde,
    0xd9,0xcc,0x18,0xc1,0xc4,0xbc,0xb0,0x50,0xc2,0x30,0x10,0xea,0x42,0xd0,0x0a,0x72,
    0x17,0xbb,0x79,0x41,0x2f,0x1a,0x54,0xb0,0xc2,0x9b,0x5d,0x28,0xb8,0xc0,0x9b,0x5d,
    0x78,0xb3,0x1b,0x35,0x9b,0x45,0x6a,0xda,0x5d,0xf4,0x47,0x4a,0xfa,0x33,0x92,0x55,
    0xa3,0x98,0x36,0x1a,0xd8,0x1f,0x06,0x25,0x03,0x93,0x41,0xca,0xca,0x74,0x78,0xce,
    0xf3,0xfb,0x9c,0xed,0xf0,0x0e,0xce,0x7e,0xef,0xf9,0x7e,0xcf,0x39,0xdf,0x73,0x9e,
    0xdf,0x79,0x7e,0x59,0x61,0x53,0x39,0x84,0x18,0x5a,0x42,0x73,0xe8,0x8a,0x21,0xfd,
    0xb5,0x85,0x42,0xd0,0x9f,0x95,0xd0,0x94,0x9e,0xcf,0xed,0x79,0x69,0xcf,0x96,0x37,
    0xde,0x3c,0xb0,0x65,0xdb,0x93,0x5b,0x95,0x7f,0x38,0x64,0x29,0x4e,0xb9,0x95,0xe2,
    0x15,0xe5,0xa9,0xf6,0x6a,0xfd,0x95,0xd7,0x14,0xef,0x10,0xeb,0x13,0xab,0x8b,0x0d,
    0x88,0x0d,0x8a,0x0d,0x89,0x0d,0x8b,0x8d,0x88,0x8d,0x8a,0xb5,0x4a,0x0d,0xcd,0x29,
    0x6b,0x7d,0xf9,0xd5,0x91,0xf4,0xb4,0x5e,0x08,0xcf,0x87,0x52,0xe8,0xca,0x5b,0x09,
    0x9b,0x78,0x1a,0x16,0xc1,0x9a,0x1d,0x56,0x00,0x6b,0x75,0x58,0x06,0xb6,0xd6,0x61,
    0x45,0xb0,0x9a,0xc3,0x4a,0x60,0xdd,0x0e,0x6b,0x02,0x7b,0xcc,0x61,0x65,0xb0,0xc7,
    0x1d,0xd6,0x0c,0xb6,0xd9,0x61,0x2b,0xc0,0xb6,0x3a,0xac,0x05,0x6c,0x5b,0x9a,0x35,
    0x5b,0xea,0x59,0xe7,0xd6,0x73,0xda,0xc0,0x8c,0xea,0xd7,0xf1,0x23,0xfe,0x00,0xbe,
    0xc5,0x0f,0xe2,0x67,0xf8,0x43,0xf8,0x45,0xfc,0x61,0xfc,0x12,0xfe,0x08,0x7e,0x13,
    0xfe,0x28,0xbe,0x9d,0xfb,0x29,0x79,0x3e,0xea,0xf4,0xd5,0xdf,0xe8,0xfc,0xb1,0x06,
    0x7e,0x0c,0x5e,0xfb,0x69,0x97,0xff,0x85,0xe4,0x67,0xa9,0x9f,0x42,0x7a,0xf7,0x59,
    0xd2,0xd2,0xf3,0x5c,0x23,0xf1,0x65,0xb4,0x95,0x5b,0x2d,0x7e,0x05,0x2e,0xc2,0x57,
    0x79,0xef,0x45,0xfc,0x55,0xc4,0x17,0x53,0x5c,0x51,0x72,0xf2,0x58,0xc5,0x9f,0xc6,
    0xef,0x00,0xd3,0x7a,0x35,0xea,0x85,0x34,0xd7,0x43,0x4b,0xef,0xca,0xac,0xe2,0xac,
    0x89,0x67,0xcd,0x99,0x6a,0x6c,0xe0,0xbd,0x75,0xa1,0xa1,0xfe,0x23,0x60,0xbd,0x0d,
    0x3d,0x6b,0xfc,0x46,0xb8,0xb2,0xe3,0x7b,0xe8,0xc1,0xfc,0x5e,0xf6,0x43,0xe3,0x37,
    0x13,0x5f,0x4b,0x73,0x14,0xc2,0x13,0xc4,0xd5,0xd8,0x13,0x9f,0xb7,0xa3,0x41,0x77,
    0x37,0xfb,0x63,0xfe,0x5e,0x74,0xb5,0xee,0x3e,0x62,0x2b,0xf8,0xfb,0xd9,0x8b,0x2a,
    0x73,0xec,0xe7,0x1e,0x66,0x2e,0xbf,0x9f,0x77,0x61,0x7c,0xbd,0x81,0x3f,0xc8,0xd9,
    0x1b,0x3f,0x00,0x6f,0xfe,0x60,0x43,0xfc,0x21,0xee,0x9d,0xf1,0x43,0x0d,0xfc,0x61,
    0xce,0xce,0xf8,0xe1,0x06,0xfe,0x98,0xd8,0x2e,0xc7,0x8f,0x34,0xf0,0xc7,0xc5,0x8e,
    0x38,0x7e,0x14,0x7e,0x9d,0x4c,0x7e,0x82,0xd9,0xf9,0x6c,0x2d,0xfd,0x99,0xaf,0x67,
    0x72,0x92,0xdf,0x27,0xa8,0xa1,0xfe,0x29,0xb0,0xf5,0x72,0x12,0xa7,0x89,0x7b,0x07,
    0xec,0x34,0x71,0xea,0x8f,0x81,0x75,0x8a,0xe2,0xbb,0xd4,0xb0,0xbe,0xce,0xd3,0xc7,
    0x53,0x72,0xd3,0x0a,0x9c,0x59,0x00,0xfb,0x57,0x10,0xbd,0x7f,0x3b,0xd9,0xe7,0x8f,
    0xd8,0xd9,0x17,0x04,0xd5,0x1d,0xfc,0x18,0x2c,0x38,0xec,0x13,0x30,0xed,0x7d,0x9f,
    0x60,0xfa,0x8e,0x3f,0x25,0x56,0xb9,0x67,0x05,0xd3,0xbd,0xfb,0x8c,0xdd,0xec,0xa6,
    0xbe,0xc6,0x5d,0x02,0x7f,0x8b,0xbc,0xcf,0xc9,0xbd,0xe4,0xf2,0xbe,0x20,0xaf,0xc7,
    0xe5,0x5d,0x06,0x3f,0x4a,0xde,0x97,0xe4,0x5e,0x26,0x4f,0xf7,0xf6,0x2b,0xf2,0x7a,
    0xc9,0xd3,0x9d,0xfd,0x1a,0xfc,0x82,0xc4,0xe8,0x2e,0x7f,0x03,0xa6,0xbb,0xbc,0x20,
    0x27,0x30,0xc1,0x6c,0x77,0x25,0x5e,0xb9,0x71,0xb1,0x09,0xce,0x65,0xdc,0xcd,0xfc,
    0x2d,0x9a,0x21,0xed,0x49,0x31,0x61,0x57,0xc0,0x5f,0x14,0x4f,0x7b,0xea,0x88,0x39,
    0x66,0x71,0xff,0x49,0x0d,0xab,0xa5,0xcf,0x3b,0x12,0xa5,0x71,0xeb,0x63,0x1e,0x53,
    0x22,0x67,0xdc,0xcd,0xf0,0x1d,0x33,0xec,0x70,0x33,0x7c,0x0f,0x6e,0x33,0xfc,0x00,
    0x66,0x33,0x4c,0xb9,0x19,0x94,0x9b,0x14,0x9b,0x42,0x77,0xd2,0xcd,0xf0,0x23,0xda,
    0xd1,0xcd,0xf0,0x13,0xb8,0xcd,0xb0,0x2e,0xe6,0x98,0xc5,0xe9,0x0c,0x56,0x6b,0xca,
    0xcd,0xd0,0x19,0xf3,0x98,0x09,0x72,0x26,0xdd,0x0c,0x57,0x99,0x61,0xb7,0x9b,0xe1,
    0x1a,0xb8,0xcd,0xf0,0x33,0x98,0xcd,0x30,0xe3,0x66,0x50,0x6e,0x5a,0x6c,0x06,0xdd,
    0xe9,0xf4,0x2d,0xc9,0x75,0x7f,0x41,0xbb,0x33,0x2e,0xdf,0x1d,0xed,0xd1,0x62,0x67,
    0x5c,0x8f,0x35,0xe2,0xa6,0xc8,0x9b,0xa6,0x1f,0xbd,0x1b,0x6f,0x73,0xb7,0xd4,0xd7,
    0x7b,0x74,0x86,0x3b,0xf4,0xb2,0xf4,0xa7,0xf7,0xe7,0x3d,0x62,0xce,0xb8,0xbd,0x7c,
    0x9f,0xb9,0xfa,0xdd,0x5e,0x9e,0x05,0xb7,0x7d,0x3e,0x87,0xee,0x59,0xf2,0xf4,0xbb,
    0xf7,0x01,0x79,0xe7,0xc9,0xab,0xa4,0x73,0xc8,0xf1,0xd7,0x79,0x0f,0x17,0xc1,0xfa,
    0xa4,0x8a,0x7e,0x13,0x3f,0xa4,0x87,0x73,0x7c,0x03,0x2f,0xba,0x7a,0xd7,0xa9,0xb7,
    0xd7,0xd5,0xfb,0x15,0xfc,0x8a,0xc4,0xa8,0xff,0x1b,0x58,0xb7,0x3b,0xf3,0xdf,0xc1,
    0x7b,0x38,0xf3,0x59,0x77,0xe6,0xca,0xfd,0x21,0x36,0xcb,0x39,0xea,0xef,0x67,0x24,
    0xa6,0x8f,0x5e,0xf4,0x8c,0x8d,0x9b,0x75,0x3a,0x7f,0xa2,0xd3,0xef,0x74,0xfe,0x02,
    0x37,0x9d,0x39,0xa7,0xa3,0xdc,0x0d,0xb1,0x39,0x6a,0xdd,0x40,0xa7,0xee,0x74,0x8c,
    0x9b,0x73,0x3a,0x37,0xd1,0x39,0xe8,0x74,0xfe,0x06,0x37,0x9d,0x79,0xa7,0xa3,0xdc,
    0x2d,0xb1,0x79,0x6a,0xdd,0x42,0x67,0xc0,0xe9,0x18,0x37,0xef,0x74,0xfe,0x41,0xa7,
    0xd7,0xe9,0xdc,0x06,0x37,0x9d,0x05,0xa7,0x73,0x3b,0xed,0x5b,0x48,0x98,0xd6,0xba,
    0x83,0xce,0xa0,0xd3,0x31,0x6e,0xc1,0xe9,0xdc,0x45,0xe7,0x90,0xd3,0xf9,0x1f,0xdc,
    0x74,0x16,0x9d,0x8e,0x72,0xf7,0xc4,0x16,0xa9,0x75,0x0f,0x9d,0x21,0xa7,0x63,0xdc,
    0xa2,0xd3,0x89,0x31,0xd7,0x39,0xec,0x74,0x0a,0x31,0xc7,0x4d,0xa7,0x14,0x97,0x75,
    0x94,0xcb,0xc4,0x14,0xd3,0x5a,0xfa,0x5b,0x75,0x86,0x9d,0x8e,0x71,0xa5,0xb8,0xac,
    0xd3,0x8c,0xce,0x31,0xa7,0xb3,0x22,0xe6,0xb8,0xe9,0x54,0x9d,0x8e,0x72,0x2d,0x62,
    0x55,0x6a,0xb5,0xa0,0x33,0xe2,0x74,0x8c,0xab,0x3a,0x9d,0x95,0xe8,0x1c,0x77,0x3a,
    0xad,0x31,0xc7,0x4d,0xa7,0xdd,0xe9,0x28,0xd7,0x26,0xd6,0x4e,0xad,0x36,0x74,0x46,
    0x9d,0x8e,0x71,0xfa,0xbc,0x2f,0x5f,0x95,0xed,0x62,0x0f,0x00,0xb3,0x2b,0x01,0xe5,
    0x6c,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform itexture2D color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(ivec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//             ivec4 colorValue = textureLod(isampler2D(color, blitSampler), srcImageCoords * params . invSrcExtent, params . srcMip);
//
//     broadcastColor(colorValue);
//
// }
