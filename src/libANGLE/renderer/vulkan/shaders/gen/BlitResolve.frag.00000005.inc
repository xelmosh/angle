// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x65,0x94,0x4d,0x68,0x9d,0x55,
    0x10,0x86,0xcf,0xb9,0xdf,0xfd,0x49,0x93,0xab,0x4d,0x88,0xa6,0x31,0xde,0xd4,0xfc,
    0x94,0x20,0xa4,0xd4,0x2e,0xaa,0x58,0xa4,0x45,0xa1,0xa0,0x8b,0x42,0xab,0x82,0xcd,
    0x22,0x9b,0x0b,0xcd,0xc2,0x80,0x0a,0x51,0xba,0xc9,0xa2,0x82,0x11,0xba,0xc9,0xa2,
    0x9b,0x6c,0x6a,0xad,0xa9,0x62,0x6d,0xab,0x6d,0xb5,0xee,0xc4,0x9f,0xa2,0xa5,0x6a,
    0x50,0xa2,0x06,0x4b,0xd4,0x60,0xc0,0x3f,0x02,0x5a,0x02,0xb6,0x44,0x6b,0x0d,0xce,
    0x9c,0xef,0x99,0x66,0xb8,0x06,0x26,0xe7,0xce,0xfb,0xce,0xcc,0x7b,0xe6,0x9c,0x39,
    0x5f,0x56,0xe8,0xaf,0x84,0x10,0x43,0x73,0x68,0x0a,0x9b,0x62,0x48,0x7f,0x6d,0xa1,
    0x10,0xf4,0x67,0x4b,0x28,0xa7,0xf5,0xe1,0xdd,0x8f,0xef,0xde,0xf2,0xec,0x73,0xfb,
    0xb7,0x6c,0xbb,0x77,0xab,0xf2,0xb7,0x86,0x2c,0xc5,0x29,0xb7,0x5e,0xbc,0xa2,0xac,
    0x6a,0x4f,0xd5,0x9f,0x7c,0x5a,0xf1,0x0e,0xb1,0x21,0xb1,0xba,0xd8,0xa8,0xd8,0x98,
    0xd8,0xb8,0xd8,0x84,0xd8,0xa4,0xd8,0x94,0x58,0xab,0xd4,0xd0,0x9c,0x8a,0xd6,0x97,
    0x5f,0x1d,0x49,0x4f,0xeb,0x85,0xf0,0x48,0x28,0x85,0xee,0x7c,0x2b,0xa1,0x9f,0xd5,
    0xb0,0x08,0xd6,0xe4,0xb0,0x02,0x58,0xab,0xc3,0x32,0xb0,0x4e,0x87,0x15,0xc1,0x6a,
    0x0e,0x2b,0x81,0xf5,0x38,0xac,0x0c,0xb6,0xc9,0x61,0x15,0xb0,0xbb,0x1d,0xd6,0x04,
    0xb6,0xd9,0x61,0xeb,0xc0,0xb6,0x3a,0xac,0x19,0x6c,0x5b,0xea,0x35,0xbb,0xb9,0x67,
    0xed,0x5b,0xcf,0x69,0x23,0x3d,0xaa,0x5f,0xc7,0x8f,0xf8,0xa3,0xf8,0x16,0x3f,0x86,
    0x9f,0xe1,0x8f,0xe3,0x17,0xf1,0x27,0xf0,0x4b,0xf8,0x93,0xf8,0x65,0xfc,0x29,0x7c,
    0x3b,0xf7,0xa3,0xb2,0xf6,0x39,0x7d,0xf5,0x7b,0x9d,0x3f,0xdd,0xc0,0x4f,0xc3,0xeb,
    0x7e,0xda,0xe5,0x7f,0x21,0xf9,0x59,0xda,0x4f,0x21,0xdd,0x7d,0x96,0xb4,0xf4,0x3c,
    0x37,0x48,0x7c,0x05,0x6d,0xe5,0x6e,0x17,0xbf,0x05,0x2e,0xc2,0x57,0xb9,0xf7,0x22,
    0xfe,0x6d,0xc4,0x17,0x53,0x5c,0x51,0x72,0xf2,0x58,0xc5,0x1f,0xc0,0xef,0x00,0xd3,
    0x7a,0x35,0xea,0x85,0xd4,0xd7,0x2d,0x37,0xef,0xca,0xac,0xc5,0x59,0x99,0xb5,0xe6,
    0x4c,0x35,0x36,0x72,0x6f,0xdd,0x68,0xa8,0x7f,0x17,0xd8,0x60,0xc3,0x9e,0x35,0xbe,
    0x17,0xae,0xe2,0xf8,0x01,0xf6,0x60,0xfe,0x20,0xf3,0xa1,0xf1,0x9b,0x89,0xaf,0xa5,
    0x3e,0x0a,0xe1,0x1e,0xe2,0x6a,0xcc,0x89,0xcf,0xdb,0xde,0xa0,0xbb,0x8b,0xf9,0x31,
    0x7f,0x0f,0xba,0x5a,0x77,0x2f,0xb1,0x2d,0xf8,0xfb,0x98,0x8b,0x2a,0x7d,0xec,0xe3,
    0x1d,0x66,0x2e,0x7f,0x98,0xbb,0x30,0xbe,0xde,0xc0,0x8f,0x70,0xf6,0xc6,0x8f,0xc2,
    0x9b,0x3f,0xd6,0x10,0x7f,0x80,0x77,0x67,0xfc,0x78,0x03,0x7f,0x90,0xb3,0x33,0x7e,
    0xa2,0x81,0x3f,0x24,0xf6,0xa0,0xe3,0x27,0x1b,0xf8,0xc3,0x62,0xcf,0x3b,0x7e,0x0a,
    0xfe,0x0e,0xe9,0xfc,0x08,0xbd,0xf3,0xd9,0xfa,0xdf,0xaa,0x67,0xf2,0x12,0xbf,0x8f,
    0x50,0x43,0xfd,0xa3,0x60,0x5d,0x72,0x12,0xc7,0x88,0x7b,0x05,0xec,0x18,0x71,0xea,
    0x4f,0x83,0xdd,0x29,0x8a,0xaf,0x52,0x43,0x67,0xf4,0x4d,0x66,0xc9,0xef,0xf3,0x1c,
    0xfe,0x7d,0xf2,0xf2,0x0a,0x9c,0x61,0x00,0xfb,0x4b,0x10,0x7d,0x8f,0x3b,0x98,0xef,
    0xf7,0x98,0xe1,0x47,0x05,0xd5,0x3a,0xef,0x83,0x05,0x87,0x7d,0x00,0xa6,0xbd,0xec,
    0x15,0x4c,0xef,0xfc,0x43,0x62,0x95,0x7b,0x48,0x30,0x9d,0xc3,0x8f,0x98,0xd5,0x1e,
    0xea,0x6b,0xdc,0x05,0xf0,0x17,0xc9,0xfb,0x98,0xdc,0x0b,0x2e,0xef,0x13,0xf2,0x06,
    0x5c,0xde,0x45,0xf0,0x17,0xc8,0xbb,0x44,0xee,0x45,0xf2,0x74,0x8e,0x3f,0x25,0x6f,
    0x90,0x3c,0x9d,0xe1,0xcf,0xc0,0x4f,0x4b,0x8c,0xce,0xf6,0xe7,0x60,0x3a,0xdb,0x2b,
    0x72,0x02,0xb3,0xf4,0x76,0x5d,0xe2,0x95,0x9b,0x11,0x9b,0xe5,0x5c,0x66,0x5c,0xcf,
    0x5f,0xa0,0x19,0xd2,0xdc,0x14,0x13,0xf6,0x25,0xf8,0x63,0xe2,0xe9,0x9e,0xba,0x63,
    0x8e,0x59,0xdc,0xdf,0x52,0xc3,0x6a,0xe9,0x7a,0x4d,0xa2,0x34,0xae,0x37,0xe6,0x31,
    0x25,0x72,0x66,0x5c,0x0f,0x5f,0xd1,0xc3,0x76,0xd7,0xc3,0xd7,0xe0,0xd6,0xc3,0x37,
    0x60,0xd6,0xc3,0xbc,0xeb,0x41,0xb9,0x39,0xb1,0x79,0x74,0xe7,0x5c,0x0f,0xdf,0xa2,
    0x1d,0x5d,0x0f,0x97,0xc1,0xad,0x87,0x9e,0x98,0x63,0x16,0xa7,0x3d,0x58,0xad,0x79,
    0xd7,0x43,0x5f,0xcc,0x63,0x66,0xc9,0x99,0x73,0x3d,0x7c,0x47,0x0f,0xbb,0x5c,0x0f,
    0xdf,0x83,0x5b,0x0f,0x3f,0x80,0x59,0x0f,0x8b,0xae,0x07,0xe5,0x16,0xc4,0x16,0xd1,
    0x5d,0x48,0xdf,0x96,0x5c,0xf7,0x47,0xb4,0xfb,0xe2,0xda,0x5b,0xd2,0x3d,0x5a,0xec,
    0xa2,0xdb,0x63,0x3f,0x71,0xf3,0xe4,0x2d,0xb0,0x1f,0x7d,0x2b,0x2f,0xf3,0xd6,0xd4,
    0xd7,0x77,0x75,0x9c,0x37,0xf5,0x84,0xec,0x4f,0xdf,0xd3,0x6b,0xc4,0x1c,0x77,0x73,
    0xf9,0x3a,0x7d,0x0d,0xbb,0xb9,0x3c,0x01,0x6e,0xf3,0xfc,0x06,0xba,0x27,0xc8,0xd3,
    0xef,0xe0,0x49,0xf2,0x46,0xc8,0xd3,0x37,0x79,0x0a,0xfc,0x19,0xee,0xe1,0x34,0x98,
    0xdd,0xd5,0x5b,0xd4,0xf2,0xef,0xee,0x0c,0x58,0xfe,0xee,0xca,0xe9,0xad,0x9f,0x25,
    0xf6,0x0c,0x35,0x4c,0xf3,0x6d,0x34,0xcf,0x39,0xcd,0x77,0xc0,0x4d,0xf3,0x3c,0xd8,
    0x90,0xec,0x5c,0xbf,0xcb,0xef,0xd2,0xf7,0x59,0xbe,0xc3,0xe7,0x5d,0xbd,0x9f,0xa8,
    0xb7,0xc7,0xd5,0xfb,0x19,0xfc,0x92,0xc4,0xa8,0xff,0x0b,0x58,0x8f,0xbb,0xe7,0x5f,
    0xc1,0x07,0xb8,0xe7,0x25,0x77,0xcf,0xca,0xfd,0x26,0xb6,0xc4,0xdd,0xe9,0xef,0x9d,
    0x12,0x33,0xc4,0x5e,0xf4,0x5e,0x8d,0x5b,0x72,0x3a,0xbf,0xa3,0x33,0xec,0x74,0xfe,
    0x00,0x37,0x9d,0x65,0xa7,0xa3,0xdc,0x15,0xb1,0x65,0x6a,0x5d,0x41,0xa7,0xee,0x74,
    0x8c,0x5b,0x76,0x3a,0x7f,0xa2,0x33,0xe2,0x74,0xae,0x82,0x9b,0xce,0x8a,0xd3,0xb9,
    0x9a,0x66,0x2f,0x24,0x4c,0x6b,0x5d,0x43,0x67,0xd4,0xe9,0x18,0xb7,0xe2,0x74,0xae,
    0xa3,0x33,0xe8,0x74,0xfe,0x01,0x37,0x9d,0x55,0xa7,0xa3,0xdc,0x0d,0xb1,0x55,0x6a,
    0xdd,0x40,0x67,0xcc,0xe9,0x18,0xb7,0xea,0x74,0x62,0xcc,0x75,0x0e,0x38,0x9d,0x42,
    0xcc,0x71,0xd3,0x29,0xc5,0x35,0x1d,0xe5,0x32,0x31,0xc5,0xb4,0x96,0xfe,0x56,0x9d,
    0x71,0xa7,0x63,0x5c,0x29,0xae,0xe9,0x34,0xa1,0x73,0xd0,0xe9,0xac,0x8b,0x39,0x6e,
    0x3a,0x55,0xa7,0xa3,0x5c,0xb3,0x58,0x95,0x5a,0xcd,0xe8,0x4c,0x38,0x1d,0xe3,0xaa,
    0x4e,0x67,0x3d,0x3a,0x87,0x9c,0x4e,0x6b,0xcc,0x71,0xd3,0x69,0x77,0x3a,0xca,0xb5,
    0x89,0xb5,0x53,0xab,0x0d,0x9d,0x49,0xa7,0x63,0x5c,0xbb,0xd3,0xe9,0x40,0xe7,0xb0,
    0xd3,0xd9,0x10,0x73,0xdc,0x74,0xba,0x9c,0x8e,0x72,0x9d,0x62,0x5d,0xd4,0xea,0x44,
    0x67,0xca,0xe9,0x18,0xa7,0xeb,0xbf,0xf2,0xa2,0xef,0x17,0xfb,0x0f,0x34,0xc7,0xaf,
    0x2a,0xf0,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(ivec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//             ivec4 colorValue = textureLod(isampler2DArray(color, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer), params . srcMip);
//
//     broadcastColor(colorValue);
//
// }
