// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x5f,0x68,0x97,0x65,
    0x14,0xc7,0x9f,0xf7,0xf7,0x77,0xf3,0x67,0xba,0xcc,0x2d,0xdd,0xe6,0xb2,0x5c,0x60,
    0x24,0x22,0x62,0x11,0x84,0x61,0x57,0x2d,0x18,0xc4,0x16,0x78,0xb3,0x8b,0x11,0xec,
    0x26,0x58,0x22,0xd4,0x2e,0xba,0x19,0xb5,0x9b,0x5d,0x08,0xb1,0x9b,0x42,0x77,0x61,
    0x69,0x06,0x52,0x5a,0xd6,0x9d,0x95,0xf4,0x47,0xaa,0x55,0xa3,0x58,0x35,0x1a,0xa8,
    0xc5,0xa0,0x64,0x50,0x32,0x28,0x5b,0xa9,0x0c,0x3a,0xdf,0xf7,0xfd,0x9c,0x79,0xf8,
    0x0d,0x0e,0xef,0x7b,0xbe,0xdf,0xf3,0x9c,0xef,0xf3,0x7d,0xce,0xf3,0xfe,0x56,0x2e,
    0xed,0xa8,0xa7,0x94,0xa5,0x75,0xa9,0x25,0xf5,0x64,0x29,0xff,0xbb,0x33,0x95,0x92,
    0x5e,0x1b,0xa9,0x96,0x3f,0x9f,0xe8,0x7f,0xba,0x7f,0xf7,0xf3,0x2f,0x8c,0xec,0xde,
    0xf7,0xd0,0x1e,0xf1,0x1b,0x52,0x39,0xaf,0x13,0xb7,0xd1,0xb2,0x8a,0x3d,0x15,0xcf,
    0x3d,0xf3,0xec,0x21,0xe1,0xed,0x16,0x83,0x16,0x43,0x16,0x23,0x16,0xa3,0x16,0x63,
    0x16,0xe3,0x16,0x93,0x16,0x53,0x16,0x6d,0xd6,0x43,0x6b,0xea,0xea,0x6f,0x6f,0xed,
    0xb9,0x9e,0xfa,0xa5,0xd4,0x97,0xaa,0xa9,0xab,0xd8,0x4a,0xda,0xc1,0xd3,0xb1,0x0c,
    0xac,0x25,0x60,0x25,0xb0,0xb6,0x80,0x95,0xc1,0xb6,0x04,0xac,0x02,0xd6,0x1d,0xb0,
    0x2a,0xd8,0xf6,0x80,0xd5,0xc0,0x7a,0x03,0x56,0x07,0xdb,0x19,0xb0,0x16,0xb0,0x5d,
    0x01,0x6b,0x05,0xdb,0x13,0xb0,0x75,0x60,0xfb,0x72,0xaf,0xe5,0xb5,0x3d,0xcb,0xb7,
    0xce,0xa9,0x07,0x8f,0xca,0x87,0xc8,0x33,0xf2,0x11,0x72,0xaf,0x1f,0x25,0x2f,0x93,
    0x8f,0x91,0x57,0xc8,0xc7,0xc9,0xab,0xe4,0x93,0xe4,0x35,0xf2,0x29,0x72,0x3f,0xf7,
    0x53,0xf6,0xbc,0x2f,0xe8,0x2b,0xbf,0x97,0xfc,0x2e,0x53,0x2d,0xe5,0x79,0x39,0xd7,
    0x2b,0xe5,0xb3,0xad,0xe4,0xbd,0xb6,0xb3,0xc7,0xbb,0x2d,0xaf,0xd3,0x5f,0x7c,0x87,
    0x55,0x36,0xe0,0xc5,0xad,0x67,0xae,0x95,0x1c,0xab,0xa4,0xcd,0xac,0x13,0xfe,0x28,
    0x79,0x7b,0xe8,0xd5,0x41,0xbd,0x6b,0x75,0xd2,0x2b,0xe5,0xfb,0xbe,0x63,0x6d,0x16,
    0x1d,0x44,0x2d,0x44,0x83,0x67,0x67,0x08,0x69,0x76,0x33,0x97,0x2e,0x34,0x95,0x6f,
    0x03,0x7b,0x10,0x3f,0x3e,0x03,0xd5,0xdf,0x03,0x57,0x0f,0x7c,0x2f,0xf3,0x16,0x7f,
    0x3f,0xbc,0xfa,0x6f,0xb6,0x9d,0xee,0xa4,0x4e,0xf9,0x03,0xf4,0xf1,0x75,0x7b,0x9b,
    0x74,0xf6,0x73,0x1f,0x3c,0xef,0x43,0x47,0x7d,0x9f,0xa4,0xb6,0x16,0xf8,0x7e,0xce,
    0x46,0xfc,0x00,0x73,0xf7,0xb3,0x1b,0xe0,0x3b,0x2b,0x87,0xfa,0x83,0x9c,0x9d,0xf3,
    0x43,0x4d,0xfc,0x30,0xb3,0x70,0x7e,0x04,0xde,0xf3,0xd1,0xa6,0xfa,0xc3,0x7c,0x57,
    0xce,0x8f,0x35,0xf1,0x2f,0x32,0x1f,0xe7,0xc7,0x9b,0xf8,0x09,0x8b,0x03,0x81,0x9f,
    0x6c,0xe2,0x8f,0x58,0xbc,0x14,0xf8,0xa9,0xc0,0x6b,0x9e,0xaf,0x72,0x9e,0xbb,0xec,
    0x94,0xe4,0xfb,0x35,0xb0,0x18,0xde,0xeb,0x38,0xf7,0x7e,0xab,0x9d,0xe2,0x49,0xee,
    0x03,0x3f,0x69,0x6b,0xbf,0x57,0x59,0x98,0xf3,0x9b,0xbc,0x9f,0x44,0x5f,0xf9,0xa9,
    0xa6,0xf9,0x9d,0x65,0x1e,0xaa,0x7f,0x97,0xf9,0xa8,0xef,0xc3,0xa6,0x54,0xe2,0x2c,
    0x13,0x7b,0xfe,0xcf,0x90,0x6a,0x3e,0xe3,0xe2,0xde,0x9f,0xe7,0x6e,0x3f,0x65,0x7b,
    0xd7,0x5d,0xfd,0x10,0xec,0x7c,0xd8,0xcf,0x21,0xbe,0x9f,0x8f,0xe0,0x1f,0xb7,0x0e,
    0xba,0x7f,0x1f,0x73,0x47,0x7b,0xe8,0xa7,0x9a,0x0b,0xe0,0x13,0x56,0xa3,0xfc,0x13,
    0xd6,0x5d,0x60,0x9d,0xee,0xe5,0xa7,0xac,0xeb,0x65,0x9d,0xee,0xe4,0x67,0xe0,0xef,
    0x58,0x8d,0xee,0xea,0xe7,0x60,0xba,0xab,0xff,0xda,0xce,0x67,0xd8,0xcf,0x4d,0xab,
    0x17,0x77,0xd1,0x62,0x06,0x3f,0x7a,0x1f,0xb0,0x75,0x3a,0x83,0x2f,0xd0,0x4c,0xf9,
    0x9c,0x8b,0xf3,0xf9,0x12,0x7c,0xd0,0x32,0xed,0xa9,0x3d,0x2b,0x30,0xaf,0xbb,0x61,
    0x3d,0xbc,0x97,0x9e,0xff,0x58,0x95,0xea,0xb6,0x66,0x45,0x4d,0x95,0x35,0x17,0x83,
    0x87,0xaf,0xf1,0xb0,0x37,0x78,0xf8,0x06,0xdc,0x3d,0x7c,0x0b,0xe6,0x1e,0xe6,0x82,
    0x07,0x71,0xb3,0x16,0x73,0xe8,0xce,0x06,0x0f,0xdf,0xa1,0x9d,0x05,0x0f,0xdf,0x83,
    0xbb,0x87,0x2d,0x59,0x81,0x79,0x9d,0x3c,0x78,0xaf,0xb9,0xe0,0xa1,0x33,0x2b,0x6a,
    0x66,0x58,0x33,0x1b,0x3c,0xfc,0x80,0x87,0xfd,0xc1,0xc3,0x8f,0xe0,0xee,0xe1,0x27,
    0x30,0xf7,0xb0,0x10,0x3c,0x88,0x9b,0xb7,0x58,0x40,0x77,0x9e,0x7b,0x24,0xdd,0x9f,
    0xd1,0xee,0xcc,0x6e,0xdf,0x67,0xed,0xd1,0x6b,0x17,0xc2,0x1e,0xbb,0xa8,0x9b,0x63,
    0xdd,0x3c,0xb5,0x47,0xa9,0x3d,0x4a,0xad,0xee,0xeb,0xb6,0xac,0xf8,0xbe,0xb4,0xfe,
    0x6d,0x8b,0x63,0x70,0x3a,0xa3,0xee,0xac,0xb8,0x8b,0xe2,0xce,0xc0,0xc9,0xab,0x7e,
    0xb3,0x5e,0xc7,0xeb,0x71,0xbc,0xaa,0xfe,0x0d,0xf0,0xf7,0xf1,0x7a,0x82,0x1e,0xc2,
    0x57,0xac,0x66,0x9a,0x1e,0xee,0xf7,0x04,0xf9,0x34,0xfb,0x3a,0x46,0x2f,0x7d,0x9b,
    0x6f,0xf1,0x5d,0x0e,0xb3,0xcf,0xd3,0x60,0xf2,0x76,0x80,0xbe,0x2f,0x9b,0xce,0x7a,
    0xf6,0x2d,0x1f,0xa7,0xf3,0xdf,0x95,0x62,0xe6,0x67,0xa8,0xe9,0x6f,0xf2,0x3e,0x8d,
    0x07,0x7d,0xd7,0xef,0xe1,0xe1,0x2c,0xba,0xfa,0xc6,0xcf,0x81,0xbf,0x42,0xef,0x0f,
    0xe8,0x7d,0x2e,0x78,0xbf,0xc4,0xba,0xbe,0xe0,0xfd,0x32,0xf8,0x57,0xe8,0x5f,0x01,
    0xeb,0x0f,0xb3,0xff,0x05,0xbc,0x87,0xd9,0x2f,0x86,0xb3,0x10,0xf7,0xab,0xc5,0x22,
    0xfb,0xd4,0xfb,0x63,0x56,0x33,0xc8,0x1e,0xe4,0xc1,0xb9,0xc5,0xa0,0xf3,0x1b,0x3a,
    0x07,0x83,0xce,0xef,0xe0,0xae,0xb3,0x14,0x74,0xc4,0x5d,0xb5,0x58,0xa2,0xd7,0x55,
    0x74,0x86,0x82,0x8e,0x73,0x4b,0x41,0xe7,0x0f,0x74,0x86,0x83,0xce,0x9f,0xe0,0xae,
    0xb3,0x1c,0x74,0xc4,0x5d,0xb3,0x58,0xa6,0xd7,0x35,0x74,0x46,0x82,0x8e,0x73,0xcb,
    0x41,0xe7,0x2f,0x74,0x7a,0x83,0xce,0xdf,0xe0,0xae,0xb3,0x12,0x74,0xc4,0x5d,0xcf,
    0xef,0x57,0xd1,0xeb,0x3a,0x3a,0xa3,0x41,0xc7,0xb9,0x95,0xa0,0x73,0x03,0x9d,0xc3,
    0x41,0xe7,0x26,0xb8,0xeb,0xac,0x06,0x1d,0x71,0xb7,0x2c,0x56,0xe9,0x75,0x0b,0x9d,
    0xb1,0xa0,0xe3,0xdc,0x6a,0xd0,0xd1,0xc7,0x7a,0x99,0xff,0x99,0xae,0x93,0xf1,0x4f,
    0xc9,0x75,0x2a,0xd9,0x6d,0x1d,0x71,0x25,0x0b,0x61,0xea,0xa5,0x77,0xe9,0x8c,0x07,
    0x1d,0xe7,0xf4,0x74,0x9d,0x3a,0x3a,0x13,0x41,0xa7,0x25,0x2b,0x70,0xd7,0x69,0x04,
    0x1d,0x71,0xad,0x16,0x0d,0x7a,0xb5,0xa2,0x33,0x19,0x74,0x9c,0x6b,0x04,0x9d,0x0d,
    0xe8,0x1c,0x09,0x3a,0x1b,0xb3,0x02,0x77,0x9d,0x4d,0x41,0x47,0x5c,0x9b,0xc5,0x26,
    0x7a,0xb5,0xa1,0x33,0x15,0x74,0x9c,0xd3,0x73,0xd5,0x0e,0xe6,0x11,0x8b,0xff,0x01,
    0xe2,0xad,0xd4,0xd6,0xa4,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DMS color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(vec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//             vec4 colorValue = vec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, srcImageCoords, i);
//     }
//
//     colorValue *= params . invSamples;
//
//     broadcastColor(colorValue);
//
// }
