// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000003.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000003[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x5f,0x68,0x96,0x75,
    0x14,0xc7,0x7f,0xcf,0xfb,0xbe,0x7b,0xdf,0xb5,0xa9,0x73,0xb4,0xad,0xe5,0x6c,0x4e,
    0xb7,0xc0,0x48,0x44,0xc4,0x22,0x08,0xa3,0xae,0x5a,0x30,0xa8,0x2d,0xf0,0x66,0x17,
    0x23,0xd8,0x8d,0xb0,0x44,0xa8,0x5d,0x78,0x33,0x6a,0x37,0xbb,0x10,0x62,0x37,0x85,
    0xee,0xc2,0xd2,0x8c,0xfe,0x4c,0xa4,0xb4,0xa4,0x3b,0x2b,0x29,0x93,0x62,0xe5,0x28,
    0x56,0x0d,0x07,0xfd,0x63,0x50,0x32,0x28,0x59,0x39,0x31,0xec,0x7c,0x9f,0xe7,0x73,
    0xf4,0xf0,0xbe,0x70,0x78,0xde,0xf3,0xfd,0x9e,0xdf,0xf9,0x9e,0x73,0x7e,0xe7,0x79,
    0xca,0xa5,0xde,0x5a,0x4a,0x59,0x6a,0x4a,0x8d,0xa9,0x2f,0x4b,0xf9,0xaf,0x35,0x95,
    0x92,0xfe,0x36,0xa7,0x6a,0xfe,0x7c,0x72,0xe0,0xd9,0x81,0x9d,0x2f,0xbc,0x38,0xba,
    0x73,0xcf,0x43,0xbb,0xc4,0x6f,0x48,0xe5,0x3c,0x4e,0x5c,0x8b,0x79,0x15,0x7b,0xca,
    0x9e,0x7f,0x6e,0xff,0x01,0xe1,0xed,0x66,0x43,0x66,0xc3,0x66,0xa3,0x66,0x63,0x66,
    0xe3,0x66,0x13,0x66,0x53,0x66,0xd3,0x66,0x1b,0x2d,0x87,0xce,0xd4,0x94,0xdf,0xfe,
    0xb5,0xe7,0x7a,0xca,0x97,0x52,0x7f,0x6a,0x48,0x5d,0x45,0x29,0xa9,0x97,0xa7,0x63,
    0x19,0x58,0x63,0xc0,0x4a,0x60,0x1b,0x03,0x56,0x06,0xeb,0x0c,0x58,0x05,0x6c,0x73,
    0xc0,0x1a,0xc0,0x7a,0x02,0x56,0x05,0xeb,0x0b,0x58,0x0d,0x6c,0x7b,0xc0,0x1a,0xc1,
    0x76,0x04,0xec,0x2e,0xb0,0x5d,0x01,0x6b,0x02,0xdb,0x93,0xf7,0x5a,0xbe,0x5d,0xb3,
    0xfa,0xd6,0x9c,0xba,0xe9,0x51,0xfe,0x30,0x7e,0x86,0x3f,0x8a,0xef,0xf1,0x63,0xf8,
    0x65,0xfc,0x71,0xfc,0x0a,0xfe,0x04,0x7e,0x03,0xfe,0x14,0x7e,0x15,0x7f,0x1a,0xdf,
    0xe7,0x7e,0xd2,0x9e,0xdb,0x82,0xbe,0xfc,0xad,0xf8,0x77,0x9b,0x6a,0x29,0xf7,0xcb,
    0xb9,0x5e,0x29,0xbf,0xdb,0x4a,0x9e,0xab,0x87,0x1a,0xef,0x31,0xbf,0x46,0x7e,0xf1,
    0x1d,0x16,0xd9,0x0c,0x2f,0x6e,0x1d,0xf7,0x5a,0xc9,0xb1,0x4a,0x6a,0xe3,0x9c,0xf0,
    0x47,0xf1,0xdb,0x43,0xae,0x0e,0xe2,0x5d,0x6b,0x13,0xb9,0x52,0x5e,0xf7,0xfa,0xdb,
    0x77,0xd1,0x81,0x55,0x83,0x35,0xf3,0xdc,0x14,0x4c,0x9a,0x9b,0xb9,0x97,0x2e,0x34,
    0xe5,0xdf,0x07,0xf6,0x20,0xfd,0xf8,0x1d,0x28,0x7e,0x0b,0x5c,0x2d,0xf0,0x7d,0xdc,
    0xb7,0xf8,0xfb,0xe1,0x95,0xbf,0xcd,0x2a,0xdd,0x4e,0x9c,0xfc,0x07,0xc8,0xe3,0xe7,
    0x76,0xd7,0xe9,0xec,0x65,0x1f,0xdc,0xef,0x47,0x47,0x79,0x9f,0x22,0xb6,0x1a,0xf8,
    0x01,0x66,0x23,0x7e,0x90,0x7b,0xf7,0xd9,0x0d,0xf2,0x9e,0x95,0x43,0xfc,0x3e,0x66,
    0xe7,0xfc,0x70,0x1d,0x3f,0xc2,0x5d,0x38,0x3f,0x0a,0xef,0xfe,0x58,0x5d,0xfc,0x41,
    0xde,0x2b,0xe7,0xc7,0xeb,0xf8,0x43,0xdc,0x8f,0xf3,0x13,0x75,0xfc,0xa4,0xd9,0xe3,
    0x81,0x9f,0xaa,0xe3,0x0f,0x9b,0xbd,0x14,0xf8,0xe9,0xc0,0xeb,0x3e,0x5f,0x65,0x9e,
    0x3b,0x6c,0x4a,0xea,0xfb,0x35,0xb0,0x68,0x9e,0xeb,0x18,0x7b,0x7f,0xaf,0x4d,0xf1,
    0x04,0xfb,0xc0,0x27,0x2d,0x7f,0x66,0xc1,0xd7,0x3c,0xdf,0xe4,0xff,0x09,0xf4,0xe5,
    0x9f,0x04,0xd3,0x2e,0xbe,0xcb,0x5d,0xc4,0x7a,0xcf,0x82,0xe9,0xfc,0x87,0xdc,0x97,
    0x74,0x1e,0x36,0xe5,0x12,0xb3,0x4d,0x9c,0xb9,0x6e,0x48,0x43,0x7e,0xe7,0xc5,0x7b,
    0x70,0x9e,0x5d,0x7f,0xda,0x7a,0xd1,0xee,0x7e,0x02,0x76,0x3e,0xd4,0x78,0x80,0xf7,
    0xe9,0x53,0xf8,0x27,0x2c,0x83,0xf6,0xf1,0x33,0x76,0xb6,0x9b,0x7c,0x8a,0xb9,0x00,
    0x3e,0x69,0x31,0xf2,0x3f,0xe7,0xdc,0x05,0xce,0x69,0x4f,0xbf,0xe0,0x5c,0x1f,0xe7,
    0xb4,0xa3,0x17,0xc1,0x67,0x2d,0x46,0xbb,0xfb,0x25,0x98,0x76,0xf7,0x5f,0xab,0x7c,
    0x8e,0x7a,0x6e,0x58,0xbc,0xb8,0x4b,0x66,0x73,0xf4,0xa3,0xff,0x83,0x76,0x4e,0x33,
    0xf8,0x0a,0xcd,0x94,0xdf,0x7b,0x31,0x9f,0xaf,0xc1,0x87,0xcc,0x53,0x4d,0x5d,0x59,
    0x81,0x79,0xdc,0x9a,0xe5,0xf0,0x5c,0x7a,0xae,0x5a,0x94,0xe2,0xb6,0x64,0x45,0x4c,
    0x03,0x67,0x2e,0x85,0x1e,0xbe,0xa1,0x87,0xdd,0xa1,0x87,0x6f,0xc1,0xbd,0x87,0xcb,
    0x60,0xde,0xc3,0x42,0xe8,0x41,0xdc,0xbc,0xd9,0x02,0xba,0xf3,0xa1,0x87,0xef,0xd0,
    0xce,0x42,0x0f,0xdf,0x83,0x7b,0x0f,0xdd,0x59,0x81,0x79,0x9c,0x7a,0xf0,0x5c,0x0b,
    0xa1,0x87,0x9e,0xac,0x88,0x99,0xe3,0xcc,0x7c,0xe8,0xe1,0x07,0x7a,0xd8,0x1b,0x7a,
    0xf8,0x11,0xdc,0x7b,0xf8,0x09,0xcc,0x7b,0x58,0x0a,0x3d,0x88,0x5b,0x34,0x5b,0x42,
    0x77,0x91,0x3d,0x92,0xee,0x15,0xb4,0x7b,0xb2,0x3b,0xfb,0xad,0x1a,0x3d,0x76,0x29,
    0xd4,0xb8,0x95,0xb8,0x05,0xce,0x2d,0x12,0x7b,0x84,0xd8,0x23,0xc4,0x6a,0x5f,0x7b,
    0xb3,0xe2,0x7d,0xd3,0xf9,0xf7,0xcd,0x8e,0xc2,0x69,0x46,0xdb,0xb2,0x62,0x17,0xc5,
    0x9d,0x81,0x53,0xaf,0xfa,0x86,0xbd,0x4e,0xaf,0xc7,0xe8,0x55,0xf1,0x6f,0x80,0x7f,
    0x40,0xaf,0xc7,0xc9,0x21,0xfc,0x1f,0x8b,0x99,0x21,0x87,0xf7,0x7b,0x1c,0x7f,0x86,
    0xba,0x8e,0x92,0x4b,0xef,0xea,0x5b,0xbc,0xa7,0xae,0xf7,0x36,0x7a,0x23,0x41,0xef,
    0x1d,0x70,0xbf,0xe7,0xf7,0xe8,0x3d,0x05,0x6c,0x16,0x4c,0xf0,0x33,0x86,0xe8,0x7d,
    0x3f,0x45,0xec,0x2c,0x39,0x46,0x98,0xc5,0x69,0x74,0x4f,0xf1,0x3d,0x53,0xed,0x2f,
    0x5b,0x9e,0x75,0xcc,0x46,0xb3,0x3a,0x9d,0x7f,0xcb,0x8a,0xdc,0x67,0x88,0x19,0xa8,
    0x9b,0xef,0x0c,0x75,0xeb,0xdb,0xf1,0x11,0x75,0x9f,0xa5,0x6e,0x7d,0x47,0xce,0x81,
    0xbf,0x42,0xee,0x8f,0xc9,0x7d,0x2e,0xf4,0xfb,0x33,0xe7,0xfa,0x43,0xbf,0xbf,0x80,
    0x5f,0x44,0xff,0x57,0xb0,0x81,0xb0,0x5f,0xbf,0x81,0x77,0xb3,0x5f,0xcb,0x61,0xde,
    0xe2,0x7e,0x37,0x5b,0xa6,0x4e,0xfd,0x7f,0xcc,0x62,0x86,0xa8,0x41,0x3d,0x38,0xb7,
    0x1c,0x74,0xfe,0x40,0x67,0x5f,0xd0,0xf9,0x13,0xdc,0x75,0x56,0x82,0x8e,0xb8,0xab,
    0x66,0x2b,0xe4,0xba,0x8a,0xce,0x70,0xd0,0x71,0x6e,0x25,0xe8,0xfc,0x85,0xce,0x48,
    0xd0,0xf9,0x1b,0xdc,0x75,0x56,0x83,0x8e,0xb8,0x6b,0xf9,0xbe,0x16,0xb9,0xae,0xa1,
    0x33,0x1a,0x74,0x9c,0x5b,0x0d,0x3a,0xd7,0xd1,0xe9,0x0b,0x3a,0x6b,0xe0,0xae,0x73,
    0x33,0xe8,0xac,0xe5,0xcf,0x94,0x63,0xca,0x75,0x03,0x9d,0xb1,0xa0,0xe3,0xdc,0xcd,
    0xa0,0x73,0x0b,0x9d,0x83,0x41,0x47,0x8b,0x78,0x2b,0xe8,0x94,0xb3,0x3b,0x3a,0xe2,
    0x32,0x33,0x61,0xca,0xa5,0xff,0xd2,0x19,0x0f,0x3a,0xce,0xe9,0xe9,0x3a,0xd5,0xac,
    0xd0,0x39,0x14,0x74,0x6a,0x59,0x81,0xbb,0x4e,0x53,0xd0,0x11,0xd7,0x68,0xd6,0x44,
    0xae,0x46,0x74,0x26,0x82,0x8e,0x73,0x4d,0x41,0x67,0x3d,0x3a,0x93,0x41,0x67,0x43,
    0x56,0xe0,0xae,0xd3,0x1a,0x74,0xc4,0xb5,0x98,0xb5,0x92,0xab,0x05,0x9d,0xa9,0xa0,
    0xe3,0x5c,0x6b,0xd0,0x69,0x43,0xe7,0x70,0xd0,0x69,0xcf,0x0a,0xdc,0x75,0x3a,0x83,
    0x8e,0xb8,0x0e,0xb3,0x4e,0x72,0x75,0xa0,0x33,0x1d,0x74,0x9c,0xd3,0xf3,0x3f,0x1b,
    0xf4,0x23,0x66,0xff,0x03,0x6b,0xc6,0x33,0x26,0x18,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DMSArray color;
//
// layout(location = 0)out vec4 colorOut0;
// layout(location = 1)out vec4 colorOut1;
// layout(location = 2)out vec4 colorOut2;
// layout(location = 3)out vec4 colorOut3;
// layout(location = 4)out vec4 colorOut4;
// layout(location = 5)out vec4 colorOut5;
// layout(location = 6)out vec4 colorOut6;
// layout(location = 7)out vec4 colorOut7;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(vec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//             vec4 colorValue = vec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue *= params . invSamples;
//
//     broadcastColor(colorValue);
//
// }
