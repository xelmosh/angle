// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/Blit3DSrc.frag.00000002.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlit3DSrc_frag_00000002[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x4d,0x6c,0x55,0x55,
    0x10,0xc7,0xcf,0xb9,0xef,0xf5,0xbd,0x96,0x87,0x50,0x2a,0xb4,0x56,0x5f,0xcb,0x03,
    0x4c,0x03,0x96,0x20,0x0b,0x34,0x12,0xa3,0xd1,0x84,0x44,0x17,0x24,0xa0,0x24,0x96,
    0x45,0x37,0x2f,0xa1,0x0b,0x9a,0x08,0x49,0x35,0x6c,0xba,0xc0,0x84,0x92,0xb0,0xe9,
    0x82,0x4d,0x17,0x2e,0xfc,0x80,0x20,0x62,0xd1,0x28,0x2e,0x04,0x77,0xc6,0x8f,0x46,
    0x89,0x1f,0x8d,0xa6,0x6a,0x23,0x29,0xd0,0xd0,0x04,0xd0,0x34,0x11,0xac,0x02,0x69,
    0xe2,0xcc,0xb9,0xbf,0x81,0xe1,0xbd,0x64,0xde,0xbd,0xf3,0xff,0xcf,0xcc,0xff,0xcc,
    0x39,0x67,0x6e,0x21,0x5b,0x57,0x0e,0x21,0x86,0x25,0xa1,0x39,0xf4,0xc6,0x90,0x7e,
    0x2b,0x42,0x16,0xf4,0xb5,0x12,0x4a,0xe9,0xf9,0xc2,0xf6,0x5d,0xdb,0x37,0xbd,0xf6,
    0xfa,0x9e,0x4d,0x5b,0x9e,0xd8,0xac,0xfc,0xb2,0x50,0x48,0x71,0xca,0x2d,0x17,0xaf,
    0x28,0x4f,0xb5,0x57,0xeb,0x7b,0xf7,0x29,0xde,0x2e,0xb6,0x5b,0xac,0x2e,0x36,0x28,
    0x36,0x24,0x36,0x2c,0x36,0x22,0x36,0x2a,0x36,0x26,0xd6,0x2a,0x35,0x34,0xa7,0xac,
    0xf5,0xe5,0xad,0x3d,0xe9,0x69,0xbd,0x10,0x5e,0x0c,0x4d,0xa1,0x2b,0x5f,0x4a,0x58,
    0xc7,0xd3,0xb0,0x08,0xd6,0xec,0xb0,0x0c,0xac,0xd5,0x61,0x05,0xb0,0x87,0x1c,0x56,
    0x04,0xab,0x3a,0xac,0x09,0xac,0xe6,0xb0,0x12,0xd8,0xa3,0x0e,0x2b,0x83,0xad,0x77,
    0x58,0x33,0xd8,0x46,0x87,0xb5,0x80,0x6d,0x76,0xd8,0x12,0xb0,0x2d,0xa9,0xd7,0xc2,
    0xdd,0x35,0x6b,0xdf,0xba,0x4f,0xdd,0xf4,0xa8,0x7e,0x1d,0x3f,0xe2,0x0f,0xe2,0x5b,
    0xfc,0x10,0x7e,0x01,0x7f,0x18,0xbf,0x88,0x3f,0x82,0xdf,0x84,0x3f,0x8a,0x5f,0xc2,
    0x1f,0xc3,0xb7,0x7d,0x3f,0x29,0xcf,0xb5,0x4e,0x5f,0xfd,0x35,0xce,0x1f,0x6f,0xe0,
    0xc7,0xe1,0x75,0x3d,0x0f,0xca,0x7f,0x96,0xfc,0x42,0x5a,0x4f,0x96,0xce,0xbe,0x90,
    0xb4,0x74,0x3f,0x3b,0x24,0xbe,0x8c,0xb6,0x72,0xab,0xc4,0xaf,0xc0,0x05,0xf8,0xa5,
    0x9c,0x7b,0x11,0x7f,0x25,0xf1,0xc5,0x14,0x57,0x94,0x9c,0x7c,0x2f,0x14,0x7f,0x1a,
    0xbf,0x1d,0x4c,0xeb,0x55,0xa9,0x17,0x53,0x5f,0x0f,0xdc,0x3d,0x2b,0xb3,0xaa,0xb3,
    0x12,0xcf,0x8a,0x33,0xd5,0xe8,0xe6,0xdc,0xba,0xd0,0x50,0x7f,0x35,0x58,0x6f,0x83,
    0x86,0xc6,0xaf,0x81,0x2b,0x3b,0xbe,0x87,0x9e,0xcc,0xef,0xe5,0x7e,0x68,0xfc,0x46,
    0xe2,0x2b,0xa9,0x8f,0x2c,0x3c,0x4e,0x5c,0x85,0x7b,0xe2,0xf3,0xb6,0x36,0xe8,0x6e,
    0xe3,0xfe,0x98,0xbf,0x03,0x5d,0xad,0xbb,0x93,0xd8,0x2a,0x7e,0x1f,0xf7,0x62,0x29,
    0x7d,0xf4,0x31,0x87,0x05,0x97,0xdf,0xcf,0x59,0x18,0x5f,0x6f,0xe0,0x07,0xd8,0x7b,
    0xe3,0x07,0xe1,0xcd,0x1f,0x6a,0x88,0x3f,0xc0,0xdc,0x19,0x3f,0xdc,0xc0,0x1f,0x64,
    0xef,0x8c,0x1f,0x69,0xe0,0x8f,0x88,0x3d,0xe7,0xf8,0xd1,0x06,0xfe,0xa8,0xd8,0x1b,
    0x8e,0x1f,0x83,0xd7,0xbb,0xf2,0x26,0x67,0xaa,0x7e,0xa7,0xec,0xc4,0x09,0xf6,0x38,
    0x0b,0xf7,0xff,0xf8,0xac,0xa5,0x3d,0x7a,0x8f,0xf7,0x13,0xd4,0x54,0xff,0x24,0xd8,
    0xc3,0x92,0x79,0x8a,0xb8,0x0f,0xc0,0x4e,0x11,0xa7,0xfe,0x38,0xd8,0x23,0xa2,0xf8,
    0x21,0x35,0x9e,0x94,0x49,0xcb,0xd8,0xb3,0xc0,0x5a,0xfe,0x13,0x44,0xe7,0xef,0x19,
    0xee,0xf3,0x17,0xdc,0xd9,0x97,0x04,0xd5,0xf5,0x7e,0x09,0x16,0x1c,0xf6,0x15,0x98,
    0xae,0x75,0xa7,0x60,0x7a,0xc6,0x5f,0x13,0xab,0xdc,0xf3,0x82,0xe9,0xbd,0xfb,0x86,
    0xbb,0x59,0xa3,0xbe,0xc6,0x4d,0x80,0x1f,0x26,0xef,0x5b,0x72,0x27,0x5c,0xde,0x77,
    0xe4,0xf5,0xb8,0xbc,0xf3,0xe0,0x87,0xc8,0xfb,0x9e,0xdc,0xf3,0xe4,0xe9,0xbd,0xfd,
    0x81,0xbc,0x5e,0xf2,0x74,0x7f,0x7f,0x04,0x1f,0x97,0x18,0xbd,0xcb,0x3f,0x81,0xe9,
    0x5d,0xfe,0x57,0x76,0x60,0x8a,0xde,0x6e,0x4b,0xbc,0x72,0x93,0x62,0x53,0xec,0xcb,
    0xa4,0xeb,0xf9,0x67,0x34,0x43,0xba,0x27,0xc5,0x84,0xfd,0x02,0xfe,0xb2,0x78,0xe9,
    0x9b,0x1b,0x73,0xcc,0xe2,0x6e,0x49,0x0d,0xab,0xa5,0xcf,0x7f,0x24,0x4a,0xe3,0xd6,
    0xc7,0x3c,0xa6,0x89,0x9c,0x49,0xd7,0xc3,0xaf,0xf4,0xb0,0xd5,0xf5,0xf0,0x1b,0xb8,
    0xf5,0xf0,0x3b,0x98,0xf5,0x30,0xe3,0x7a,0x50,0x6e,0x5a,0x6c,0x06,0xdd,0x69,0xd7,
    0xc3,0x1f,0x68,0x47,0xd7,0xc3,0x05,0x70,0xeb,0xa1,0x27,0xe6,0x98,0xc5,0x69,0x0f,
    0x56,0x6b,0xc6,0xf5,0xb0,0x21,0xe6,0x31,0x53,0xe4,0x4c,0xbb,0x1e,0x2e,0xd2,0xc3,
    0x36,0xd7,0xc3,0x25,0x70,0xeb,0xe1,0x32,0x98,0xf5,0x30,0xe7,0x7a,0x50,0x6e,0x56,
    0x6c,0x0e,0xdd,0xd9,0xf4,0x2d,0xc9,0x75,0xaf,0xa0,0xbd,0x21,0xde,0x9b,0x15,0x5d,
    0xa3,0xc5,0xce,0xb9,0x35,0x3e,0x46,0xdc,0x0c,0x79,0xb3,0xac,0x51,0xbf,0x45,0x6f,
    0xb1,0xc6,0x01,0xd6,0xa8,0xf3,0xfb,0x36,0xf8,0x7e,0xf6,0xe6,0x1d,0x30,0xdb,0xbf,
    0x77,0xa9,0xe9,0x67,0xe1,0x18,0x58,0x3e,0x0b,0xa5,0x34,0xe7,0xc7,0x89,0x3d,0x46,
    0x0d,0xad,0xaf,0xf3,0xf7,0x3e,0xf3,0xab,0xbe,0xce,0xea,0x69,0xe6,0xf4,0x15,0xa9,
    0xa5,0x33,0xfa,0x11,0x31,0xa7,0x5d,0xbf,0x1f,0x53,0xef,0xb8,0xfb,0x3e,0xd8,0x9c,
    0x7c,0x42,0x0f,0xfd,0x6e,0x4e,0xce,0x80,0xdb,0x7c,0x7d,0x4a,0x8d,0x33,0x6e,0xcd,
    0x9f,0x81,0xfb,0x3e,0xce,0x82,0xf9,0x3e,0xce,0x11,0x7b,0x96,0x3e,0xfa,0x24,0x56,
    0xbf,0xd7,0x9f,0xb3,0xd6,0x73,0x6e,0x3f,0xaf,0xb2,0x96,0x1d,0x6e,0x3f,0xaf,0x81,
    0x4f,0x48,0x8c,0xfa,0xd7,0xc1,0x6a,0xee,0x1e,0xfc,0x09,0xde,0xc3,0x3d,0x98,0x77,
    0xf7,0x40,0xb9,0xbf,0xc4,0xe6,0x39,0x5b,0x7d,0x7f,0x56,0x62,0x76,0xb3,0x06,0x3d,
    0x77,0xe3,0xe6,0x9d,0xce,0xdf,0xe8,0xf4,0x3b,0x9d,0x1b,0xe0,0xa6,0xb3,0xe0,0x74,
    0x94,0xbb,0x29,0xb6,0x40,0xad,0x9b,0xe8,0xd4,0x9d,0x8e,0x71,0x0b,0x4e,0xe7,0x16,
    0x3a,0x03,0x4e,0xe7,0x36,0xb8,0xe9,0x2c,0x3a,0x1d,0xe5,0xee,0x88,0x2d,0x52,0xeb,
    0x0e,0x3a,0x83,0x4e,0xc7,0xb8,0x45,0xa7,0xa3,0x87,0x72,0x8d,0xef,0x9a,0xe9,0xc4,
    0x98,0xe3,0xa6,0x53,0x8c,0xf7,0x74,0x94,0xcb,0xc4,0x14,0xd3,0x5a,0xfa,0xae,0x3a,
    0x43,0x4e,0xc7,0x38,0x7d,0x9a,0x4e,0x19,0x9d,0x03,0x4e,0xa7,0x39,0xe6,0xb8,0xe9,
    0x54,0x9c,0x8e,0x72,0x2d,0x62,0x15,0x6a,0xb5,0xa0,0x33,0xec,0x74,0x8c,0xab,0x38,
    0x9d,0x65,0xe8,0x1c,0x74,0x3a,0xcb,0x63,0x8e,0x9b,0x4e,0x9b,0xd3,0x51,0xae,0x55,
    0xac,0x8d,0x5a,0xad,0xe8,0x8c,0x38,0x1d,0xe3,0xda,0x9c,0xce,0x2a,0x74,0x8e,0x38,
    0x9d,0xf6,0x98,0xe3,0xa6,0xd3,0xe9,0x74,0x94,0xeb,0x10,0xeb,0xa4,0x56,0x07,0x3a,
    0xa3,0x4e,0xc7,0xb8,0x4e,0xa7,0x53,0x45,0xe7,0xa8,0xd3,0xe9,0x8a,0x39,0x6e,0x3a,
    0x35,0xa7,0xa3,0x5c,0xb7,0x58,0x8d,0x5a,0xdd,0xe8,0x8c,0x39,0x1d,0xe3,0xf4,0xb9,
    0x28,0x07,0xfd,0x94,0xd8,0xff,0xc0,0x97,0xe4,0x26,0x00,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform utexture3D color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(uvec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 58 "shaders/src/Blit3DSrc.frag"
//
// void main()
// {
//             vec2 srcImageCoordsXY = getSrcImageCoords();
//     vec3 srcImageCoords = vec3(srcImageCoordsXY, params . srcLayer);
//
//             uvec4 colorValue = texture(usampler3D(color, blitSampler), vec3((srcImageCoords . xy)* params . invSrcExtent, srcImageCoords . z));
//
//     broadcastColor(colorValue);
// }
