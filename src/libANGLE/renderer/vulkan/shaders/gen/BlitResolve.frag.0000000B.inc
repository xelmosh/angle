// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000B.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000B[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x4b,0x6c,0x95,0x55,
    0x14,0x85,0xcf,0xb9,0xf7,0xf6,0xb6,0xf4,0xb6,0x5a,0xf0,0x42,0xdb,0x50,0x68,0xa1,
    0x14,0x5f,0x84,0x90,0x80,0xc6,0xc4,0x48,0x74,0xa4,0x18,0x1a,0xb5,0x0c,0x98,0x34,
    0xb1,0x26,0x76,0xe0,0xa0,0x44,0xa2,0xe9,0x80,0x81,0x25,0x32,0xe9,0x80,0x98,0x74,
    0x62,0x80,0x01,0x0a,0x62,0x7c,0x94,0x10,0x35,0xa2,0x20,0x33,0x54,0xf0,0x41,0x34,
    0x55,0x1b,0x4d,0xd5,0xc6,0x26,0x0a,0xa4,0x89,0x92,0x26,0x16,0xeb,0xa3,0xa9,0x7b,
    0xfd,0xff,0x77,0x60,0xe7,0x36,0xd9,0x3d,0xff,0x5e,0x6b,0x9f,0xbd,0xce,0xde,0xe7,
    0x71,0x8b,0x85,0xee,0xfa,0x10,0x62,0x68,0x0c,0x0d,0xe1,0xf6,0x18,0xb2,0xbf,0xe5,
    0xa1,0x10,0xf4,0x59,0x09,0xe5,0x6c,0x7c,0x78,0xe7,0xae,0x9d,0x9b,0x9f,0x7b,0xfe,
    0xe9,0xcd,0xdb,0xee,0xd9,0x22,0xfe,0x96,0x50,0xcc,0xe2,0xc4,0xdd,0x6a,0x5e,0xc9,
    0x46,0xd9,0xd0,0x53,0xcf,0xec,0x11,0xde,0x6a,0xb6,0xcb,0xac,0xdf,0x6c,0x50,0xb8,
    0xd9,0xb0,0xd9,0x88,0xd9,0xa8,0xd9,0x98,0x59,0x8b,0xe5,0xd0,0x9c,0x7a,0xe5,0xb7,
    0xaf,0xd6,0x4c,0x4f,0xf9,0x42,0x78,0x24,0xd4,0x85,0x8e,0x7c,0x29,0xa1,0x9b,0x31,
    0x61,0x11,0xac,0xc1,0x61,0x05,0xb0,0x16,0x87,0x15,0xc1,0xda,0x1c,0x56,0x02,0xeb,
    0x70,0x58,0x1d,0x58,0x97,0xc3,0xca,0x60,0x1b,0x1c,0x56,0x0f,0x76,0x87,0xc3,0x1a,
    0xc0,0x36,0x39,0x6c,0x19,0xd8,0x16,0x87,0x35,0x82,0x6d,0xcb,0x6a,0x2d,0xde,0x58,
    0xb3,0xea,0x56,0x9f,0xd6,0x52,0xa3,0xfc,0x7e,0xfc,0x88,0x3f,0x88,0x9f,0xe2,0x87,
    0xf0,0x8b,0xf8,0xc3,0xf8,0x25,0xfc,0x11,0xfc,0x3a,0xfc,0x51,0xfc,0x32,0xfe,0x18,
    0x7e,0xea,0xfb,0x09,0x1b,0xd7,0x3b,0x7d,0xf9,0xeb,0xf0,0x6f,0x33,0xd5,0x42,0xe6,
    0x17,0x33,0x3d,0x7d,0xaf,0xb4,0x98,0x32,0xfd,0x8a,0xd9,0x5e,0x97,0xb2,0x5c,0x65,
    0xc7,0x57,0xe0,0x03,0x7c,0x13,0x7b,0xab,0x35,0xae,0xb2,0x4c,0x55,0x78,0x71,0x2b,
    0x6d,0xac,0xc2,0x75,0xd9,0xff,0x55,0xe4,0x15,0x7e,0x3f,0x7e,0xab,0xd3,0x6a,0x23,
    0xbe,0x90,0xd5,0xd1,0x7c,0x63,0x6f,0xda,0xb0,0xb2,0xb3,0x2a,0x63,0xc5,0x99,0x34,
    0xd6,0xb0,0x4f,0x1d,0x68,0xac,0xa1,0x27,0xc2,0xee,0xa6,0xbe,0x4e,0xd6,0xaf,0xf8,
    0x2e,0xb8,0x7a,0xc7,0xf7,0xb0,0xff,0xe2,0x37,0xc2,0x57,0x32,0xcd,0x42,0xb8,0x93,
    0x38,0xf9,0x77,0x91,0x27,0xcd,0xdb,0x5a,0xa3,0xb3,0x9d,0xf3,0x91,0xfc,0x1d,0xe8,
    0x28,0xef,0xa3,0xc4,0x96,0x1d,0xdf,0x4b,0x2f,0xc4,0xf7,0x71,0x0e,0x9a,0xa8,0xa3,
    0x8f,0x7b,0x57,0x74,0xf1,0xbb,0xe9,0x55,0xe2,0xfb,0x6b,0xf8,0x01,0x7a,0x9f,0xf8,
    0x41,0xf8,0xe4,0x0f,0xd5,0xc4,0xef,0xe5,0x9e,0x25,0x7e,0xb8,0x86,0xdf,0xc7,0xde,
    0x26,0x7e,0xa4,0x86,0x3f,0x60,0xf6,0xa0,0xe3,0x47,0x6b,0xf8,0x83,0x66,0xfb,0x1d,
    0x3f,0x06,0xbf,0xc9,0xba,0xa2,0x3a,0x5f,0xa6,0xa7,0xde,0xd2,0xdc,0xa3,0x9c,0xfb,
    0x76,0xeb,0xda,0x71,0xf6,0x83,0x27,0x2d,0x1b,0xa3,0xf3,0xd5,0xbf,0xd7,0xf8,0x3e,
    0x8e,0x9e,0xfc,0x13,0xee,0xdc,0xbe,0x45,0xef,0xfd,0xfa,0x4e,0x83,0x69,0xfe,0x07,
    0xec,0x8f,0xce,0xd9,0xbd,0xa6,0x5c,0xa0,0x97,0x81,0x39,0x0b,0x86,0x68,0x3d,0x0f,
    0x70,0xce,0xcf,0x73,0x96,0x1f,0xb3,0x5a,0x74,0x56,0x3f,0x06,0x3b,0xef,0xd6,0xb8,
    0x87,0xfb,0xf4,0x09,0xfc,0x43,0x96,0x41,0xfd,0xfc,0x94,0x33,0xda,0x49,0x3e,0xc5,
    0x5c,0x00,0x7f,0xd1,0x62,0xe4,0x7f,0xc6,0xbc,0x0b,0xcc,0xd3,0xb9,0xfc,0x9c,0x79,
    0x3d,0xcc,0x53,0x4f,0xbe,0x00,0x1f,0xb7,0x18,0x9d,0xd5,0x2f,0xc1,0xd4,0xcb,0xbf,
    0x6c,0xe5,0x13,0xac,0xe7,0x1f,0x8b,0x17,0x77,0xc9,0x6c,0x82,0x7a,0xf4,0xfd,0x84,
    0xcd,0x53,0x0f,0xbe,0x42,0x53,0x7f,0x2f,0xd0,0x9f,0xaf,0xc1,0xfb,0xcc,0xd3,0x9a,
    0xd6,0xc6,0x1c,0x4b,0x71,0x7f,0x5b,0x8e,0x94,0x4b,0xe3,0xbc,0x45,0x29,0x6e,0x7d,
    0xcc,0x63,0xea,0x98,0x73,0xc9,0xd5,0xf0,0x0d,0x35,0x6c,0x75,0x35,0x7c,0x0b,0x9e,
    0x6a,0xf8,0x0e,0x2c,0xd5,0x30,0xe5,0x6a,0x10,0x37,0x69,0x36,0x85,0xee,0xa4,0xab,
    0xe1,0x7b,0xb4,0xa3,0xab,0xe1,0x07,0xf0,0x54,0xc3,0xba,0x98,0x63,0x29,0x4e,0x35,
    0xa4,0x5c,0x53,0xae,0x86,0xee,0x98,0xc7,0x4c,0x30,0x67,0xd2,0xd5,0xf0,0x23,0x35,
    0x6c,0x77,0x35,0xfc,0x04,0x9e,0x6a,0xf8,0x19,0x2c,0xd5,0x30,0xe3,0x6a,0x10,0x37,
    0x6d,0x36,0x83,0xee,0x34,0xe7,0x48,0xba,0xbf,0xa0,0xdd,0x1d,0x6f,0x9e,0x6f,0xad,
    0x31,0xc5,0xce,0xb8,0x35,0x6e,0x20,0x6e,0x8a,0x79,0xd3,0xc4,0x1e,0x22,0xf6,0x10,
    0xb1,0xba,0x6b,0x1b,0x63,0x7e,0xdf,0x34,0xff,0x1d,0xb3,0xc3,0x70,0xd9,0xfb,0x17,
    0xf3,0xb3,0x28,0xee,0x3d,0x38,0xd5,0xaa,0x37,0xeb,0x15,0x6a,0x3d,0x4a,0xad,0x8a,
    0x7f,0x15,0xfc,0x5d,0x6a,0x3d,0x46,0x0e,0xe1,0xd7,0x2d,0xe6,0x08,0x39,0x52,0xbd,
    0xc7,0xf0,0x8f,0xb0,0xae,0xc3,0xe4,0xd2,0x5d,0x7d,0x9d,0x7b,0x9a,0xf4,0xde,0x40,
    0x6f,0xc0,0xe9,0xbd,0x09,0x9e,0xf6,0xf9,0x6d,0x6a,0x0f,0x0e,0x1b,0x07,0x13,0xfc,
    0xb8,0x21,0xba,0xef,0x27,0x89,0x1d,0x27,0xc7,0x93,0xf4,0xe2,0x14,0xba,0x27,0x79,
    0xbf,0xb4,0xf6,0xfd,0x96,0xa7,0x89,0xde,0xa8,0x57,0xa7,0x42,0x8e,0x95,0xe9,0x89,
    0x62,0x7a,0x6b,0xfa,0xab,0x7a,0x9e,0xe5,0x3d,0x78,0x9f,0x79,0xaa,0x43,0x6f,0xc9,
    0x87,0xd4,0x71,0x9a,0x3a,0xf4,0xae,0x9c,0x01,0x7f,0xc9,0x62,0x34,0xe7,0x2c,0xf3,
    0xce,0x64,0xef,0x7e,0x39,0xc3,0x3e,0x72,0x6f,0xdb,0xd9,0xec,0xcd,0xce,0x7f,0x73,
    0xcf,0xc1,0xa5,0x3e,0xfd,0x4a,0xfe,0x1d,0xae,0x4f,0xbf,0x81,0x5f,0x64,0xdd,0x97,
    0xc1,0x7a,0xdd,0xb9,0xbc,0x02,0xde,0xc9,0xb9,0x9c,0x75,0xfb,0x24,0xee,0xaa,0xd9,
    0x2c,0xf5,0x5d,0xcd,0xce,0x78,0x31,0xfb,0x1d,0x3a,0x47,0xed,0x89,0x9b,0x75,0x3a,
    0xbf,0xa3,0xb3,0xdb,0xe9,0xfc,0x01,0x9e,0x74,0xe6,0x9c,0x8e,0xb8,0x6b,0x66,0x73,
    0xe4,0xba,0x86,0x4e,0xbf,0xd3,0x49,0xdc,0x9c,0xd3,0xf9,0x13,0x9d,0x01,0xa7,0x33,
    0x0f,0x9e,0x74,0x16,0x9c,0xce,0x7c,0x76,0x1e,0x43,0x86,0x29,0xd7,0x75,0x74,0x06,
    0x9d,0x4e,0xe2,0x16,0x9c,0xce,0xbf,0xe8,0xf4,0x38,0x9d,0xff,0xc0,0x93,0xce,0x92,
    0xd3,0x11,0xb7,0x68,0xb6,0x44,0xae,0x45,0x74,0x86,0x9c,0x4e,0xe2,0x96,0x9c,0x4e,
    0x21,0xe6,0x3a,0x7b,0x9d,0x4e,0x31,0xe6,0x78,0xd2,0x29,0xc7,0x9b,0x3a,0xe2,0x4a,
    0x66,0xc2,0x94,0x4b,0xdf,0xd2,0x19,0x76,0x3a,0x89,0xd3,0x98,0x74,0x96,0xa1,0xb3,
    0xcf,0xe9,0x34,0xc6,0x1c,0x4f,0x3a,0xcd,0x4e,0x47,0x5c,0xc5,0xac,0x99,0x5c,0x15,
    0x74,0x46,0x9c,0x4e,0xe2,0x9a,0x9d,0x4e,0x0b,0x3a,0x07,0x9c,0xce,0xf2,0x98,0xe3,
    0x49,0xa7,0xea,0x74,0xc4,0xad,0x30,0xab,0x92,0x6b,0x05,0x3a,0xa3,0x4e,0x27,0x71,
    0x55,0xa7,0xd3,0x8a,0xce,0x41,0xa7,0xd3,0x16,0x73,0x3c,0xe9,0xac,0x76,0x3a,0xe2,
    0xda,0xcd,0x56,0x93,0xab,0x1d,0x9d,0x31,0xa7,0x93,0x38,0x8d,0x8b,0x76,0xfb,0xee,
    0x33,0xfb,0x1f,0xb0,0xa7,0xb8,0xae,0x50,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DMSArray color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(uvec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//             uvec4 colorValue = uvec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue = uvec4(round(colorValue * params . invSamples));
//
//     broadcastColor(colorValue);
//
// }
