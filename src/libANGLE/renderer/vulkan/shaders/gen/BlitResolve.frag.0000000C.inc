// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000C.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000C[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0xfd,0x4b,0x93,0x51,
    0x14,0xc7,0xef,0x9e,0x67,0xdb,0x33,0xed,0x65,0x46,0x6d,0xb3,0x19,0x61,0x99,0xd1,
    0x1b,0x22,0x68,0x11,0x44,0x42,0x3f,0x15,0x38,0x33,0x9d,0xc6,0x52,0x2b,0x8d,0x88,
    0x2c,0x53,0x49,0x93,0xc2,0x72,0x54,0xb3,0xa4,0xfd,0x10,0x94,0xf5,0x4f,0xf4,0xf7,
    0x45,0x2f,0x10,0x74,0xce,0xdd,0xe7,0xc6,0x69,0x0f,0x5c,0xef,0xce,0xe7,0x9e,0x97,
    0xfb,0xbd,0xe7,0x5e,0xe3,0xa8,0x2f,0x71,0x2e,0xe5,0x3a,0x5d,0xce,0x7d,0x75,0xad,
    0xef,0x80,0x8b,0x84,0x38,0xb7,0xc7,0x65,0xfd,0x7c,0xb5,0x52,0xad,0x0c,0xac,0xad,
    0xdf,0x1f,0x18,0x3e,0x3f,0xa8,0xeb,0xfb,0x5d,0xec,0xfd,0x74,0x2d,0xef,0x12,0x97,
    0x96,0x59,0xc7,0x93,0x85,0xc5,0x65,0xe7,0x99,0x73,0x15,0x19,0x5d,0xe2,0xa7,0x3c,
    0x31,0xbf,0xf7,0x6a,0x3e,0xf9,0x95,0xf7,0xf9,0x5b,0xbe,0xd7,0x5c,0xc6,0x95,0xa8,
    0xdd,0xc7,0x1c,0x58,0x0a,0x96,0x33,0x2c,0x82,0x75,0x19,0x16,0xc3,0xba,0x0d,0x4b,
    0xc3,0x8e,0x18,0x96,0x81,0xf5,0x1a,0x96,0x85,0x9d,0x30,0x2c,0x81,0x9d,0x32,0x2c,
    0x07,0x3b,0x67,0x58,0x07,0x6c,0xd0,0xb0,0x4e,0xd8,0xb0,0xd7,0x1a,0xff,0xdb,0xb3,
    0xea,0xae,0xa0,0xbb,0x88,0x3d,0x2e,0xf3,0x71,0x34,0x07,0xfb,0x98,0xb1,0xab,0x6d,
    0xeb,0x55,0xd6,0x35,0xdf,0x41,0xf9,0x1b,0x79,0x3b,0xf6,0xfa,0x23,0x9f,0x37,0xf6,
    0x7a,0x54,0x5f,0x49,0xfc,0x13,0xf4,0x45,0xd8,0xfb,0xb0,0xd3,0xde,0x27,0x2d,0xbd,
    0x6c,0x9d,0xb1,0xf2,0x4b,0xd8,0x79,0x58,0x41,0xec,0x02,0xb9,0x82,0x5d,0xc4,0xd6,
    0xef,0xa8,0x44,0x85,0xb3,0x0a,0xa3,0x60,0x46,0x96,0xb9,0x68,0x86,0xd6,0xec,0xe6,
    0xdc,0x4a,0xd4,0x54,0xfb,0x30,0xec,0x2c,0x35,0xcb,0xd4,0x54,0xff,0x1e,0xd6,0x12,
    0xb3,0x1e,0xf6,0x10,0xec,0x7e,0xfa,0xa3,0xfe,0x27,0xf1,0xd7,0x7a,0x87,0x44,0xf9,
    0x69,0xfc,0xd4,0x3e,0xd3,0x16,0x37,0xd4,0x56,0x77,0x84,0xfe,0x69,0x9e,0x51,0xee,
    0x55,0x96,0x7d,0x8e,0x72,0xaf,0x63,0xbf,0xdf,0x0e,0x37,0xc6,0x5a,0xca,0xfd,0xff,
    0x05,0x5b,0x73,0x5c,0xe7,0xf7,0x18,0x39,0xd4,0x1e,0x87,0x95,0x65,0x6f,0x13,0xf8,
    0x4d,0xc2,0x26,0xf0,0x53,0xbb,0x0a,0xeb,0x91,0x8a,0xd3,0xe4,0x08,0xfb,0xac,0xd1,
    0xd3,0x60,0xcf,0xb1,0x2f,0xcd,0x75,0x1b,0x4d,0xca,0x2f,0xc8,0x9d,0x8c,0xe8,0xb7,
    0xc3,0xe7,0xa7,0x10,0x7d,0x07,0x97,0xb9,0x0f,0x0f,0xe8,0xf9,0x84,0x50,0xd5,0xf3,
    0x10,0xe6,0x0c,0x5b,0x84,0xa9,0xb6,0x1b,0xc2,0xb4,0x17,0x8f,0xf0,0xd5,0xb5,0x2b,
    0xc2,0xb4,0x4f,0x8f,0xe9,0x65,0x99,0xfc,0xea,0xb7,0x04,0xdf,0x26,0x6e,0x99,0xd8,
    0x25,0x13,0xb7,0x42,0x5c,0xaf,0x89,0x5b,0x85,0xbf,0x25,0xee,0x29,0xb1,0xab,0xc4,
    0x69,0x9f,0xd7,0x88,0xeb,0x27,0x4e,0x7b,0xbc,0x0e,0xff,0x26,0x3e,0xda,0xfb,0x67,
    0x30,0xed,0xfd,0x0f,0x39,0x81,0x4d,0xb4,0xfd,0x16,0x7f,0x5d,0xdb,0x90,0xb1,0xc9,
    0xb9,0x6c,0x18,0xcd,0xcf,0xa9,0xa9,0x5f,0x5d,0x7c,0x95,0xbd,0x80,0x4f,0x8a,0xa5,
    0x7b,0xfa,0x08,0x0b,0x7e,0xbf,0x24,0x47,0xc8,0xa5,0xf3,0x77,0xf1,0x52,0xbf,0xcf,
    0xf8,0x64,0x88,0xd9,0x30,0x1a,0x5e,0xa2,0x61,0xc8,0x68,0x78,0x05,0x0f,0x1a,0xb6,
    0x60,0x41,0x43,0xc3,0x68,0xd8,0xf2,0xfb,0x73,0x9e,0x69,0xdd,0xba,0xd1,0xf0,0x9a,
    0xda,0x29,0xa3,0xe1,0x0d,0x3c,0x68,0xf8,0x04,0x0b,0x7e,0xaa,0x21,0xe4,0x6a,0x18,
    0x0d,0xbb,0xf8,0x6c,0x12,0x53,0x37,0x1a,0xb6,0xd1,0x30,0x62,0x34,0xbc,0x83,0x07,
    0x0d,0xef,0x61,0x41,0x43,0xd3,0x68,0xd0,0xb5,0x1d,0x19,0x4d,0xea,0xee,0xf8,0x77,
    0xd2,0xaa,0xfb,0x81,0xda,0xbb,0xe6,0x6d,0xe9,0x1e,0x83,0x6f,0xd3,0xec,0xf1,0x0b,
    0x7e,0x0d,0xe2,0x76,0xd8,0xcf,0x98,0xbf,0xb7,0xad,0xb7,0xa7,0xb6,0xbe,0xb3,0x29,
    0xde,0xd8,0x4d,0xd9,0xdf,0xb4,0x9f,0x5b,0x3e,0x53,0xe6,0x5e,0xde,0x42,0x57,0xcd,
    0xdc,0xcb,0x19,0x78,0xb8,0xcf,0xb3,0xd4,0x9d,0x21,0x4e,0xdf,0xdf,0x1d,0xe2,0xe6,
    0x88,0xd3,0xb7,0x78,0x17,0xbe,0x42,0x1f,0xe6,0x61,0x35,0xc9,0xa2,0xef,0x70,0x81,
    0x3d,0xcc,0xf2,0xb6,0xe7,0x4d,0x1f,0xef,0xb1,0xee,0xfc,0x19,0xc7,0xfe,0xff,0x90,
    0xb2,0x3f,0x72,0x22,0x17,0x65,0xfc,0x05,0xa3,0xd4,0x0a,0x18,0xc8,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform texture2D depth;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragDepth = textureLod(sampler2D(depth, blitSampler), srcImageCoords * params . invSrcExtent, params . srcMip). x;
//
// }
