// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000014.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000014[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x94,0xe9,0x4b,0x94,0x51,
    0x14,0xc6,0xaf,0x33,0xe3,0x8c,0xb6,0x69,0xd8,0xa8,0x59,0x84,0x2d,0x46,0x1b,0x22,
    0x68,0x11,0x44,0x41,0x1f,0xa2,0x40,0xcd,0x65,0x54,0xcc,0xac,0x71,0x99,0x49,0x6d,
    0x33,0xd2,0x22,0xa2,0x45,0xb2,0x55,0x0a,0x2b,0x51,0xa6,0x92,0xfc,0x10,0x94,0xd5,
    0xdf,0x17,0x2d,0x10,0x74,0xce,0x7d,0x7f,0x37,0x4e,0xf3,0xa1,0x17,0x2e,0xf7,0x3d,
    0xcf,0x59,0x9f,0x7b,0xcf,0xb9,0xf1,0xd8,0xce,0x94,0x73,0x25,0x6e,0x8d,0x2b,0x73,
    0x5f,0x5c,0xf4,0x6d,0x74,0x31,0x41,0xa2,0x7d,0xb1,0xca,0x89,0xae,0xdc,0x65,0x3a,
    0xfb,0xb2,0x27,0xfa,0x7b,0xb2,0x53,0xe3,0xc3,0xb9,0xfc,0xf5,0xec,0xd4,0x74,0xfe,
    0xea,0xe8,0xc4,0xe5,0x6c,0xfe,0xd6,0xb5,0xc9,0xeb,0xd3,0x62,0xbb,0xd6,0x25,0xbd,
    0xcf,0xc9,0xb6,0x4c,0x5b,0xe3,0xd4,0x74,0xae,0xb1,0xe5,0x60,0x93,0xc6,0xda,0xe0,
    0xe2,0x3e,0xa6,0xea,0x2a,0x24,0x47,0x42,0x76,0x5d,0x57,0x86,0x27,0xae,0x3a,0x8f,
    0x39,0xd7,0x26,0x2b,0x27,0xab,0x52,0x6c,0x55,0x97,0x32,0xff,0xeb,0x34,0xa6,0xfc,
    0x55,0xf8,0x1c,0x91,0xfd,0x29,0x57,0xea,0x6a,0xa8,0x75,0x27,0x7b,0xc0,0x4a,0xc0,
    0xca,0x0c,0x16,0x03,0xab,0x34,0x58,0x1c,0xac,0xd6,0x60,0x09,0xb0,0xad,0x06,0x2b,
    0x05,0xab,0x37,0x58,0x12,0x6c,0x97,0xc1,0x52,0x60,0x7b,0x0c,0x56,0x06,0x76,0xc0,
    0x60,0xe5,0x60,0x4d,0x06,0x5b,0x03,0xd6,0xe2,0xb9,0xc6,0xff,0xd6,0xac,0xbc,0xdb,
    0xe0,0x5d,0x8d,0xdc,0x21,0xfb,0x0e,0x38,0x07,0x79,0xbb,0x91,0x33,0x45,0xfa,0x0c,
    0xfa,0x10,0x2f,0x47,0xbc,0xa5,0xaa,0x48,0x1e,0x2b,0xb2,0x1f,0xc3,0x5e,0xcf,0xb1,
    0x4a,0xbc,0x62,0x5e,0x8e,0xfb,0xf3,0x8a,0xf9,0x3a,0xe2,0x9e,0xbf,0x9e,0x47,0x8d,
    0xd8,0xa7,0x38,0x8f,0x18,0xf2,0x7a,0xe4,0x84,0xb7,0x49,0xc8,0xfd,0x47,0xb1,0x14,
    0x3f,0x82,0x5c,0x01,0x96,0x16,0x39,0x4d,0xac,0x20,0x57,0x23,0xeb,0xb7,0x4d,0xbc,
    0xc2,0xd9,0x86,0x95,0x36,0x2b,0xc9,0x5e,0x6d,0x96,0xe6,0xac,0xe5,0x9c,0x6b,0xc8,
    0xa9,0xf2,0x66,0xb0,0xfd,0xe4,0xac,0x23,0xa7,0xda,0x6f,0x41,0x97,0x32,0xfa,0x50,
    0x43,0x90,0x1b,0xb8,0x4f,0xb5,0xdf,0x8d,0xbd,0xe6,0xdb,0x24,0xcc,0xf7,0x62,0xa7,
    0xf2,0xbe,0x22,0xbf,0xe6,0xa2,0xbc,0xc7,0xb8,0x6f,0x8d,0xd3,0x4a,0x1f,0x26,0xa9,
    0xb3,0x95,0x59,0x88,0xfb,0x7a,0xcb,0x5d,0x3b,0xba,0x12,0xf7,0xef,0x17,0x64,0x8d,
    0x71,0x9a,0xff,0x76,0x62,0xa8,0xdc,0x01,0x56,0x27,0xb5,0x75,0x61,0xd7,0x0d,0xd6,
    0x85,0x9d,0xca,0x19,0xb0,0x2d,0x92,0xb1,0x97,0x18,0xa1,0xce,0x7e,0xee,0x34,0xc8,
    0x83,0xd4,0xa5,0xb1,0xce,0xc1,0x29,0x8d,0x3c,0x8a,0x2e,0x4d,0xec,0x51,0xe6,0x39,
    0xf0,0xc8,0x73,0x56,0xff,0xe3,0x71,0x81,0xff,0x3c,0x31,0x54,0x1e,0x33,0xf5,0x5d,
    0x44,0xa7,0x3d,0x36,0x45,0x3c,0xed,0xb1,0x43,0x32,0x43,0x31,0xfe,0x1d,0x39,0x7f,
    0x08,0xa2,0x73,0x7b,0x94,0x7e,0xbc,0x4d,0xcf,0x75,0x09,0xaa,0xe7,0x79,0x07,0xcc,
    0x19,0xec,0x2e,0x98,0xd6,0xd4,0x29,0x98,0xf6,0xc2,0x3d,0x6c,0x55,0x77,0x5c,0x30,
    0xed,0x93,0xfb,0xf4,0x52,0x1d,0xf1,0xd5,0x6e,0x06,0xfc,0x11,0x7e,0x0f,0xf0,0x9d,
    0x31,0x7e,0xb3,0xf8,0xd5,0x1b,0xbf,0x87,0xe0,0xb3,0xf8,0x3d,0xc6,0xf7,0x21,0x7e,
    0xda,0x67,0x4f,0xf0,0x6b,0xc0,0x4f,0x79,0x3f,0x05,0xff,0x2a,0x36,0xda,0x7b,0xcf,
    0xc0,0xb4,0xf7,0xbe,0xcb,0x09,0xcc,0xc3,0xed,0x97,0xd8,0xab,0x6e,0x4e,0xd6,0x3c,
    0xe7,0x32,0x67,0x38,0x3f,0x27,0xa7,0xf3,0xf5,0x27,0x3c,0xf6,0x02,0xbc,0x5b,0x24,
    0xad,0xe9,0x03,0x58,0xb0,0xfb,0x29,0x31,0x42,0x2c,0xdd,0xbf,0x89,0x95,0xda,0x7d,
    0xc2,0xa6,0x14,0x9f,0x39,0xc3,0xe1,0x25,0x1c,0x9a,0x0d,0x87,0x57,0xe0,0x81,0xc3,
    0x6b,0xb0,0xc0,0xa1,0x60,0x38,0xa8,0x6e,0x41,0x56,0x81,0xbc,0x0b,0x86,0xc3,0x22,
    0xb9,0x4b,0x0c,0x87,0x25,0xf0,0xc0,0xe1,0x23,0x58,0xb0,0x53,0x0e,0x21,0x56,0xc1,
    0x70,0x58,0xc5,0x66,0x1e,0x9f,0x05,0xc3,0xe1,0x0d,0x1c,0x8e,0x19,0x0e,0x6f,0xc1,
    0x03,0x87,0x77,0x60,0x81,0xc3,0x8a,0xe1,0xa0,0xba,0x65,0x59,0x2b,0xe4,0x5d,0xf6,
    0x73,0x1a,0xe5,0x7d,0x4f,0xee,0x55,0x33,0x13,0x5a,0x63,0xb0,0x5d,0x31,0x35,0x7e,
    0xc6,0xae,0x80,0xdf,0x32,0xf5,0xb4,0xfb,0xbe,0x8d,0x66,0x5f,0x65,0x9d,0xf3,0x1e,
    0x66,0xbc,0x4f,0xea,0xeb,0xf5,0x7b,0x64,0xd3,0x63,0xfa,0xf2,0x0c,0xbc,0xfa,0x4d,
    0x5f,0x0e,0x80,0x87,0x7e,0x3e,0x4b,0xde,0x01,0xfc,0x74,0xfe,0xcf,0xe3,0x37,0x88,
    0x9f,0xce,0x7e,0x16,0x7c,0x92,0x7b,0x18,0x02,0xeb,0x97,0x28,0x3a,0x87,0xc3,0xd4,
    0x70,0x96,0xb7,0x65,0xc8,0xdc,0xe3,0x08,0x7a,0xe7,0xcf,0x38,0xee,0xdf,0xc1,0x11,
    0x62,0xeb,0xdc,0x8f,0xf3,0x1e,0x28,0x17,0x7d,0x0b,0x2e,0x81,0xf5,0x10,0x5f,0xdf,
    0x84,0x69,0xf0,0xe2,0xf8,0x7a,0x57,0x37,0xd0,0x3b,0x3f,0xd3,0x51,0xbd,0x37,0xc1,
    0x35,0x5f,0x0e,0xf9,0xb7,0xdc,0xc0,0x61,0x59,0x7f,0x00,0x8c,0xe1,0x21,0x31,0x18,
    0x09,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(set = 0, binding = 0)uniform texture2D depth;
//
// layout(set = 0, binding = 1)uniform utexture2D stencil;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragDepth = textureLod(sampler2D(depth, blitSampler), srcImageCoords * params . invSrcExtent, params . srcMip). x;
//
//     gl_FragStencilRefARB = int(textureLod(usampler2D(stencil, blitSampler), srcImageCoords * params . invSrcExtent, params . srcMip). x);
//
// }
