// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.0000000F.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_0000000F[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x93,0x5d,0x4f,0x53,0x41,
    0x10,0x86,0xb7,0x3d,0xb4,0xa7,0xa0,0x85,0x12,0x6d,0x2b,0xc6,0x48,0xb5,0x5e,0x98,
    0x28,0x84,0x0b,0x34,0x4d,0x8c,0x46,0x2f,0x40,0x30,0x55,0xf9,0xf2,0x02,0x95,0x20,
    0xa2,0x06,0xb4,0xd6,0x54,0x20,0xf6,0xc2,0xa8,0xe0,0xcf,0xf1,0xf7,0x19,0x3f,0x12,
    0x13,0xe7,0x3d,0x7d,0x96,0x4c,0x38,0xc9,0x9e,0x3d,0xfb,0xcc,0xec,0xcc,0xbc,0xb3,
    0x7b,0x92,0x7c,0x33,0x0d,0x21,0x17,0x46,0x42,0x29,0x7c,0x0f,0x83,0x67,0x3c,0xe4,
    0x8d,0x84,0x70,0x2a,0x14,0xb3,0xf9,0x7e,0x7b,0xb5,0x3d,0xbd,0xb7,0xff,0x6a,0x7a,
    0xf6,0xc6,0x8c,0xec,0xa3,0x21,0xc9,0xfc,0x64,0x1b,0x0b,0x69,0x18,0xb2,0x59,0xe3,
    0xfd,0xd6,0x6e,0x57,0xbc,0x62,0x63,0x3e,0x9b,0x93,0x8c,0xa7,0xee,0xfb,0xb4,0xe2,
    0xd9,0x57,0x25,0x8b,0xaf,0xfd,0x21,0x2c,0x84,0x42,0xa8,0x91,0xbb,0xc9,0x1c,0x59,
    0x0e,0x56,0x72,0x2c,0x0f,0xab,0x38,0x96,0xc0,0xce,0x39,0x36,0x04,0xbb,0xe0,0x58,
    0x01,0xd6,0x70,0xac,0x08,0xbb,0xe2,0x58,0x0a,0xbb,0xea,0x58,0x09,0x76,0xdd,0xb1,
    0x61,0xd8,0x8c,0x63,0x23,0xb0,0xd9,0x4c,0x6b,0x72,0x5c,0xb3,0x74,0xcf,0xa3,0xbb,
    0xc6,0x7a,0xd1,0xe6,0xcb,0x68,0x8e,0xeb,0x4b,0xac,0xcf,0xd8,0xae,0x7c,0xb6,0x4e,
    0x32,0x7d,0xfa,0xae,0x9a,0x4f,0x91,0xfa,0xd5,0x9b,0xba,0xad,0x53,0x34,0xe4,0xb3,
    0xb8,0x49,0x28,0x63,0x97,0x6d,0xd4,0xe6,0x32,0xbd,0x68,0xd8,0x7b,0x8c,0x7d,0xe2,
    0xb7,0x58,0x57,0x5c,0xac,0x71,0xfc,0x63,0xae,0x2a,0xb1,0xf4,0x5c,0x34,0x4b,0xec,
    0xcd,0x38,0xa3,0xe8,0x46,0x99,0xb9,0xea,0x86,0x72,0xd6,0xe9,0x53,0x8d,0x9c,0x75,
    0xce,0x49,0xec,0x1a,0x7a,0x26,0xc8,0x21,0xff,0xf3,0xd8,0x52,0x67,0x9f,0xa4,0xff,
    0xb2,0x37,0xb0,0x2b,0xfe,0x59,0xab,0xb4,0x89,0x5f,0x95,0x33,0x0c,0x6e,0xdf,0xd4,
    0x89,0x3c,0x2d,0xce,0x47,0x71,0xe6,0xb8,0x37,0x65,0xea,0x9a,0xe3,0xde,0x26,0x59,
    0x3d,0xc3,0x76,0x1e,0x03,0x5b,0x8e,0x98,0x39,0x37,0x62,0xad,0x0b,0xc7,0x67,0x37,
    0x88,0xa1,0xf5,0xe2,0x89,0x1a,0xda,0xae,0xff,0x0f,0xa9,0xa7,0x48,0xbf,0x97,0xf8,
    0x56,0xce,0x9b,0x76,0x7f,0xf2,0xf8,0x06,0xd8,0x6f,0x23,0xba,0xb3,0xb7,0x39,0xcb,
    0x75,0xce,0xeb,0xb1,0x75,0x47,0xfd,0x7f,0x0a,0x5b,0x77,0x35,0x76,0xb9,0x13,0xcf,
    0xb0,0xdf,0xb3,0x08,0xea,0xe9,0x73,0xfa,0x3e,0x41,0x3c,0xf9,0x6c,0xc0,0x8f,0xcc,
    0x47,0xeb,0x4d,0xf6,0x6d,0xb0,0x4f,0xbd,0x7e,0xc1,0xbe,0x49,0xf6,0xa9,0xcf,0x5b,
    0xf0,0x1f,0xe6,0xa3,0xfe,0xbf,0x84,0xa9,0xff,0xbf,0xac,0xf2,0x1d,0xea,0xf9,0x6b,
    0xfe,0xb2,0x6d,0xdb,0xd8,0x41,0x8f,0xbe,0x97,0x6d,0x9f,0x74,0xbf,0x26,0xa7,0x9e,
    0x2f,0xf4,0xeb,0x0d,0x7c,0xc5,0x56,0xaa,0xe9,0x33,0x2c,0xfa,0xfd,0xb1,0x18,0x31,
    0x96,0xe6,0x9f,0xe6,0x25,0xbf,0x6f,0xf8,0x14,0xd8,0xb3,0xed,0x34,0xec,0xa2,0x61,
    0xca,0x69,0x78,0x0b,0x8f,0x1a,0xde,0xc1,0xa2,0x86,0x9e,0xd3,0x20,0x5b,0xc7,0x46,
    0x8f,0xbc,0x1d,0xa7,0xa1,0x4b,0xee,0x9c,0xd3,0xf0,0x01,0x1e,0x35,0x7c,0x85,0x45,
    0x3f,0x69,0x88,0xb1,0x7a,0x4e,0xc3,0x21,0x3e,0x3b,0xec,0xe9,0x38,0x0d,0x1f,0xd1,
    0xd0,0x72,0x1a,0xf6,0xe0,0x51,0xc3,0x3e,0x2c,0x6a,0xe8,0x3b,0x0d,0xb2,0x1d,0xd8,
    0xe8,0x93,0xf7,0x80,0x7b,0xa4,0xbc,0x9f,0xc8,0x7d,0xe8,0xee,0xb7,0x6a,0x8c,0xbe,
    0x7d,0x57,0xe3,0x11,0x7e,0x3d,0xf6,0x1d,0x50,0x8f,0xfe,0x81,0x07,0xdc,0x7f,0xd5,
    0xac,0xbb,0xfe,0x88,0x9a,0xdb,0xf8,0x14,0xb3,0x9c,0x03,0x1e,0xfb,0xb7,0x4c,0xcc,
    0xe0,0xd8,0x0a,0x4c,0xb5,0x2c,0x19,0xd1,0x7f,0xb2,0x8a,0xef,0x0a,0x31,0x36,0xad,
    0x1a,0xfd,0x13,0x6b,0xe4,0x95,0xfd,0x2e,0xf7,0x5b,0x71,0xf4,0xef,0x3e,0xc1,0xae,
    0xe7,0x8e,0xf5,0x63,0x1e,0xf6,0xcf,0x22,0xb7,0x6c,0xfc,0x07,0x35,0xd9,0x9f,0xfa,
    0x00,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DMSArray depth;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragDepth = texelFetch(depth, ivec3(srcImageCoords, params . srcLayer), 0). x;
//
// }
