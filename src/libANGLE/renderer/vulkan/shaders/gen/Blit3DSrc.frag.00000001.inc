// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/Blit3DSrc.frag.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlit3DSrc_frag_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x94,0x4d,0x6c,0x94,0x65,
    0x10,0xc7,0x9f,0xe7,0xdd,0xed,0x6e,0xcb,0x22,0xd4,0x0a,0xad,0xd5,0x6d,0x5d,0xc0,
    0x34,0x60,0x09,0x72,0x40,0x23,0x31,0x1a,0x4d,0x48,0xe4,0x40,0x02,0x68,0x62,0x39,
    0xf4,0xb2,0x09,0x3d,0xd0,0x44,0x4d,0xaa,0xe1,0xd2,0x03,0x26,0x94,0x84,0x4b,0x0f,
    0x5c,0x7a,0xf0,0xe0,0x07,0x04,0x11,0x8b,0x46,0xf1,0x20,0x78,0x33,0xa2,0x8d,0x10,
    0x3e,0x1a,0x4d,0xd5,0x46,0x52,0xb4,0xa1,0x09,0xa0,0x69,0xa2,0x58,0x05,0xd2,0xc4,
    0x99,0xe7,0xfd,0x0d,0x0c,0xbb,0xc9,0xec,0xfb,0xce,0xff,0x3f,0x33,0xff,0x99,0xe7,
    0xe3,0x2d,0x64,0x6b,0xca,0x21,0xc4,0xb0,0x24,0x34,0x87,0xde,0x18,0xd2,0xef,0xc1,
    0x90,0x05,0x7d,0xad,0x84,0x52,0x7a,0xbe,0xb4,0xed,0x95,0x6d,0x1b,0xde,0x7c,0x6b,
    0xf7,0x86,0x4d,0x4f,0x6d,0x54,0x7e,0x59,0x28,0xa4,0x38,0xe5,0x96,0x8b,0x57,0x94,
    0xa7,0xda,0x6b,0xf5,0x3d,0xaf,0x2b,0xde,0x2e,0xb6,0x4b,0xac,0x2e,0x36,0x28,0x36,
    0x24,0x36,0x2c,0x36,0x22,0x36,0x2a,0x36,0x26,0xd6,0x2a,0x35,0x34,0xa7,0xac,0xf5,
    0xe5,0xad,0x3d,0xe9,0x69,0xbd,0x10,0xb6,0x86,0xa6,0xd0,0x95,0xb7,0x12,0xd6,0xf0,
    0x34,0x2c,0x82,0x35,0x3b,0x2c,0x03,0x6b,0x75,0x58,0x01,0xec,0x61,0x87,0x15,0xc1,
    0xaa,0x0e,0x6b,0x02,0xab,0x39,0xac,0x04,0xf6,0xb8,0xc3,0xca,0x60,0x6b,0x1d,0xd6,
    0x0c,0xb6,0xde,0x61,0x2d,0x60,0x1b,0x1d,0xb6,0x04,0x6c,0x53,0x9a,0xb5,0x70,0xb7,
    0x67,0x9d,0x5b,0xd7,0xa9,0x9b,0x19,0xd5,0xaf,0xe3,0x47,0xfc,0x41,0x7c,0x8b,0x1f,
    0xc2,0x2f,0xe0,0x0f,0xe3,0x17,0xf1,0x47,0xf0,0x9b,0xf0,0x47,0xf1,0x4b,0xf8,0x63,
    0xf8,0xb6,0xee,0xc7,0xe4,0xb9,0xda,0xe9,0xab,0xbf,0xca,0xf9,0xe3,0x0d,0xfc,0x38,
    0xbc,0xf6,0xf3,0x90,0xfc,0x67,0xc9,0x2f,0xa4,0x7e,0xb2,0xb4,0xf7,0x85,0xa4,0xa5,
    0xeb,0xd9,0x21,0xf1,0x65,0xb4,0x95,0x5b,0x29,0x7e,0x05,0x2e,0xc2,0x2f,0x65,0xdf,
    0x8b,0xf8,0x2b,0x88,0x2f,0xa6,0xb8,0xa2,0xe4,0xe4,0xb1,0x8a,0x3f,0x8b,0xdf,0x0e,
    0xa6,0xf5,0xaa,0xd4,0x0b,0x69,0xae,0x07,0xee,0xee,0x95,0x59,0xc5,0x59,0x89,0x67,
    0xd5,0x99,0x6a,0x74,0xb3,0x6f,0x5d,0x68,0xa8,0xff,0x18,0x58,0x6f,0x43,0xcf,0x1a,
    0xbf,0x0a,0xae,0xec,0xf8,0x1e,0x7a,0x30,0xbf,0x97,0xf3,0xa1,0xf1,0xeb,0x89,0xaf,
    0xa6,0x39,0xb2,0xf0,0x24,0x71,0x55,0xce,0x89,0xcf,0xdb,0xdc,0xa0,0xbb,0x85,0xf3,
    0x63,0xfe,0x76,0x74,0xb5,0xee,0x0e,0x62,0x2b,0xf8,0x7d,0x9c,0x8b,0xa5,0xcc,0xd1,
    0xc7,0x3d,0x2c,0xb8,0xfc,0x7e,0xf6,0xc2,0xf8,0x7a,0x03,0x3f,0xc0,0xda,0x1b,0x3f,
    0x08,0x6f,0xfe,0x50,0x43,0xfc,0x5e,0xee,0x9d,0xf1,0xc3,0x0d,0xfc,0x3e,0xd6,0xce,
    0xf8,0x91,0x06,0xfe,0xa0,0xd8,0x0b,0x8e,0x1f,0x6d,0xe0,0x0f,0x89,0xbd,0xed,0xf8,
    0x31,0x78,0x3d,0x2b,0xef,0xb0,0xa7,0xea,0x77,0xca,0x4a,0x1c,0x65,0x2d,0xb2,0x70,
    0xff,0x8f,0xcf,0x5a,0x5a,0xa3,0x0f,0x79,0x3f,0x4a,0x4d,0xf5,0x8f,0x81,0x3d,0x22,
    0x99,0xc7,0x89,0xfb,0x18,0xec,0x38,0x71,0xea,0x8f,0x83,0x3d,0x2a,0x8a,0x9f,0x50,
    0xe3,0x69,0xb9,0x69,0x19,0x6b,0x16,0xe8,0xe5,0x3f,0x41,0xf4,0xfe,0x3d,0xc7,0x79,
    0xfe,0x9a,0x33,0xbb,0x53,0x50,0xed,0xf7,0x1b,0xb0,0xe0,0xb0,0x33,0x60,0xda,0xeb,
    0x0e,0xc1,0x74,0x8f,0xbf,0x25,0x56,0xb9,0x17,0x05,0xd3,0x73,0xf7,0x1d,0x67,0xb3,
    0x46,0x7d,0x8d,0x9b,0x00,0x3f,0x40,0xde,0xf7,0xe4,0x4e,0xb8,0xbc,0xb3,0xe4,0xf5,
    0xb8,0xbc,0x73,0xe0,0xfb,0xc9,0x3b,0x4f,0xee,0x39,0xf2,0xf4,0xdc,0x5e,0x20,0xaf,
    0x97,0x3c,0x3d,0xb3,0x17,0xc1,0xc7,0x25,0x46,0xcf,0xf2,0x25,0x30,0x3d,0xcb,0xff,
    0xca,0x0a,0x4c,0x31,0xdb,0x6d,0x89,0x57,0x6e,0x52,0x6c,0x8a,0x75,0x99,0x74,0x33,
    0xff,0x80,0x66,0x48,0xe7,0xa4,0x98,0xb0,0x1f,0xc1,0x5f,0x16,0x2f,0x7d,0x73,0x63,
    0x8e,0x59,0xdc,0x2d,0xa9,0x61,0xb5,0xf4,0xf9,0x8f,0x44,0x69,0xdc,0xda,0x98,0xc7,
    0x34,0x91,0x33,0xe9,0x66,0xf8,0x89,0x19,0x36,0xbb,0x19,0x7e,0x06,0xb7,0x19,0x7e,
    0x01,0xb3,0x19,0x66,0xdc,0x0c,0xca,0x4d,0x8b,0xcd,0xa0,0x3b,0xed,0x66,0xf8,0x15,
    0xed,0xe8,0x66,0xb8,0x0c,0x6e,0x33,0xf4,0xc4,0x1c,0xb3,0x38,0x9d,0xc1,0x6a,0xcd,
    0xb8,0x19,0xd6,0xc5,0x3c,0x66,0x8a,0x9c,0x69,0x37,0xc3,0x15,0x66,0xd8,0xe2,0x66,
    0xf8,0x0d,0xdc,0x66,0xf8,0x1d,0xcc,0x66,0x98,0x73,0x33,0x28,0x37,0x2b,0x36,0x87,
    0xee,0x6c,0xfa,0x96,0xe4,0xba,0x57,0xd1,0x5e,0x17,0xef,0xdd,0x15,0xed,0xd1,0x62,
    0xe7,0x5c,0x8f,0x4f,0x10,0x37,0x43,0xde,0x2c,0x3d,0xea,0xb7,0xe8,0x5d,0x7a,0x1c,
    0xa0,0x47,0xbd,0x8b,0xef,0x81,0xbf,0xc1,0xda,0xbc,0x0f,0x66,0xeb,0xf7,0x01,0x35,
    0xfd,0x5d,0x38,0x0c,0x96,0xdf,0x85,0x52,0xba,0xe7,0x47,0x88,0x3d,0x4c,0x0d,0xad,
    0xaf,0xf7,0xef,0x23,0xee,0xaf,0xfa,0x7a,0x57,0x4f,0x70,0x4f,0x5f,0x95,0x5a,0x7a,
    0x47,0x3f,0x25,0xe6,0x84,0x9b,0xf7,0x33,0xea,0x1d,0x71,0xdf,0x07,0xbb,0x27,0x9f,
    0x33,0x43,0xbf,0xbb,0x27,0x27,0xc1,0xed,0x7e,0x7d,0x41,0x8d,0x93,0xae,0xe7,0x2f,
    0xc1,0xfd,0x1c,0xa7,0xc0,0xfc,0x1c,0xa7,0x89,0x3d,0xc5,0x1c,0x7d,0x12,0xab,0xdf,
    0xeb,0xaf,0xe8,0xf5,0xb4,0x5b,0xcf,0x6b,0xf4,0xb2,0xdd,0xad,0xe7,0x75,0xf0,0x09,
    0x89,0x51,0xff,0x06,0x58,0xcd,0x9d,0x83,0x3f,0xc0,0x7b,0x38,0x07,0xf3,0xee,0x1c,
    0x28,0xf7,0xa7,0xd8,0x3c,0x7b,0xab,0xef,0xcf,0x4b,0xcc,0x2e,0x7a,0xd0,0x7d,0x37,
    0x6e,0xde,0xe9,0xfc,0x85,0x4e,0xbf,0xd3,0xf9,0x1b,0xdc,0x74,0x16,0x9c,0x8e,0x72,
    0x37,0xc5,0x16,0xa8,0x75,0x13,0x9d,0xba,0xd3,0x31,0x6e,0xc1,0xe9,0xdc,0x42,0x67,
    0xc0,0xe9,0xdc,0x06,0x37,0x9d,0x45,0xa7,0xa3,0xdc,0x1d,0xb1,0x45,0x6a,0xdd,0x41,
    0x67,0xd0,0xe9,0x18,0xb7,0xe8,0x74,0x74,0x53,0xae,0xf3,0x5d,0x33,0x9d,0x18,0x73,
    0xdc,0x74,0x8a,0xf1,0x9e,0x8e,0x72,0x99,0x98,0x62,0x5a,0x4b,0xdf,0x55,0x67,0xc8,
    0xe9,0x18,0xa7,0x4f,0xd3,0x29,0xa3,0xb3,0xd7,0xe9,0x34,0xc7,0x1c,0x37,0x9d,0x8a,
    0xd3,0x51,0xae,0x45,0xac,0x42,0xad,0x16,0x74,0x86,0x9d,0x8e,0x71,0x15,0xa7,0xb3,
    0x0c,0x9d,0x7d,0x4e,0x67,0x79,0xcc,0x71,0xd3,0x69,0x73,0x3a,0xca,0xb5,0x8a,0xb5,
    0x51,0xab,0x15,0x9d,0x11,0xa7,0x63,0x5c,0x9b,0xd3,0x59,0x89,0xce,0x41,0xa7,0xd3,
    0x1e,0x73,0xdc,0x74,0x3a,0x9d,0x8e,0x72,0x1d,0x62,0x9d,0xd4,0xea,0x40,0x67,0xd4,
    0xe9,0x18,0xd7,0xe9,0x74,0xaa,0xe8,0x1c,0x72,0x3a,0x5d,0x31,0xc7,0x4d,0xa7,0xe6,
    0x74,0x94,0xeb,0x16,0xab,0x51,0xab,0x1b,0x9d,0x31,0xa7,0x63,0x9c,0x3e,0x17,0x65,
    0xa3,0x9f,0x11,0xfb,0x1f,0x90,0x8a,0xcf,0x21,0x00,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform itexture3D color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(ivec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 58 "shaders/src/Blit3DSrc.frag"
//
// void main()
// {
//             vec2 srcImageCoordsXY = getSrcImageCoords();
//     vec3 srcImageCoords = vec3(srcImageCoordsXY, params . srcLayer);
//
//             ivec4 colorValue = texture(isampler3D(color, blitSampler), vec3((srcImageCoords . xy)* params . invSrcExtent, srcImageCoords . z));
//
//     broadcastColor(colorValue);
// }
