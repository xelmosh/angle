// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000016.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000016[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x7d,0x93,0xdd,0x4e,0x53,0x51,
    0x10,0x85,0x77,0x7b,0xa0,0x05,0xb4,0x50,0x82,0x05,0x31,0x46,0x50,0xbc,0x30,0x51,
    0x08,0x17,0x68,0x48,0x8c,0x46,0x2f,0x40,0x30,0x48,0xa1,0x20,0x72,0x81,0x16,0x84,
    0x12,0x08,0xd0,0x2a,0x54,0x6d,0xc4,0x68,0x82,0xe8,0x1b,0xe8,0x4b,0xf8,0x7c,0xc6,
    0x9f,0xc4,0xc4,0x59,0xa7,0xdf,0xc1,0x09,0x17,0x9e,0x64,0xce,0xde,0xb3,0xe6,0x77,
    0xed,0xd9,0x3b,0x4a,0x0f,0x65,0x43,0x48,0x85,0x8e,0xd0,0x16,0x3e,0x87,0xe6,0xd7,
    0x1d,0xd2,0x86,0x34,0xd7,0x2f,0x3d,0xc1,0x6c,0xed,0x61,0x61,0x6e,0xa9,0x3c,0xb1,
    0xbc,0x58,0x3e,0xd8,0x5a,0xdb,0xa8,0xec,0x97,0x0f,0xea,0x95,0xea,0xfa,0xf6,0x6e,
    0xb9,0xd2,0x78,0x51,0xdb,0xaf,0x9b,0xef,0x99,0x90,0x89,0x63,0x1e,0xcc,0x2c,0xcc,
    0x8c,0x1c,0xd4,0x37,0x46,0xc6,0x6e,0x8e,0x2a,0x57,0x67,0x88,0xe2,0x9c,0xb2,0x75,
    0x59,0x8d,0x16,0x5b,0x25,0x7b,0x6b,0xdb,0x55,0xe1,0x79,0x93,0x49,0x93,0x62,0xbc,
    0x8f,0x62,0x5b,0xd6,0xed,0xcf,0x2a,0xa7,0xed,0xf2,0x71,0x0d,0xe5,0x08,0x61,0x2a,
    0xb4,0x86,0x5e,0x7a,0x1d,0x62,0x4d,0xb0,0x14,0x58,0x9b,0xc3,0xd2,0x60,0x79,0x87,
    0x45,0x60,0xe7,0x1d,0xd6,0x02,0x76,0xd1,0x61,0xad,0x60,0x83,0x0e,0xcb,0x80,0x5d,
    0x75,0x58,0x16,0xec,0x9a,0xc3,0xda,0xc0,0x6e,0x38,0xac,0x1d,0x6c,0xd4,0x61,0x1d,
    0x60,0x63,0x31,0xd7,0xe8,0xa4,0x67,0xf1,0x9e,0x84,0x77,0x2f,0xfa,0xb4,0xad,0x57,
    0xe0,0x9c,0xe8,0x97,0x9d,0x5e,0xc4,0xff,0x6b,0x4f,0x53,0x2f,0x9d,0xf2,0x2f,0xe1,
    0xaf,0x73,0xea,0xb1,0x2a,0xe9,0x58,0x8f,0xe2,0xf3,0xd0,0xbe,0x60,0x3e,0x19,0xf8,
    0xca,0xa7,0xcf,0xf4,0x2c,0x9c,0xd3,0x71,0x1f,0x51,0xc8,0x61,0x97,0xad,0xd3,0xd6,
    0x1c,0x67,0x37,0x68,0xff,0x2e,0xe2,0x84,0xdf,0x46,0xcf,0xbb,0x5c,0xdd,0xf8,0x27,
    0xb5,0x0a,0xe4,0xd2,0x77,0xc9,0x2c,0xc9,0x59,0x76,0x23,0x19,0x27,0x39,0xd6,0x82,
    0x13,0xd5,0xec,0xe3,0x5c,0x7b,0xa9,0xd9,0xc7,0x5c,0x85,0x5d,0x87,0x4f,0x3f,0x35,
    0xe4,0x7f,0x01,0x5b,0xd6,0xd9,0x07,0x98,0x97,0xec,0x83,0xd8,0x95,0xff,0x9c,0x75,
    0x3a,0x84,0x5f,0x81,0x99,0x07,0x17,0x37,0x7c,0xaa,0xce,0x38,0xf3,0x54,0x9e,0x09,
    0xee,0x59,0x8e,0xbe,0x26,0xb8,0xeb,0x51,0xdc,0x4f,0xbb,0xcd,0xa3,0x69,0x4b,0x85,
    0x7f,0x5f,0xca,0xe9,0xca,0x31,0x75,0x32,0xbb,0x66,0x0e,0xe9,0xd3,0xce,0x3e,0x4b,
    0xbe,0x0c,0xf6,0x59,0xde,0x52,0x52,0x63,0x0e,0x1e,0xff,0xab,0x31,0xcf,0x7e,0x8e,
    0x1c,0xd2,0x4b,0x60,0x9a,0xd9,0x63,0x72,0x68,0xc6,0xb7,0xec,0xce,0xa6,0xd9,0x07,
    0xea,0xfc,0x34,0x44,0xef,0xe4,0x0e,0xf7,0x61,0x85,0x99,0x17,0xed,0x84,0x35,0xc3,
    0xa7,0x60,0x2b,0xae,0x7e,0x95,0x7b,0xf5,0x0c,0xfb,0x7d,0xcb,0xa0,0xb9,0x94,0x99,
    0x5d,0x3f,0xf9,0xe4,0xb3,0x0a,0x7e,0x64,0x3e,0xd2,0x9f,0x13,0xb7,0x4a,0x9c,0xe6,
    0xb5,0x4e,0xdc,0x00,0x71,0xea,0x77,0x03,0xfc,0x9b,0xf9,0x68,0x86,0x15,0x30,0xcd,
    0xf0,0x87,0x75,0xbe,0x43,0x3f,0xbf,0xcd,0x5f,0xb6,0x4d,0x93,0x1d,0xf8,0x68,0x3f,
    0x6f,0x71,0x3a,0xd7,0x2d,0x6a,0xea,0x7b,0xcf,0x9c,0xb7,0xc1,0x4b,0xa6,0xa9,0xa7,
    0x0f,0x60,0x89,0xdf,0x2f,0xcb,0x91,0xe4,0xd2,0xfa,0xdd,0xbc,0xe4,0xf7,0x11,0x9f,
    0x56,0x62,0x36,0x1d,0x87,0x5d,0x38,0x0c,0x3b,0x0e,0x7b,0xe0,0x09,0x87,0x2a,0x58,
    0xc2,0xa1,0xee,0x38,0xc8,0x56,0x33,0xa9,0x53,0xb7,0xe6,0x38,0xbc,0xa4,0x76,0xca,
    0x71,0xd8,0x07,0x4f,0x38,0x1c,0x81,0x25,0x7e,0xe2,0x90,0xe4,0xaa,0x3b,0x0e,0xc7,
    0xf8,0xec,0x10,0x53,0x73,0x1c,0x5e,0xc1,0x61,0xdc,0x71,0x78,0x0d,0x9e,0x70,0x78,
    0x03,0x96,0x70,0x38,0x74,0x1c,0x64,0x6b,0x98,0x1c,0x52,0xb7,0xc1,0x3d,0x52,0xdd,
    0xb7,0xd4,0x3e,0x76,0xf7,0x57,0x3d,0x26,0xbe,0x87,0xae,0xc7,0x4f,0xf8,0xd5,0x89,
    0x6b,0xd0,0x8f,0xde,0xd1,0x43,0xde,0x50,0xd9,0x3c,0x75,0x5f,0x67,0xc0,0x14,0x73,
    0x8f,0xbb,0xa7,0x73,0xd3,0xdb,0x7c,0x84,0x5d,0xdf,0x5d,0xeb,0x75,0x12,0x4c,0xb9,
    0xf4,0x5e,0x16,0x78,0x2b,0xca,0xa5,0x77,0xb2,0x04,0x76,0x3a,0x97,0xce,0xe1,0x09,
    0x76,0x7d,0xef,0x98,0xc1,0x32,0xb8,0x72,0x17,0xd1,0xff,0x18,0xbb,0x71,0x93,0xbf,
    0x2c,0x5d,0x24,0xfc,0x9c,0x07,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// #extension GL_ARB_shader_stencil_export : require
//
// layout(set = 0, binding = 0)uniform texture2DMS depth;
//
// layout(set = 0, binding = 1)uniform utexture2DMS stencil;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//     gl_FragDepth = texelFetch(depth, srcImageCoords, 0). x;
//
//     gl_FragStencilRefARB = int(texelFetch(stencil, srcImageCoords, 0). x);
//
// }
