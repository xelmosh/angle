// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000007.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000007[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x5d,0x95,0x4d,0x6c,0x55,0x65,
    0x10,0x86,0xcf,0xb9,0xf7,0xf6,0xde,0xd2,0x6b,0xb5,0x40,0x69,0x69,0x6e,0xa1,0x85,
    0x52,0xfc,0x23,0x84,0x04,0x34,0x26,0x46,0xa2,0x2b,0xc5,0xd0,0xa8,0x65,0xc1,0xa6,
    0x89,0x35,0xb1,0x0b,0x17,0xc5,0x10,0x4d,0x17,0x2c,0x2c,0x91,0x4d,0x17,0xc4,0xa4,
    0x1b,0x03,0x2c,0x50,0x10,0xe3,0x4f,0x09,0x51,0x23,0x2a,0xb2,0x43,0xc5,0x3f,0xa2,
    0xa9,0xda,0x68,0xaa,0x36,0x36,0xf1,0x87,0x34,0x51,0xd2,0xc4,0x62,0xfd,0x69,0xea,
    0xbc,0xe7,0x3c,0x03,0x93,0x7b,0x93,0xe9,0x77,0xe6,0x7d,0xe7,0x9b,0xf7,0x9b,0x39,
    0xf3,0x9d,0x16,0x0b,0x3d,0x95,0x24,0x49,0x93,0xa6,0xa4,0x31,0xb9,0x39,0x4d,0xb2,
    0xdf,0xca,0xa4,0x90,0xe8,0xb1,0x9a,0x94,0xb3,0xf5,0xfe,0xdd,0x7b,0x76,0x6f,0x7d,
    0xea,0xe9,0xc7,0xb7,0xee,0xb8,0x63,0x9b,0xf8,0x1b,0x93,0x62,0x16,0x27,0xee,0x26,
    0xf3,0x4a,0xb6,0xca,0x86,0x1f,0x7b,0x62,0x9f,0xf0,0x36,0xb3,0x3d,0x66,0x03,0x66,
    0x43,0xc2,0xcd,0x46,0xcc,0x46,0xcd,0xc6,0xcc,0xc6,0xcd,0x5a,0x2c,0x87,0xf6,0x54,
    0x94,0xdf,0x9e,0xda,0x32,0x3d,0xe5,0x4b,0x92,0x07,0x92,0x86,0xa4,0x33,0x3f,0x4a,
    0xd2,0xc3,0xea,0x58,0x0a,0xd6,0x18,0xb0,0x02,0x58,0x4b,0xc0,0x8a,0x60,0x6b,0x03,
    0x56,0x02,0xeb,0x0c,0x58,0x03,0x58,0x77,0xc0,0xca,0x60,0x9b,0x02,0x56,0x01,0xbb,
    0x25,0x60,0x8d,0x60,0x5b,0x02,0xb6,0x02,0x6c,0x5b,0xc0,0x9a,0xc0,0x76,0x64,0xb5,
    0x16,0xaf,0x9d,0x59,0x75,0xab,0x4f,0xeb,0xa9,0x51,0xfe,0x00,0x7e,0x8a,0x3f,0x84,
    0xef,0xf1,0xc3,0xf8,0x45,0xfc,0x11,0xfc,0x12,0xfe,0x28,0x7e,0x03,0xfe,0x18,0x7e,
    0x19,0x7f,0x1c,0xdf,0xfb,0x7e,0xca,0xd6,0x8d,0x41,0x5f,0xfe,0x06,0xfc,0xd5,0xa6,
    0x5a,0xc8,0xfc,0x62,0xa6,0xa7,0xe7,0x35,0x16,0x53,0xa6,0x5f,0x3a,0x63,0xbb,0xf9,
    0x15,0xf2,0x17,0xf0,0xab,0xf8,0xa5,0x6c,0x16,0x8a,0x96,0x27,0x8f,0x17,0xd7,0x9a,
    0xe5,0xcd,0xb9,0x6e,0xfb,0xbb,0x86,0x3c,0xc2,0xef,0xc6,0x6f,0x0b,0xb9,0xdb,0x89,
    0x77,0xed,0x1a,0xb9,0x92,0xac,0x8e,0xe6,0x6b,0xef,0xa6,0x1d,0x2b,0x07,0x5b,0xcd,
    0x5a,0x0b,0x26,0xcd,0x75,0xbc,0xa7,0x4e,0x34,0xd7,0xd1,0x13,0x61,0xb7,0x53,0x5f,
    0x17,0x1a,0x8a,0xef,0x86,0xab,0x04,0xbe,0x97,0xf7,0x2f,0x7e,0x33,0x7c,0x2d,0xab,
    0xa3,0x90,0xdc,0x4a,0x9c,0xfc,0xdb,0xc8,0xe3,0xfb,0xb6,0xd7,0xe9,0xec,0x64,0x3e,
    0xdc,0xdf,0x85,0x8e,0xf2,0x3e,0x48,0x6c,0x39,0xf0,0x7d,0xf4,0x46,0x7c,0x3f,0x73,
    0x50,0xa5,0x8e,0x7e,0xee,0x5d,0x31,0xc4,0xef,0xa5,0x77,0xce,0x0f,0xd4,0xf1,0x83,
    0xbc,0x0b,0xe7,0x87,0xe0,0xdd,0x1f,0xae,0x8b,0xdf,0xcf,0x3d,0x73,0x7e,0xa4,0x8e,
    0x3f,0xc0,0xfb,0x71,0x7e,0xb4,0x8e,0x3f,0x64,0x76,0x6f,0xe0,0xc7,0xea,0xf8,0xc3,
    0x66,0x07,0x03,0x3f,0x0e,0xbf,0xc5,0xba,0xa2,0x3a,0x9f,0xe7,0xdd,0x44,0xf3,0xbd,
    0xc7,0x99,0xfb,0x0e,0xeb,0xda,0x49,0xfa,0xc6,0x27,0x2d,0x5b,0xd3,0xe0,0xab,0x7f,
    0x2f,0xf1,0x7c,0x12,0x3d,0xf9,0xa7,0xc0,0x34,0x7b,0xaf,0x91,0x23,0x9e,0xef,0x2c,
    0x98,0xf6,0xbf,0xc3,0xfb,0xd1,0x9c,0xdd,0x69,0xca,0x05,0x7a,0x99,0xb0,0x67,0xd1,
    0x10,0x9d,0xe7,0x1e,0xe6,0xfe,0x02,0xb3,0xfd,0x90,0xd5,0xa2,0x59,0xfd,0x00,0xec,
    0x42,0x38,0xe3,0x3e,0xee,0xd3,0x87,0xf0,0xf7,0x59,0x06,0xf5,0xf3,0x23,0x66,0xb4,
    0x8b,0x7c,0x8a,0xb9,0x08,0xfe,0xac,0xc5,0xc8,0xff,0x84,0x7d,0x17,0xd9,0xa7,0xb9,
    0xfc,0x94,0x7d,0xbd,0xec,0xd3,0x4c,0x7e,0x06,0x3e,0x61,0x31,0x9a,0xd5,0xcf,0xc1,
    0x34,0xab,0x7f,0xd9,0xc9,0x27,0x39,0xcf,0x3f,0x16,0x2f,0xee,0x92,0xd9,0x24,0xf5,
    0xe8,0xf9,0x11,0xdb,0xa7,0x1e,0x7c,0x81,0xa6,0x7e,0xcf,0xd0,0x9f,0x2f,0xc1,0xfb,
    0xcd,0xd3,0x99,0xd6,0xa7,0x39,0xe6,0x71,0x7f,0x5b,0x0e,0xcf,0xa5,0x75,0xc1,0xa2,
    0x14,0xb7,0x31,0xcd,0x63,0x1a,0xd8,0x73,0x29,0xd4,0xf0,0x15,0x35,0x6c,0x0f,0x35,
    0x7c,0x0d,0xee,0x35,0x7c,0x03,0xe6,0x35,0x4c,0x87,0x1a,0xc4,0x4d,0x99,0x4d,0xa3,
    0x3b,0x15,0x6a,0xf8,0x16,0xed,0x34,0xd4,0xf0,0x1d,0xb8,0xd7,0xb0,0x21,0xcd,0x31,
    0x8f,0x53,0x0d,0x9e,0x6b,0x3a,0xd4,0xd0,0x93,0xe6,0x31,0x93,0xec,0x99,0x0a,0x35,
    0x7c,0x4f,0x0d,0x3b,0x43,0x0d,0x3f,0x80,0x7b,0x0d,0x3f,0x82,0x79,0x0d,0xb3,0xa1,
    0x06,0x71,0x33,0x66,0xb3,0xe8,0xce,0x30,0x47,0xd2,0xfd,0x09,0xed,0x9e,0xf4,0xfa,
    0x7c,0xeb,0x8c,0x1e,0x3b,0x1b,0xce,0xb8,0x89,0xb8,0x69,0xf6,0xcd,0x10,0x7b,0x84,
    0xd8,0x23,0xc4,0xea,0xae,0x6d,0x4e,0xf3,0xfb,0xa6,0xfd,0x6f,0x98,0x1d,0x85,0xcb,
    0xbe,0x7f,0x69,0x3e,0x8b,0xe2,0xde,0x82,0x53,0xad,0xfa,0x66,0xbd,0x40,0xad,0xc7,
    0xa9,0x55,0xf1,0x2f,0x82,0xbf,0x49,0xad,0x27,0xc8,0x21,0xfc,0xaa,0xc5,0x1c,0x23,
    0x87,0xd7,0x7b,0x02,0xff,0x18,0xe7,0x3a,0x4a,0x2e,0xdd,0xd5,0x97,0xb9,0xa7,0xae,
    0xf7,0x0a,0x7a,0x83,0x41,0xef,0x55,0x70,0x7f,0xcf,0xaf,0x53,0x7b,0x12,0xb0,0x09,
    0x30,0xc1,0x0f,0x1b,0xa2,0xfb,0x7e,0x9a,0xd8,0x09,0x72,0x3c,0x4a,0x2f,0xce,0xa0,
    0x7b,0x9a,0xef,0x97,0xce,0x7e,0xd0,0xf2,0x54,0xe9,0x8d,0x7a,0x75,0x26,0xc9,0xb1,
    0x32,0x3d,0x51,0x4c,0x5f,0x5d,0x7f,0x55,0xcf,0x93,0x7c,0x0f,0xde,0x66,0x9f,0xea,
    0xd0,0xb7,0xe4,0x5d,0xea,0x38,0x4b,0x1d,0xfa,0xae,0xbc,0x07,0xfe,0x9c,0xc5,0x68,
    0xcf,0x39,0xf6,0x09,0xbf,0xc1,0x94,0x84,0xbd,0x1f,0xbe,0x6d,0xe7,0xf8,0x86,0xe8,
    0x5c,0xe7,0xe1,0xbc,0x4f,0x3f,0x93,0x7f,0x57,0xe8,0xd3,0x2f,0xe0,0x1f,0x73,0xee,
    0x5f,0xc1,0xfa,0xc2,0x5c,0xfe,0x06,0xde,0xc5,0x5c,0xce,0x85,0xf7,0x24,0xee,0xb2,
    0xd9,0x1c,0xf5,0x5d,0xce,0x66,0xbc,0x98,0xfd,0x1f,0x3a,0x4f,0xed,0xce,0xcd,0x05,
    0x9d,0xdf,0xd1,0xd9,0x1b,0x74,0xfe,0x00,0x77,0x9d,0xf9,0xa0,0x23,0xee,0x8a,0xd9,
    0x3c,0xb9,0xae,0xa0,0x33,0x10,0x74,0x9c,0x9b,0x0f,0x3a,0x7f,0xa2,0x33,0x18,0x74,
    0x16,0xc0,0x5d,0x67,0x31,0xe8,0x2c,0x64,0xf3,0x98,0x64,0x98,0x72,0x5d,0x45,0x67,
    0x28,0xe8,0x38,0xb7,0x18,0x74,0xfe,0x45,0xa7,0x37,0xe8,0xfc,0x07,0xee,0x3a,0xcb,
    0x41,0x47,0xdc,0x92,0xd9,0x32,0xb9,0x96,0xd0,0x19,0x0e,0x3a,0xce,0x2d,0x07,0x9d,
    0x42,0x9a,0xeb,0xec,0x0f,0x3a,0xc5,0x34,0xc7,0x5d,0xa7,0x9c,0x5e,0xd7,0x11,0x57,
    0x32,0x13,0xa6,0x5c,0x7a,0x96,0xce,0x48,0xd0,0x71,0x4e,0xab,0xeb,0xac,0x40,0xe7,
    0x40,0xd0,0x69,0x4a,0x73,0xdc,0x75,0x9a,0x83,0x8e,0xb8,0xaa,0x59,0x33,0xb9,0xaa,
    0xe8,0x8c,0x06,0x1d,0xe7,0x9a,0x83,0x4e,0x0b,0x3a,0x87,0x82,0xce,0xca,0x34,0xc7,
    0x5d,0xa7,0x35,0xe8,0x88,0x5b,0x65,0xd6,0x4a,0xae,0x55,0xe8,0x8c,0x05,0x1d,0xe7,
    0x5a,0x83,0x4e,0x3b,0x3a,0x87,0x83,0xce,0xda,0x34,0xc7,0x5d,0xa7,0x16,0x74,0xc4,
    0x75,0x98,0xd5,0xc8,0xd5,0x81,0xce,0x78,0xd0,0x71,0x4e,0xeb,0x92,0xdd,0xbe,0xbb,
    0xcc,0xfe,0x07,0x45,0x1b,0x13,0x71,0x50,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DMSArray color;
//
// layout(location = 0)out ivec4 colorOut0;
// layout(location = 1)out ivec4 colorOut1;
// layout(location = 2)out ivec4 colorOut2;
// layout(location = 3)out ivec4 colorOut3;
// layout(location = 4)out ivec4 colorOut4;
// layout(location = 5)out ivec4 colorOut5;
// layout(location = 6)out ivec4 colorOut6;
// layout(location = 7)out ivec4 colorOut7;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             ivec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         ivec2 getSrcImageCoords()
// {
//
//             ivec2 srcImageCoords = ivec2(gl_FragCoord . xy);
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(ivec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             ivec2 srcImageCoords = getSrcImageCoords();
//
//             ivec4 colorValue = ivec4(0, 0, 0, 0);
//     for(int i = 0;i < params . samples;++ i)
//     {
//         colorValue += texelFetch(color, ivec3(srcImageCoords, params . srcLayer), i);
//     }
//
//     colorValue = ivec4(round(colorValue * params . invSamples));
//
//     broadcastColor(colorValue);
//
// }
