// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/BlitResolve.frag.00000009.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kBlitResolve_frag_00000009[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x65,0x94,0x4d,0x68,0x9d,0x55,
    0x10,0x86,0xcf,0xb9,0xdf,0xfd,0x49,0x73,0xaf,0x36,0x21,0x9a,0xc6,0x98,0xd4,0xfc,
    0x94,0x20,0xa4,0xd4,0x2e,0xaa,0x58,0xa4,0x45,0xa1,0xa0,0x8b,0x42,0xab,0x82,0xcd,
    0x22,0x9b,0x0b,0xcd,0xc2,0x80,0x0a,0x51,0xba,0xc9,0xa2,0x82,0x11,0xba,0xc9,0xa2,
    0x9b,0x6c,0x6a,0xad,0xa9,0x62,0x6d,0xab,0x6d,0xb5,0xee,0xc4,0x9f,0xa2,0xa5,0x6a,
    0x50,0xa2,0x06,0x4b,0xd4,0x60,0xc0,0x3f,0x02,0x5a,0x02,0xb6,0x44,0x6b,0x0d,0xce,
    0x9c,0xef,0x99,0x66,0xb8,0x06,0x26,0xe7,0xce,0xfb,0xce,0xcc,0x7b,0xe6,0x9c,0x39,
    0x5f,0x56,0xe8,0xaf,0x84,0x10,0x43,0x73,0x68,0x0a,0x9b,0x62,0x48,0x7f,0xad,0xa1,
    0x10,0xf4,0x67,0x35,0x94,0xd3,0xfa,0xf0,0xee,0xc7,0x77,0x6f,0x79,0xf6,0xb9,0xfd,
    0x5b,0xb6,0xdd,0xbb,0x55,0xf9,0x5b,0x43,0x96,0xe2,0x94,0x5b,0x2f,0x5e,0x51,0x56,
    0xb5,0xa7,0xea,0x4f,0x3e,0xad,0x78,0xbb,0xd8,0x90,0x58,0x5d,0x6c,0x54,0x6c,0x4c,
    0x6c,0x5c,0x6c,0x42,0x6c,0x52,0x6c,0x4a,0xac,0x45,0x6a,0x68,0x4e,0x45,0xeb,0xcb,
    0xaf,0xf6,0xa4,0xa7,0xf5,0x42,0x78,0x24,0x94,0x42,0x77,0xbe,0x95,0xd0,0xcf,0x6a,
    0x58,0x04,0x6b,0x72,0x58,0x01,0xac,0xc5,0x61,0x19,0x58,0x87,0xc3,0x8a,0x60,0x5d,
    0x0e,0x2b,0x81,0xf5,0x38,0xac,0x0c,0xb6,0xc9,0x61,0x15,0xb0,0xbb,0x1d,0xd6,0x04,
    0xb6,0xd9,0x61,0xeb,0xc0,0xb6,0x3a,0xac,0x19,0x6c,0x5b,0xea,0x35,0xbb,0xb9,0x67,
    0xed,0x5b,0xcf,0x69,0x23,0x3d,0xaa,0x5f,0xc7,0x8f,0xf8,0xa3,0xf8,0x16,0x3f,0x86,
    0x9f,0xe1,0x8f,0xe3,0x17,0xf1,0x27,0xf0,0x4b,0xf8,0x93,0xf8,0x65,0xfc,0x29,0x7c,
    0x3b,0xf7,0xa3,0xb2,0xf6,0x39,0x7d,0xf5,0x7b,0x9d,0x3f,0xdd,0xc0,0x4f,0xc3,0xeb,
    0x7e,0xda,0xe4,0x7f,0x21,0xf9,0x59,0xda,0x4f,0x21,0xdd,0x7d,0x96,0xb4,0xf4,0x3c,
    0x37,0x48,0x7c,0x05,0x6d,0xe5,0x6e,0x17,0xbf,0x0a,0x17,0xe0,0x6b,0xdc,0x7b,0x11,
    0xff,0x36,0xe2,0x8b,0x29,0xae,0x28,0x39,0xf9,0x59,0x28,0xfe,0x00,0x7e,0x3b,0x98,
    0xd6,0xeb,0xa2,0x5e,0x4c,0x7d,0xdd,0x72,0xf3,0xae,0xcc,0xba,0x9c,0x95,0x59,0xab,
    0xce,0x54,0x63,0x23,0xf7,0xd6,0x8d,0x86,0xfa,0x77,0x81,0x0d,0x36,0x68,0x68,0x7c,
    0x2f,0x5c,0xc5,0xf1,0x03,0xf4,0x64,0xfe,0x20,0xf3,0xa1,0xf1,0x9b,0x89,0xaf,0xa6,
    0x3e,0x0a,0xe1,0x1e,0xe2,0xaa,0xcc,0x89,0xcf,0xdb,0xde,0xa0,0xbb,0x8b,0xf9,0x31,
    0x7f,0x0f,0xba,0x5a,0x77,0x2f,0xb1,0x5d,0xf8,0xfb,0x98,0x8b,0x1a,0x7d,0xec,0xe3,
    0x1d,0x66,0x2e,0x7f,0x98,0xbb,0x30,0xbe,0xde,0xc0,0x8f,0x70,0xf6,0xc6,0x8f,0xc2,
    0x9b,0x3f,0xd6,0x10,0x7f,0x80,0x77,0x67,0xfc,0x78,0x03,0x7f,0x90,0xb3,0x33,0x7e,
    0xa2,0x81,0x3f,0x24,0xf6,0xa0,0xe3,0x27,0x1b,0xf8,0xc3,0x62,0xcf,0x3b,0x7e,0x0a,
    0xfe,0x0e,0xe9,0xfc,0x08,0x67,0xca,0x67,0xeb,0x7f,0xab,0x9e,0xc9,0x4b,0xfc,0x3e,
    0x42,0x0d,0xf5,0x8f,0x82,0x75,0xca,0x49,0x1c,0x23,0xee,0x15,0xb0,0x63,0xc4,0xa9,
    0x3f,0x0d,0x76,0xa7,0x28,0xbe,0x4a,0x0d,0x9d,0xd1,0x37,0x99,0x25,0xbf,0xcf,0x73,
    0xf8,0xf7,0xc9,0xcb,0x2b,0x70,0x86,0x01,0xec,0x2f,0x41,0xf4,0x3d,0xee,0x60,0xbe,
    0xdf,0x63,0x86,0x1f,0x15,0x54,0xeb,0xbc,0x0f,0x16,0x1c,0xf6,0x01,0x98,0xf6,0xb2,
    0x57,0x30,0xbd,0xf3,0x0f,0x89,0x55,0xee,0x21,0xc1,0x74,0x0e,0x3f,0x62,0x56,0x7b,
    0xa8,0xaf,0x71,0x17,0xc0,0x5f,0x24,0xef,0x63,0x72,0x2f,0xb8,0xbc,0x4f,0xc8,0x1b,
    0x70,0x79,0x17,0xc1,0x5f,0x20,0xef,0x12,0xb9,0x17,0xc9,0xd3,0x39,0xfe,0x94,0xbc,
    0x41,0xf2,0xf4,0xfc,0x3f,0x03,0x3f,0x2d,0x31,0x3a,0xdb,0x9f,0x83,0xe9,0x6c,0xaf,
    0xc8,0x09,0xcc,0xd2,0xdb,0x75,0x89,0x57,0x6e,0x46,0x6c,0x96,0x73,0x99,0x71,0x3d,
    0x7f,0x81,0x66,0x48,0x73,0x53,0x4c,0xd8,0x97,0xe0,0x8f,0x89,0xa7,0x7b,0xea,0x8e,
    0x39,0x66,0x71,0x7f,0x4b,0x0d,0xab,0xa5,0xeb,0x35,0x89,0xd2,0xb8,0xde,0x98,0xc7,
    0x94,0xc8,0x99,0x71,0x3d,0x7c,0x45,0x0f,0xdb,0x5d,0x0f,0x5f,0x83,0x5b,0x0f,0xdf,
    0x80,0x59,0x0f,0xf3,0xae,0x07,0xe5,0xe6,0xc4,0xe6,0xd1,0x9d,0x73,0x3d,0x7c,0x8b,
    0x76,0x74,0x3d,0x5c,0x06,0xb7,0x1e,0x7a,0x62,0x8e,0x59,0x9c,0xf6,0x60,0xb5,0xe6,
    0x5d,0x0f,0x7d,0x31,0x8f,0x99,0x25,0x67,0xce,0xf5,0xf0,0x1d,0x3d,0xec,0x72,0x3d,
    0x7c,0x0f,0x6e,0x3d,0xfc,0x00,0x66,0x3d,0x2c,0xba,0x1e,0x94,0x5b,0x10,0x5b,0x44,
    0x77,0x21,0x7d,0x5b,0x72,0xdd,0x1f,0xd1,0xee,0x8b,0x6b,0x6f,0x49,0xf7,0x68,0xb1,
    0x8b,0x6e,0x8f,0xfd,0xc4,0xcd,0x93,0xb7,0xc0,0x7e,0xf4,0xad,0xbc,0xcc,0x5b,0x53,
    0x5f,0xdf,0xd5,0x71,0xde,0xd4,0x13,0xb2,0x3f,0x7d,0x4f,0xaf,0x11,0x73,0xdc,0xcd,
    0xe5,0xeb,0xf4,0x35,0xec,0xe6,0xf2,0x04,0xb8,0xcd,0xf3,0x1b,0xe8,0x9e,0x20,0x4f,
    0xbf,0x83,0x27,0xc9,0x1b,0x21,0x4f,0xdf,0xe4,0x29,0xf0,0x67,0xb8,0x87,0xd3,0x60,
    0x76,0x57,0x6f,0x51,0xcb,0xbf,0xbb,0x33,0x60,0xf9,0xbb,0x2b,0xa7,0xb7,0x7e,0x96,
    0xd8,0x33,0xd4,0x30,0xcd,0xb7,0xd1,0x3c,0xe7,0x34,0xdf,0x01,0x37,0xcd,0xf3,0x60,
    0x43,0xb2,0x73,0xfd,0x2e,0xbf,0x4b,0xdf,0x67,0xf9,0x0e,0x9f,0x77,0xf5,0x7e,0xa2,
    0xde,0x1e,0x57,0xef,0x67,0xf0,0x4b,0x12,0xa3,0xfe,0x2f,0x60,0x3d,0xee,0x9e,0x7f,
    0x05,0x1f,0xe0,0x9e,0x97,0xdc,0x3d,0x2b,0xf7,0x9b,0xd8,0x12,0x77,0xa7,0xbf,0x77,
    0x4a,0xcc,0x10,0x7b,0xd1,0x7b,0x35,0x6e,0xc9,0xe9,0xfc,0x8e,0xce,0xb0,0xd3,0xf9,
    0x03,0xdc,0x74,0x96,0x9d,0x8e,0x72,0x57,0xc4,0x96,0xa9,0x75,0x05,0x9d,0xba,0xd3,
    0x31,0x6e,0xd9,0xe9,0xfc,0x89,0xce,0x88,0xd3,0xb9,0x0a,0x6e,0x3a,0x2b,0x4e,0xe7,
    0x6a,0x9a,0xbd,0x90,0x30,0xad,0x75,0x0d,0x9d,0x51,0xa7,0x63,0xdc,0x8a,0xd3,0xb9,
    0x8e,0xce,0xa0,0xd3,0xf9,0x07,0xdc,0x74,0x56,0x9d,0x8e,0x72,0x37,0xc4,0x56,0xa9,
    0x75,0x03,0x9d,0x31,0xa7,0x63,0xdc,0xaa,0xd3,0x89,0x31,0xd7,0x39,0xe0,0x74,0x0a,
    0x31,0xc7,0x4d,0xa7,0x14,0xd7,0x74,0x94,0xcb,0xc4,0x14,0xd3,0x5a,0xfa,0x5b,0x75,
    0xc6,0x9d,0x8e,0x71,0xa5,0xb8,0xa6,0xd3,0x84,0xce,0x41,0xa7,0xb3,0x2e,0xe6,0xb8,
    0xe9,0xd4,0x9c,0x8e,0x72,0xcd,0x62,0x35,0x6a,0x35,0xa3,0x33,0xe1,0x74,0x8c,0xab,
    0x39,0x9d,0xf5,0xe8,0x1c,0x72,0x3a,0x2d,0x31,0xc7,0x4d,0xa7,0xcd,0xe9,0x28,0xd7,
    0x2a,0xd6,0x46,0xad,0x56,0x74,0x26,0x9d,0x8e,0x71,0x6d,0x4e,0xa7,0x1d,0x9d,0xc3,
    0x4e,0x67,0x43,0xcc,0x71,0xd3,0xe9,0x74,0x3a,0xca,0x75,0x88,0x75,0x52,0xab,0x03,
    0x9d,0x29,0xa7,0x63,0x9c,0xae,0xff,0xca,0x8b,0xbe,0x5f,0xec,0x3f,0xf9,0xf0,0x26,
    0xef,0xf0,0x0c,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_GOOGLE_include_directive : require
//
// layout(set = 0, binding = 0)uniform utexture2DArray color;
//
// layout(location = 0)out uvec4 colorOut0;
// layout(location = 1)out uvec4 colorOut1;
// layout(location = 2)out uvec4 colorOut2;
// layout(location = 3)out uvec4 colorOut3;
// layout(location = 4)out uvec4 colorOut4;
// layout(location = 5)out uvec4 colorOut5;
// layout(location = 6)out uvec4 colorOut6;
// layout(location = 7)out uvec4 colorOut7;
//
// layout(set = 0, binding = 2)uniform sampler blitSampler;
//
// #line 1 "shaders/src/BlitResolve.inc"
//
// layout(push_constant)uniform PushConstants {
//
//             vec2 offset;
//     vec2 stretch;
//     vec2 invSrcExtent;
//     int srcMip;
//     int srcLayer;
//     int samples;
//     float invSamples;
//
//     int outputMask;
//
//     bool flipX;
//     bool flipY;
//     bool rotateXY;
// } params;
//
//         vec2 getSrcImageCoords()
// {
//
//             vec2 srcImageCoords = vec2(gl_FragCoord . xy);
//
//     srcImageCoords *= params . stretch;
//
//     srcImageCoords -= params . offset;
//
//     if(params . flipX)
//         srcImageCoords . x = - srcImageCoords . x;
//     if(params . flipY)
//         srcImageCoords . y = - srcImageCoords . y;
//     if(params . rotateXY)
//         srcImageCoords . xy = srcImageCoords . yx;
//
//     return srcImageCoords;
// }
//
// void broadcastColor(uvec4 colorValue)
// {
//
//     if((params . outputMask &(1 << 0))!= 0)
//     {
//         colorOut0 = colorValue;
//     }
//     if((params . outputMask &(1 << 1))!= 0)
//     {
//         colorOut1 = colorValue;
//     }
//     if((params . outputMask &(1 << 2))!= 0)
//     {
//         colorOut2 = colorValue;
//     }
//     if((params . outputMask &(1 << 3))!= 0)
//     {
//         colorOut3 = colorValue;
//     }
//     if((params . outputMask &(1 << 4))!= 0)
//     {
//         colorOut4 = colorValue;
//     }
//     if((params . outputMask &(1 << 5))!= 0)
//     {
//         colorOut5 = colorValue;
//     }
//     if((params . outputMask &(1 << 6))!= 0)
//     {
//         colorOut6 = colorValue;
//     }
//     if((params . outputMask &(1 << 7))!= 0)
//     {
//         colorOut7 = colorValue;
//     }
// }
//
// #line 123 "shaders/src/BlitResolve.frag"
//
// void main()
// {
//             vec2 srcImageCoords = getSrcImageCoords();
//
//             uvec4 colorValue = textureLod(usampler2DArray(color, blitSampler), vec3(srcImageCoords * params . invSrcExtent, params . srcLayer), params . srcMip);
//
//     broadcastColor(colorValue);
//
// }
